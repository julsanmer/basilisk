<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="hill_to_att_ref_8c" kind="file" language="C++">
    <compoundname>hillToAttRef.c</compoundname>
    <includes refid="hill_to_att_ref_8h" local="yes">hillToAttRef.h</includes>
    <includes local="yes">string.h</includes>
    <includes local="yes">math.h</includes>
    <includes local="yes">architecture/utilities/linearAlgebra.h</includes>
    <includes local="yes">architecture/utilities/rigidBodyKinematics.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c</label>
        <link refid="hill_to_att_ref_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>hillToAttRef.h</label>
        <link refid="hill_to_att_ref_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="10">
        <label>architecture/utilities/linearAlgebra.h</label>
      </node>
      <node id="11">
        <label>architecture/utilities/rigidBodyKinematics.h</label>
      </node>
      <node id="7">
        <label>cMsgCInterface/AttRefMsg_C.h</label>
      </node>
      <node id="6">
        <label>cMsgCInterface/HillRelStateMsg_C.h</label>
      </node>
      <node id="8">
        <label>cMsgCInterface/NavAttMsg_C.h</label>
      </node>
      <node id="9">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="4">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="hill_to_att_ref_8c_1a3a8b0d66398a08423e4089a26c276538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SelfInit_hillToAttRef</definition>
        <argsstring>(HillToAttRefConfig *configData, int64_t moduleID)</argsstring>
        <name>SelfInit_hillToAttRef</name>
        <param>
          <type><ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" line="26" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" bodystart="26" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="hill_to_att_ref_8c_1ad6498db4130a566327b345eff6fc6ae0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Reset_hillToAttRef</definition>
        <argsstring>(HillToAttRefConfig *configData, uint64_t callTime, int64_t moduleID)</argsstring>
        <name>Reset_hillToAttRef</name>
        <param>
          <type><ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>callTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs a complete reset of the module. Local module variables that retain time varying states between function calls are reset to their default values. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock time at which the function was called (nanoseconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The Basilisk module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" line="36" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" bodystart="36" bodyend="51"/>
      </memberdef>
      <memberdef kind="function" id="hill_to_att_ref_8c_1a65a85c42802f6c4fee9e5329ba76ec75" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>AttRefMsgPayload</type>
        <definition>AttRefMsgPayload RelativeToInertialMRP</definition>
        <argsstring>(HillToAttRefConfig *configData, double relativeAtt[3], double sigma_XN[3])</argsstring>
        <name>RelativeToInertialMRP</name>
        <param>
          <type><ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>double</type>
          <declname>relativeAtt</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>sigma_XN</declname>
          <array>[3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" line="53" column="18" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" bodystart="53" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="hill_to_att_ref_8c_1a2abecf87b96ca921cf0067f921a9196c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Update_hillToAttRef</definition>
        <argsstring>(HillToAttRefConfig *configData, uint64_t callTime, int64_t moduleID)</argsstring>
        <name>Update_hillToAttRef</name>
        <param>
          <type><ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>callTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This module reads an OpNav image and extracts circle information from its content using OpenCV&apos;s HoughCircle Transform. It performs a greyscale, a bur, and a threshold on the image to facilitate circle-finding. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock time at which the function was called (nanoseconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The Basilisk module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" line="76" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c" bodystart="76" bodyend="121"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2021,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;hillToAttRef.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;math.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/rigidBodyKinematics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SelfInit_hillToAttRef(<ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref><sp/>*configData,<sp/>int64_t<sp/>moduleID){</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>AttRefMsg_C_init(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a0aa223c3f4f56ef554c75a469aba33e5" kindref="member">attRefOutMsg</ref>);</highlight></codeline>
<codeline lineno="28"><highlight class="normal">}</highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset_hillToAttRef(<ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref><sp/>*configData,<sp/><sp/>uint64_t<sp/>callTime,<sp/>int64_t<sp/>moduleID)</highlight></codeline>
<codeline lineno="37"><highlight class="normal">{</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!HillRelStateMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a7b2eaf6bed56117cbf44a2c3928de485" kindref="member">hillStateInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9660a2e0ae9191fb9683e84c3f36ef86" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>hillToAttRef.hillStateInMsg<sp/>wasn&apos;t<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(AttRefMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a02219264d9ee4743f9b8feb5a5ee4380" kindref="member">attRefInMsg</ref>)<sp/>&amp;&amp;<sp/>NavAttMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9d88362c0d3a3bce10d8a9607610f473" kindref="member">attNavInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9660a2e0ae9191fb9683e84c3f36ef86" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>hillToAttRef<sp/>can&apos;t<sp/>have<sp/>both<sp/>attRefInMsg<sp/>and<sp/>attNavInMsg<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AttRefMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a02219264d9ee4743f9b8feb5a5ee4380" kindref="member">attRefInMsg</ref>)<sp/>&amp;&amp;<sp/>!NavAttMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9d88362c0d3a3bce10d8a9607610f473" kindref="member">attNavInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9660a2e0ae9191fb9683e84c3f36ef86" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>hillToAttRef<sp/>must<sp/>have<sp/>one<sp/>of<sp/>attRefInMsg<sp/>and<sp/>attNavInMsg<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal">AttRefMsgPayload<sp/>RelativeToInertialMRP(<ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref><sp/>*configData,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relativeAtt[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma_XN[3]){</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>AttRefMsgPayload<sp/>attRefOut;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Check<sp/>to<sp/>see<sp/>if<sp/>the<sp/>relative<sp/>attitude<sp/>components<sp/>exceed<sp/>specified<sp/>bounds<sp/>(by<sp/>default<sp/>these<sp/>are<sp/>non-physical<sp/>and<sp/>should<sp/>never<sp/>be<sp/>reached)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind=0;<sp/>ind&lt;3;<sp/>++ind){</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeAtt[ind]<sp/>=<sp/>fmax(relativeAtt[ind],<sp/>configData-&gt;<ref refid="struct_hill_to_att_ref_config_1ac6f439629df6f130345048aa58e42283" kindref="member">relMRPMin</ref>);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeAtt[ind]<sp/>=<sp/>fmin(relativeAtt[ind],<sp/>configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a6c7ea988f7cc3ca2da84eb2d8791fe7f" kindref="member">relMRPMax</ref>);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Combine<sp/>the<sp/>relative<sp/>attitude<sp/>with<sp/>the<sp/>chief<sp/>inertial<sp/>attitude<sp/>to<sp/>get<sp/>the<sp/>reference<sp/>attitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>addMRP(sigma_XN,<sp/>relativeAtt,<sp/>attRefOut.sigma_RN);</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind=0;<sp/>ind&lt;3;<sp/>++ind){</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attRefOut.omega_RN_N[ind]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attRefOut.domega_RN_N[ind]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(attRefOut);</highlight></codeline>
<codeline lineno="68"><highlight class="normal">}</highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Update_hillToAttRef(<ref refid="struct_hill_to_att_ref_config" kindref="compound">HillToAttRefConfig</ref><sp/>*configData,<sp/>uint64_t<sp/>callTime,<sp/>int64_t<sp/>moduleID)<sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>HillRelStateMsgPayload<sp/>hillStateInPayload;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>NavAttMsgPayload<sp/>attStateInPayload;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>AttRefMsgPayload<sp/>attRefInPayload;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>AttRefMsgPayload<sp/>attRefOutPayload;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>baseSigma[3];</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>relativeAtt[3];</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hillState[6];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Do<sp/>message<sp/>reads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>hillStateInPayload<sp/>=<sp/>HillRelStateMsg_C_read(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a7b2eaf6bed56117cbf44a2c3928de485" kindref="member">hillStateInMsg</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(AttRefMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a02219264d9ee4743f9b8feb5a5ee4380" kindref="member">attRefInMsg</ref>)){</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attRefInPayload<sp/>=<sp/>AttRefMsg_C_read(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a02219264d9ee4743f9b8feb5a5ee4380" kindref="member">attRefInMsg</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(attRefInPayload.sigma_RN,<sp/>baseSigma);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(NavAttMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9d88362c0d3a3bce10d8a9607610f473" kindref="member">attNavInMsg</ref>)){</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>attStateInPayload<sp/>=<sp/>NavAttMsg_C_read(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a9d88362c0d3a3bce10d8a9607610f473" kindref="member">attNavInMsg</ref>);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(attStateInPayload.sigma_BN,<sp/>baseSigma);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Create<sp/>a<sp/>state<sp/>vector<sp/>based<sp/>on<sp/>the<sp/>current<sp/>Hill<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ind=0;<sp/>ind&lt;3;<sp/>ind++){</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hillState[ind]<sp/>=<sp/>hillStateInPayload.r_DC_H[ind];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hillState[ind+3]<sp/>=<sp/>hillStateInPayload.v_DC_H[ind];</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;Current<sp/>relative<sp/>state:<sp/>&quot;&lt;&lt;hillState[0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;hillState[1]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;hillState[2]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;hillState[3]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;hillState[4]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;hillState[5]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;Printing<sp/>current<sp/>gain<sp/>matrix:&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;gainMat[0][0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[0][1]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[0][2]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[0][3]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[0][4]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[0][5]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;gainMat[1][0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[1][1]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[1][2]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[1][3]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[1][4]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[1][5]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;gainMat[2][0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[2][1]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[2][2]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[2][3]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[2][4]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;gainMat[2][5]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Apply<sp/>the<sp/>gainMat<sp/>to<sp/>the<sp/>relative<sp/>state<sp/>to<sp/>produce<sp/>a<sp/>chief-relative<sp/>attitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultV(&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1ae95f80b2c4f42db7ef99baeae9bdf1ff" kindref="member">gainMatrix</ref>,<sp/>3,<sp/>6,</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hillState,</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>relativeAtt);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>std::cout&lt;&lt;&quot;Relative<sp/>att<sp/>components:<sp/>&quot;&lt;&lt;relativeAtt[0]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;relativeAtt[1]&lt;&lt;&quot;<sp/>&quot;&lt;&lt;relativeAtt[2]&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/>Convert<sp/>that<sp/>to<sp/>an<sp/>inertial<sp/>attitude<sp/>and<sp/>write<sp/>the<sp/>attRef<sp/>msg</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>attRefOutPayload<sp/>=<sp/>RelativeToInertialMRP(configData,<sp/>relativeAtt,<sp/>baseSigma);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>AttRefMsg_C_write(&amp;attRefOutPayload,<sp/>&amp;configData-&gt;<ref refid="struct_hill_to_att_ref_config_1a0aa223c3f4f56ef554c75a469aba33e5" kindref="member">attRefOutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this-&gt;matrixIndex<sp/>+=<sp/>1;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/formationFlying/hillToAttRef/hillToAttRef.c"/>
  </compounddef>
</doxygen>
