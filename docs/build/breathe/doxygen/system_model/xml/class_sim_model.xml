<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="class_sim_model" kind="class" language="C++" prot="public">
    <compoundname>SimModel</compoundname>
    <includes refid="sim__model_8h" local="no">sim_model.h</includes>
    <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="class_sim_model_1aed9344a56834846e01ab06d1bba4c872" prot="public" static="no" mutable="no">
        <type>BSKLogger</type>
        <definition>BSKLogger SimModel::bskLogger</definition>
        <argsstring></argsstring>
        <name>bskLogger</name>
        <qualifiedname>SimModel::bskLogger</qualifiedname>
        <briefdescription>
<para><ndash/> BSK Logging </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="102" column="15" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="102" bodyend="100"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_sys_process" kindref="compound">SysProcess</ref> * &gt;</type>
        <definition>std::vector&lt;SysProcess *&gt; SimModel::processList</definition>
        <argsstring></argsstring>
        <name>processList</name>
        <qualifiedname>SimModel::processList</qualifiedname>
        <briefdescription>
<para><ndash/> List of processes we&apos;ve created </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="105" column="17" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" prot="public" static="no" mutable="no">
        <type>std::vector&lt; <ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref> * &gt;</type>
        <definition>std::vector&lt;SimThreadExecution*&gt; SimModel::threadList</definition>
        <argsstring></argsstring>
        <name>threadList</name>
        <qualifiedname>SimModel::threadList</qualifiedname>
        <briefdescription>
<para><ndash/> Array of threads that we&apos;re running on </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="106" column="17" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_model_1a95b4d0fa3d0dacf77d77a7f7e8f8d863" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string SimModel::SimulationName</definition>
        <argsstring></argsstring>
        <name>SimulationName</name>
        <qualifiedname>SimModel::SimulationName</qualifiedname>
        <briefdescription>
<para><ndash/> Identifier for Sim </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="107" column="17" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="107" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t SimModel::CurrentNanos</definition>
        <argsstring></argsstring>
        <name>CurrentNanos</name>
        <qualifiedname>SimModel::CurrentNanos</qualifiedname>
        <briefdescription>
<para>[ns] Current sim time </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="108" column="14" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" prot="public" static="no" mutable="no">
        <type>uint64_t</type>
        <definition>uint64_t SimModel::NextTaskTime</definition>
        <argsstring></argsstring>
        <name>NextTaskTime</name>
        <qualifiedname>SimModel::NextTaskTime</qualifiedname>
        <briefdescription>
<para>[ns] time for the next Task </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="109" column="14" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="class_sim_model_1a41140caca6d27ed1ec5ca53d826c3f2e" prot="public" static="no" mutable="no">
        <type>int64_t</type>
        <definition>int64_t SimModel::nextProcPriority</definition>
        <argsstring></argsstring>
        <name>nextProcPriority</name>
        <qualifiedname>SimModel::nextProcPriority</qualifiedname>
        <briefdescription>
<para>[-] Priority level for the next process </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="110" column="13" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="110" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="public-func">
      <memberdef kind="function" id="class_sim_model_1a611b900776f23877a3eab1cde6f1c803" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SimModel::SimModel</definition>
        <argsstring>()</argsstring>
        <name>SimModel</name>
        <qualifiedname>SimModel::SimModel</qualifiedname>
        <briefdescription>
<para>The <ref refid="class_sim_model" kindref="compound">SimModel</ref> constructor. </para>
        </briefdescription>
        <detaileddescription>
<para>This Constructor is used to initialize the top-level sim model. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="86" column="5" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="272" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a510e5563113c7b34235f8ac8f6f17690" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>SimModel::~SimModel</definition>
        <argsstring>()</argsstring>
        <name>~SimModel</name>
        <qualifiedname>SimModel::~SimModel</qualifiedname>
        <briefdescription>
<para><ref refid="class_sim_model" kindref="compound">SimModel</ref> destructorS. </para>
        </briefdescription>
        <detaileddescription>
<para>Nothing to destroy really </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="87" column="5" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="289" bodyend="292"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a4054d6b12154b29ae31fd19e24182ad0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::selfInitSimulation</definition>
        <argsstring>()</argsstring>
        <name>selfInitSimulation</name>
        <qualifiedname>SimModel::selfInitSimulation</qualifiedname>
        <briefdescription>
<para>Method to initialize all added Tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>This method goes through all of the processes in the simulation, all of the tasks within each process, and all of the models within each task and self-inits them. <simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="89" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="357" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a3c9d52f87b3632813601b005eb29ec22" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::resetInitSimulation</definition>
        <argsstring>()</argsstring>
        <name>resetInitSimulation</name>
        <qualifiedname>SimModel::resetInitSimulation</qualifiedname>
        <briefdescription>
<para>Method to reset all added tasks. </para>
        </briefdescription>
        <detaileddescription>
<para>This method goes through all of the processes in the simulation, all of the tasks within each process, and all of the models within each task and resets them. <simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="90" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="378" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a5c3116c212cd092d06a80fcb8623951d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::StepUntilStop</definition>
        <argsstring>(uint64_t SimStopTime, int64_t stopPri)</argsstring>
        <name>StepUntilStop</name>
        <qualifiedname>SimModel::StepUntilStop</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>SimStopTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>stopPri</declname>
        </param>
        <briefdescription>
<para>Step simulation until stop time uint64_t reached. </para>
        </briefdescription>
        <detaileddescription>
<para>This method steps the simulation until the specified stop time and stop priority have been reached. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>SimStopTime</parametername>
</parameternamelist>
<parameterdescription>
<para>Nanoseconds to step the simulation for </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stopPri</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority level below which the sim won&apos;t go </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="91" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="300" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1ae18704e320e709c850574423501be333" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::SingleStepProcesses</definition>
        <argsstring>(int64_t stopPri=-1)</argsstring>
        <name>SingleStepProcesses</name>
        <qualifiedname>SimModel::SingleStepProcesses</qualifiedname>
        <param>
          <type>int64_t</type>
          <declname>stopPri</declname>
          <defval>-1</defval>
        </param>
        <briefdescription>
<para>Step only the next Task in the simulation. </para>
        </briefdescription>
        <detaileddescription>
<para>This method steps all of the processes forward to the current time. It also increments the internal simulation time appropriately as the simulation processes are triggered <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>stopPri</parametername>
</parameternamelist>
<parameterdescription>
<para>The priority level below which the sim won&apos;t go </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>If a message has been added to logger, link the message IDs</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="92" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="402" bodyend="434"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1ab8b9e34277edf0f2126700686c4faedc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::addNewProcess</definition>
        <argsstring>(SysProcess *newProc)</argsstring>
        <name>addNewProcess</name>
        <qualifiedname>SimModel::addNewProcess</qualifiedname>
        <param>
          <type><ref refid="class_sys_process" kindref="compound">SysProcess</ref> *</type>
          <declname>newProc</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method allows the user to attach a process to the simulation for execution. Note that the priority level of the process determines what order it gets called in: higher priorities are called before lower priorities. If priorities are the same, the proc added first goes first. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newProc</parametername>
</parameternamelist>
<parameterdescription>
<para>the new process to be added </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="93" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="338" bodyend="350"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a1d613ac2d851eb3620f2117485e59c6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::addProcessToThread</definition>
        <argsstring>(SysProcess *newProc, uint64_t threadSel)</argsstring>
        <name>addProcessToThread</name>
        <qualifiedname>SimModel::addProcessToThread</qualifiedname>
        <param>
          <type><ref refid="class_sys_process" kindref="compound">SysProcess</ref> *</type>
          <declname>newProc</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>threadSel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method allows the user to specifically place a given process onto a specific thread index based on the currently active thread-pool. This is the mechanism that a user has to specifically spread out processing in a way that makes the best sense to them. Otherwise it happens in the round-robin manner described in the allocate-remaining-processes method. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>newProc</parametername>
</parameternamelist>
<parameterdescription>
<para>The process that needs to get emplaced on the specified thread </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>threadSel</parametername>
</parameternamelist>
<parameterdescription>
<para>The thread index in the thread-pool that the process gets added to </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="94" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="571" bodyend="576"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a882a554253a92500efe21ab01a7e84fb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::ResetSimulation</definition>
        <argsstring>()</argsstring>
        <name>ResetSimulation</name>
        <qualifiedname>SimModel::ResetSimulation</qualifiedname>
        <briefdescription>
<para>Reset simulation back to zero. </para>
        </briefdescription>
        <detaileddescription>
<para>This method is used to reset a simulation to time 0. It sets all process and tasks back to the initial call times. It clears all message logs. However, it does not clear all message buffers and does not reset individual models. <simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Iterate through model list and call the Task model initializer</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="95" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="441" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a1b6d945f5e5da5dd9d4159faae218627" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::clearProcsFromThreads</definition>
        <argsstring>()</argsstring>
        <name>clearProcsFromThreads</name>
        <qualifiedname>SimModel::clearProcsFromThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method removes all of the active processes from the &quot;thread pool&quot; that has been established. It is needed during init and if sims are restarted or threads need to be reallocated. Otherwise it is basically a no-op. <simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Iterate through model list and call the Task model initializer</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="96" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="464" bodyend="478"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1aaceb5cecd0a4d8f10dcfcdff69fe609c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::resetThreads</definition>
        <argsstring>(uint64_t threadCount)</argsstring>
        <name>resetThreads</name>
        <qualifiedname>SimModel::resetThreads</qualifiedname>
        <param>
          <type>uint64_t</type>
          <declname>threadCount</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method provides an easy mechanism for allowing the user to change the number of concurrent threads that will be executing in a given simulation. You tell the method how many threads you want in the system, it clears out any existing thread data, and then allocates fresh threads for the runtime. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>threadCount</parametername>
</parameternamelist>
<parameterdescription>
<para>number of threads </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="97" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="487" bodyend="499"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1a5e4106f716aa07e4421ef9333e44b98f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::deleteThreads</definition>
        <argsstring>()</argsstring>
        <name>deleteThreads</name>
        <qualifiedname>SimModel::deleteThreads</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method walks through all of the child threads that have been created in the system, detaches them from the architecture, and then cleans up any memory that has been allocated to them in the architecture. It just ensures clean shutdown of any existing runtime stuff. <simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="98" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="507" bodyend="520"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1afa896824d31f013c277ec37753468437" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SimModel::assignRemainingProcs</definition>
        <argsstring>()</argsstring>
        <name>assignRemainingProcs</name>
        <qualifiedname>SimModel::assignRemainingProcs</qualifiedname>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method provides a seamless allocation of processes onto active threads for any processes that haven&apos;t already been placed onto a thread. If the user has allocated N threads, this method just walks through those threads and pops all of the processes onto those threads in a round-robin fashion. <simplesect kind="return"><para>void </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="99" column="10" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="528" bodyend="559"/>
      </memberdef>
      <memberdef kind="function" id="class_sim_model_1acbb27390c7a5c579e3a3d22cc0a5287c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t SimModel::getThreadCount</definition>
        <argsstring>()</argsstring>
        <name>getThreadCount</name>
        <qualifiedname>SimModel::getThreadCount</qualifiedname>
        <briefdescription>
<para>returns the number of threads used </para>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="100" column="14" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="100" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
<para>The top-level container for an entire simulation. </para>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" line="83" column="1" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.h" bodystart="84" bodyend="111"/>
    <listofallmembers>
      <member refid="class_sim_model_1ab8b9e34277edf0f2126700686c4faedc" prot="public" virt="non-virtual"><scope>SimModel</scope><name>addNewProcess</name></member>
      <member refid="class_sim_model_1a1d613ac2d851eb3620f2117485e59c6e" prot="public" virt="non-virtual"><scope>SimModel</scope><name>addProcessToThread</name></member>
      <member refid="class_sim_model_1afa896824d31f013c277ec37753468437" prot="public" virt="non-virtual"><scope>SimModel</scope><name>assignRemainingProcs</name></member>
      <member refid="class_sim_model_1aed9344a56834846e01ab06d1bba4c872" prot="public" virt="non-virtual"><scope>SimModel</scope><name>bskLogger</name></member>
      <member refid="class_sim_model_1a1b6d945f5e5da5dd9d4159faae218627" prot="public" virt="non-virtual"><scope>SimModel</scope><name>clearProcsFromThreads</name></member>
      <member refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" prot="public" virt="non-virtual"><scope>SimModel</scope><name>CurrentNanos</name></member>
      <member refid="class_sim_model_1a5e4106f716aa07e4421ef9333e44b98f" prot="public" virt="non-virtual"><scope>SimModel</scope><name>deleteThreads</name></member>
      <member refid="class_sim_model_1acbb27390c7a5c579e3a3d22cc0a5287c" prot="public" virt="non-virtual"><scope>SimModel</scope><name>getThreadCount</name></member>
      <member refid="class_sim_model_1a41140caca6d27ed1ec5ca53d826c3f2e" prot="public" virt="non-virtual"><scope>SimModel</scope><name>nextProcPriority</name></member>
      <member refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" prot="public" virt="non-virtual"><scope>SimModel</scope><name>NextTaskTime</name></member>
      <member refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" prot="public" virt="non-virtual"><scope>SimModel</scope><name>processList</name></member>
      <member refid="class_sim_model_1a3c9d52f87b3632813601b005eb29ec22" prot="public" virt="non-virtual"><scope>SimModel</scope><name>resetInitSimulation</name></member>
      <member refid="class_sim_model_1a882a554253a92500efe21ab01a7e84fb" prot="public" virt="non-virtual"><scope>SimModel</scope><name>ResetSimulation</name></member>
      <member refid="class_sim_model_1aaceb5cecd0a4d8f10dcfcdff69fe609c" prot="public" virt="non-virtual"><scope>SimModel</scope><name>resetThreads</name></member>
      <member refid="class_sim_model_1a4054d6b12154b29ae31fd19e24182ad0" prot="public" virt="non-virtual"><scope>SimModel</scope><name>selfInitSimulation</name></member>
      <member refid="class_sim_model_1a611b900776f23877a3eab1cde6f1c803" prot="public" virt="non-virtual"><scope>SimModel</scope><name>SimModel</name></member>
      <member refid="class_sim_model_1a95b4d0fa3d0dacf77d77a7f7e8f8d863" prot="public" virt="non-virtual"><scope>SimModel</scope><name>SimulationName</name></member>
      <member refid="class_sim_model_1ae18704e320e709c850574423501be333" prot="public" virt="non-virtual"><scope>SimModel</scope><name>SingleStepProcesses</name></member>
      <member refid="class_sim_model_1a5c3116c212cd092d06a80fcb8623951d" prot="public" virt="non-virtual"><scope>SimModel</scope><name>StepUntilStop</name></member>
      <member refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" prot="public" virt="non-virtual"><scope>SimModel</scope><name>threadList</name></member>
      <member refid="class_sim_model_1a510e5563113c7b34235f8ac8f6f17690" prot="public" virt="non-virtual"><scope>SimModel</scope><name>~SimModel</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
