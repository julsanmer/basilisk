<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="sys__process_8cpp" kind="file" language="C++">
    <compoundname>sys_process.cpp</compoundname>
    <includes refid="sys__process_8h" local="yes">sys_process.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="5">
        <label>architecture/system_model/sys_model_task.h</label>
        <link refid="sys__model__task_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/architecture/system_model/sys_process.cpp</label>
        <link refid="sys__process_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys_process.h</label>
        <link refid="sys__process_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="7">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="8">
        <label>cstring</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sys_process.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal">SysProcess<sp/>::<sp/>SysProcess()</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;nextTaskTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;processActive<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;processPriority<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;processOnThread<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;disableProcess();</highlight></codeline>
<codeline lineno="32"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><ref refid="class_sys_process_1aab3f08e283db63370898a7de0b003c2a" kindref="member">SysProcess::SysProcess</ref>(std::string<sp/>messageContainer)</highlight></codeline>
<codeline lineno="39"><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1ab1c7c2dc2a046937a2588632b5488797" kindref="member">processActive</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1ad8559b43f19138974c38064710cc0f15" kindref="member">processName</ref><sp/>=<sp/>messageContainer;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a0b3aa0f5656a2da2a121d7dca25d0541" kindref="member">prevRouteTime</ref><sp/>=<sp/>0xFF;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1aa98db6ac51eb59db12bffc667cbefbdd" kindref="member">processOnThread</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a9ad4d1733f0d5f1eef7ac8533adb67c4" kindref="member">disableProcess</ref>();</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><ref refid="class_sys_process_1a852cb3f1831c1b7a7abda9322f9ee55d" kindref="member">SysProcess::~SysProcess</ref>()</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal">}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1a81a83c16fe51bb6289f510512f8d46e8" kindref="member">SysProcess::selfInitProcess</ref>()</highlight></codeline>
<codeline lineno="60"><highlight class="normal">{</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sys_model_task" kindref="compound">SysModelTask</ref><sp/>*localTask<sp/>=<sp/>it-&gt;TaskPtr;</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localTask-&gt;<ref refid="class_sys_model_task_1af3af746b8278dd8ea67dd7f57dbca47f" kindref="member">SelfInitTaskList</ref>();</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1a0aa7a5effa963db074a43221bb485227" kindref="member">SysProcess::resetProcess</ref>(uint64_t<sp/>currentTime)</highlight></codeline>
<codeline lineno="80"><highlight class="normal">{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sys_model_task" kindref="compound">SysModelTask</ref><sp/>*localTask<sp/>=<sp/>it-&gt;TaskPtr;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localTask-&gt;<ref refid="class_sys_model_task_1aa160641a32a62d0ce776c60dfb1c8710" kindref="member">ResetTaskList</ref>(currentTime);<sp/></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>=<sp/>currentTime;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="90"><highlight class="normal">}</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1ac0b7700ed83f3a8c87584ac4e8aa9a7e" kindref="member">SysProcess::reInitProcess</ref>()</highlight></codeline>
<codeline lineno="98"><highlight class="normal">{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;<sp/>taskPtrs;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>taskIt;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sys_model_task" kindref="compound">SysModelTask</ref><sp/>*localTask<sp/>=<sp/>it-&gt;TaskPtr;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localTask-&gt;<ref refid="class_sys_model_task_1a549079b2bef4718bb870cd694186ea04" kindref="member">ResetTask</ref>();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>taskPtrs<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.clear();</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(taskIt<sp/>=<sp/>taskPtrs.begin();<sp/>taskIt<sp/>!=<sp/>taskPtrs.end();<sp/>taskIt++)</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1aa08b48c5f3ab8b8f99257e164edffe5e" kindref="member">addNewTask</ref>(taskIt-&gt;TaskPtr,<sp/>taskIt-&gt;taskPriority);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="115"><highlight class="normal">}</highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1aefa433273e78326a62d24b6c76d7f1f2" kindref="member">SysProcess::singleStepNextTask</ref>(uint64_t<sp/>currentNanos)</highlight></codeline>
<codeline lineno="122"><highlight class="normal">{</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>fireIt;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin()<sp/>==<sp/>this-&gt;processTasks.end())</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sys_process_1a637eaa18695b0ca1150cee76eb1f759a" kindref="member">bskLogger</ref>.bskLog(BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Received<sp/>a<sp/>step<sp/>command<sp/>on<sp/>sim<sp/>that<sp/>has<sp/>no<sp/>active<sp/>Tasks.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>fireIt=this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it=this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it!=this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;NextTaskStart<sp/>&lt;<sp/>fireIt-&gt;NextTaskStart<sp/>||</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it-&gt;NextTaskStart==fireIt-&gt;NextTaskStart<sp/>&amp;&amp;<sp/>it-&gt;taskPriority<sp/>&gt;<sp/>fireIt-&gt;taskPriority))</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fireIt<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fireIt-&gt;NextTaskStart<sp/>&gt;<sp/>currentNanos)</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>=<sp/>fireIt-&gt;NextTaskStart;</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sys_model_task" kindref="compound">SysModelTask</ref><sp/>*localTask<sp/>=<sp/>fireIt-&gt;TaskPtr;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/>localTask-&gt;<ref refid="class_sys_model_task_1ace0cab1c2d03a7422713aaf17997f762" kindref="member">ExecuteTaskList</ref>(currentNanos);</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>fireIt-&gt;NextTaskStart<sp/>=<sp/>localTask-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref>;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>fireIt=this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it=this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it!=this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;NextTaskStart<sp/>&lt;<sp/>fireIt-&gt;NextTaskStart<sp/>||</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it-&gt;NextTaskStart==fireIt-&gt;NextTaskStart<sp/>&amp;&amp;<sp/>it-&gt;taskPriority<sp/>&gt;<sp/>fireIt-&gt;taskPriority))</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>fireIt<sp/>=<sp/>it;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>=<sp/>fireIt-&gt;NextTaskStart;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1aa08b48c5f3ab8b8f99257e164edffe5e" kindref="member">SysProcess::addNewTask</ref>(<ref refid="class_sys_model_task" kindref="compound">SysModelTask</ref><sp/>*newTask,<sp/>int32_t<sp/>taskPriority)</highlight></codeline>
<codeline lineno="173"><highlight class="normal">{</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_model_schedule_entry" kindref="compound">ModelScheduleEntry</ref><sp/>localEntry;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>localEntry.<ref refid="struct_model_schedule_entry_1ae023e2e9970130a6d9a0191d901d512a" kindref="member">TaskPtr</ref><sp/>=<sp/>newTask;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>localEntry.<ref refid="struct_model_schedule_entry_1acfcd3518a29193f31a679a1a1c63091c" kindref="member">TaskUpdatePeriod</ref><sp/>=<sp/>newTask-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>localEntry.<ref refid="struct_model_schedule_entry_1ad867d56284143855c9957a7f263e1539" kindref="member">NextTaskStart</ref><sp/>=<sp/>newTask-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref>;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>localEntry.<ref refid="struct_model_schedule_entry_1a909c2ed882933dff856e4fcbcc268a8b" kindref="member">taskPriority</ref><sp/>=<sp/>taskPriority;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1aca49b161b978a035499205c7c7f5def2" kindref="member">scheduleTask</ref>(localEntry);</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>newTask-&gt;<ref refid="class_sys_model_task_1af02367a9ed3a577e8ecf9718302807bb" kindref="member">updateParentProc</ref>(<ref refid="class_sys_process_1ad8559b43f19138974c38064710cc0f15" kindref="member">processName</ref>);</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1aea9aa958d5a36bef161dc438d63b3a13" kindref="member">enableProcess</ref>();</highlight></codeline>
<codeline lineno="182"><highlight class="normal">}</highlight></codeline>
<codeline lineno="183"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1aca49b161b978a035499205c7c7f5def2" kindref="member">SysProcess::scheduleTask</ref>(<ref refid="struct_model_schedule_entry" kindref="compound">ModelScheduleEntry</ref><sp/>&amp;<sp/>taskCall)</highlight></codeline>
<codeline lineno="192"><highlight class="normal">{</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(it-&gt;NextTaskStart<sp/>&gt;<sp/>taskCall.<ref refid="struct_model_schedule_entry_1ad867d56284143855c9957a7f263e1539" kindref="member">NextTaskStart</ref><sp/>||</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(it-&gt;NextTaskStart<sp/>==<sp/>taskCall.<ref refid="struct_model_schedule_entry_1ad867d56284143855c9957a7f263e1539" kindref="member">NextTaskStart</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>taskCall.<ref refid="struct_model_schedule_entry_1a909c2ed882933dff856e4fcbcc268a8b" kindref="member">taskPriority</ref><sp/>&gt;<sp/>it-&gt;taskPriority))</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.insert(it,<sp/>taskCall);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.push_back(taskCall);</highlight></codeline>
<codeline lineno="208"><highlight class="normal">}</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1afeb4dcbd373d10a0b91ce2c21fbf4d0d" kindref="member">SysProcess::disableAllTasks</ref>()</highlight></codeline>
<codeline lineno="216"><highlight class="normal">{</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;TaskPtr-&gt;disableTask();</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal">}</highlight></codeline>
<codeline lineno="229"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1a010e9ee28c348dc26e5a6ecfc64efad3" kindref="member">SysProcess::enableAllTasks</ref>()</highlight></codeline>
<codeline lineno="230"><highlight class="normal">{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;TaskPtr-&gt;enableTask();</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal">}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_process_1ae92ff788c25018681ebd3d31bc8e23ba" kindref="member">SysProcess::changeTaskPeriod</ref>(std::string<sp/>taskName,<sp/>uint64_t<sp/>newPeriod)</highlight></codeline>
<codeline lineno="246"><highlight class="normal">{</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelScheduleEntry&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sys_process_1afd0380bd84af65899e85ed7ab8ebb64d" kindref="member">processTasks</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;TaskPtr-&gt;TaskName<sp/>==<sp/>taskName)</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;TaskPtr-&gt;updatePeriod(newPeriod);</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;NextTaskStart<sp/>=<sp/>it-&gt;TaskPtr-&gt;NextStartTime;</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;TaskUpdatePeriod<sp/>=<sp/>it-&gt;TaskPtr-&gt;TaskPeriod;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sys_process_1a637eaa18695b0ca1150cee76eb1f759a" kindref="member">bskLogger</ref>.bskLog(BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;You<sp/>attempted<sp/>to<sp/>change<sp/>the<sp/>period<sp/>of<sp/>task:<sp/>%s<sp/>I<sp/>couldn&apos;t<sp/>find<sp/>that<sp/>in<sp/>process:<sp/>%s&quot;</highlight><highlight class="normal">,<sp/>taskName.c_str(),<sp/>this-&gt;<ref refid="class_sys_process_1ad8559b43f19138974c38064710cc0f15" kindref="member">processName</ref>.c_str());</highlight></codeline>
<codeline lineno="260"><highlight class="normal">}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sys_process.cpp"/>
  </compounddef>
</doxygen>
