<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="sys__model__task_8cpp" kind="file" language="C++">
    <compoundname>sys_model_task.cpp</compoundname>
    <includes refid="sys__model__task_8h" local="yes">sys_model_task.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/architecture/system_model/sys_model_task.cpp</label>
        <link refid="sys__model__task_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sys_model_task.h</label>
        <link refid="sys__model__task_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="6">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="7">
        <label>cstring</label>
      </node>
      <node id="8">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sys_model_task.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"><ref refid="class_sys_model_task_1ab6b4bb186e3859881d7a2163afc7ccfa" kindref="member">SysModelTask::SysModelTask</ref>()</highlight></codeline>
<codeline lineno="26"><highlight class="normal">{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.clear();</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1ac9d9a925e6820c78a1464e5ed1895645" kindref="member">TaskName</ref>.clear();</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref><sp/>=<sp/>1000;</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1ae55049a100a38b886c908d5fc31dad96" kindref="member">NextPickupTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a40e9864dceff9599d53e259321139092" kindref="member">PickupDelay</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a7fe4614471fae04193bf0efe47f159fe" kindref="member">FirstTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1aaf78cbbda16bb3c0544c4f006e3f0ebf" kindref="member">taskActive</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="35"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><ref refid="class_sys_model_task_1ab6b4bb186e3859881d7a2163afc7ccfa" kindref="member">SysModelTask::SysModelTask</ref>(uint64_t<sp/>InputPeriod,<sp/>uint64_t<sp/>InputDelay,</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/>FirstStartTime)</highlight></codeline>
<codeline lineno="44"><highlight class="normal">{</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref><sp/>=<sp/>InputPeriod;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a40e9864dceff9599d53e259321139092" kindref="member">PickupDelay</ref><sp/>=<sp/>InputDelay;</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>=<sp/>FirstStartTime;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1ae55049a100a38b886c908d5fc31dad96" kindref="member">NextPickupTime</ref><sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>+<sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref>;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a7fe4614471fae04193bf0efe47f159fe" kindref="member">FirstTaskTime</ref><sp/>=<sp/>FirstStartTime;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1aaf78cbbda16bb3c0544c4f006e3f0ebf" kindref="member">taskActive</ref><sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="51"><highlight class="normal">}</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal">SysModelTask<sp/>::<sp/>~SysModelTask()</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_model_task_1af3af746b8278dd8ea67dd7f57dbca47f" kindref="member">SysModelTask::SelfInitTaskList</ref>()</highlight></codeline>
<codeline lineno="62"><highlight class="normal">{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelPriorityPair&gt;::iterator<sp/>ModelPair;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>SysModel*<sp/>NonIt;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ModelPair<sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.begin();<sp/>ModelPair<sp/>!=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.end();</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ModelPair++)</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonIt<sp/>=<sp/>(ModelPair-&gt;ModelPtr);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonIt-&gt;SelfInit();</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_model_task_1aa160641a32a62d0ce776c60dfb1c8710" kindref="member">SysModelTask::ResetTaskList</ref>(uint64_t<sp/>CurrentSimTime)</highlight></codeline>
<codeline lineno="83"><highlight class="normal">{</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelPriorityPair&gt;::iterator<sp/>ModelPair;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(ModelPair<sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.begin();<sp/>ModelPair<sp/>!=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.end();</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>ModelPair++)</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*ModelPair).ModelPtr-&gt;Reset(CurrentSimTime);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>=<sp/>CurrentSimTime;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1ae55049a100a38b886c908d5fc31dad96" kindref="member">NextPickupTime</ref><sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>+<sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref>;</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_model_task_1ace0cab1c2d03a7422713aaf17997f762" kindref="member">SysModelTask::ExecuteTaskList</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="100"><highlight class="normal">{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelPriorityPair&gt;::iterator<sp/>ModelPair;</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>SysModel*<sp/>NonIt;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ModelPair<sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.begin();<sp/>(ModelPair<sp/>!=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.end()<sp/>&amp;&amp;<sp/>this-&gt;<ref refid="class_sys_model_task_1aaf78cbbda16bb3c0544c4f006e3f0ebf" kindref="member">taskActive</ref>);</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ModelPair++)</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonIt<sp/>=<sp/>(ModelPair-&gt;ModelPtr);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonIt-&gt;UpdateState(CurrentSimNanos);</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>NonIt-&gt;CallCounts<sp/>+=<sp/>1;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>+=<sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref>;</highlight></codeline>
<codeline lineno="114"><highlight class="normal">}</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_model_task_1ae368f0da40da920f7605b8c531950528" kindref="member">SysModelTask::AddNewObject</ref>(SysModel<sp/>*NewModel,<sp/>int32_t<sp/>Priority)</highlight></codeline>
<codeline lineno="123"><highlight class="normal">{</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ModelPriorityPair&gt;::iterator<sp/>ModelPair;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="struct_model_priority_pair" kindref="compound">ModelPriorityPair</ref><sp/>LocalPair;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalPair.<ref refid="struct_model_priority_pair_1a2d49d3cbfb492af1775ca237d2e82952" kindref="member">CurrentModelPriority</ref><sp/>=<sp/>Priority;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>LocalPair.<ref refid="struct_model_priority_pair_1aac7b2c953dcbd6cee57c06d4a7f6e78c" kindref="member">ModelPtr</ref><sp/>=<sp/>NewModel;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>SystemMessaging::GetInstance()-&gt;addModuleToProcess(NewModel-&gt;moduleID,</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parentProc);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(ModelPair<sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.begin();<sp/>ModelPair<sp/>!=<sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.end();</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ModelPair++)</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(Priority<sp/>&gt;<sp/>ModelPair-&gt;CurrentModelPriority)</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.insert(ModelPair,<sp/>LocalPair);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1a6bdb95635a0172e7214e3f003e2d7eff" kindref="member">TaskModels</ref>.push_back(LocalPair);</highlight></codeline>
<codeline lineno="144"><highlight class="normal">}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sys_model_task_1aeda51159234bb5852abb372b6ab712cd" kindref="member">SysModelTask::updatePeriod</ref>(uint64_t<sp/>newPeriod)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>newStartTime;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>&gt;<sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref>)</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newStartTime<sp/>=<sp/>(this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref>/newPeriod)*newPeriod;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newStartTime<sp/>&lt;=<sp/>(this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>-<sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref>))</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newStartTime<sp/>+=<sp/>newPeriod;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>=<sp/>newStartTime;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1adc492d2c9207dec7e8901bd05a08df4e" kindref="member">NextStartTime</ref><sp/>=<sp/>this-&gt;<ref refid="class_sys_model_task_1a7fe4614471fae04193bf0efe47f159fe" kindref="member">FirstTaskTime</ref>;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sys_model_task_1aa8450710c6c2d2bff540af7ce00ef58f" kindref="member">TaskPeriod</ref><sp/>=<sp/>newPeriod;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="174"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sys_model_task.cpp"/>
  </compounddef>
</doxygen>
