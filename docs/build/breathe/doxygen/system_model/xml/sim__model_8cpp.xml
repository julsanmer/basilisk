<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="sim__model_8cpp" kind="file" language="C++">
    <compoundname>sim_model.cpp</compoundname>
    <includes refid="sim__model_8h" local="yes">sim_model.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp</label>
        <link refid="sim__model_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>sim_model.h</label>
        <link refid="sim__model_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>architecture/system_model/sys_model_task.h</label>
        <link refid="sys__model__task_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="10">
        <label>architecture/system_model/sys_process.h</label>
        <link refid="sys__process_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="13">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="14">
        <label>architecture/utilities/bskSemaphore.h</label>
      </node>
      <node id="8">
        <label>condition_variable</label>
      </node>
      <node id="15">
        <label>cstring</label>
      </node>
      <node id="9">
        <label>iostream</label>
      </node>
      <node id="7">
        <label>mutex</label>
      </node>
      <node id="5">
        <label>set</label>
      </node>
      <node id="4">
        <label>stdint.h</label>
      </node>
      <node id="6">
        <label>thread</label>
      </node>
      <node id="3">
        <label>vector</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="sim__model_8cpp_1a70a60bd69f64fea3c67ecdef33452898" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void activateNewThread</definition>
        <argsstring>(void *threadData)</argsstring>
        <name>activateNewThread</name>
        <param>
          <type>void *</type>
          <declname>threadData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" line="24" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp" bodystart="24" bodyend="56"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;sim_model.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>activateNewThread(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*threadData)</highlight></codeline>
<codeline lineno="25"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref><sp/>*theThread<sp/>=<sp/></highlight><highlight class="keyword">static_cast&lt;</highlight><highlight class="normal"><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref>*</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal"><sp/>(threadData);</highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Starting<sp/>thread<sp/>yes&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a40245432fadd460de18913b6db87bb2e" kindref="member">postInit</ref>();</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(theThread-&gt;<ref refid="class_sim_thread_execution_1a46b365038a59d03e6549e484c3f098f6" kindref="member">threadValid</ref>())</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a7b6b683e14c44451042f528506f0be42" kindref="member">lockThread</ref>();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theThread-&gt;<ref refid="class_sim_thread_execution_1a169db192ab9b7e54076ad2a304ea80e9" kindref="member">selfInitNow</ref>){</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1af1423c1ddab7e191fe9469d1edaef793" kindref="member">selfInitProcesses</ref>();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a169db192ab9b7e54076ad2a304ea80e9" kindref="member">selfInitNow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theThread-&gt;<ref refid="class_sim_thread_execution_1a8dd24f0258370dea1238854129ca6574" kindref="member">crossInitNow</ref>){</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a142dc427f98a58888407bf2b1abc1868" kindref="member">crossInitProcesses</ref>();</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a8dd24f0258370dea1238854129ca6574" kindref="member">crossInitNow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(theThread-&gt;<ref refid="class_sim_thread_execution_1a385c3bf1681dbc863b3b401237d0c6e5" kindref="member">resetNow</ref>){</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a3984b22554c81447b49db7abc2f152e7" kindref="member">resetProcesses</ref>();</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a385c3bf1681dbc863b3b401237d0c6e5" kindref="member">resetNow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1abd78120803f5811d2a166097f0a6fb94" kindref="member">StepUntilStop</ref>();</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Stepping<sp/>thread&quot;&lt;&lt;std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theThread-&gt;<ref refid="class_sim_thread_execution_1a5087446d12c59af56c0dcefc52c58c0e" kindref="member">unlockParent</ref>();</highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//std::cout<sp/>&lt;&lt;<sp/>&quot;Killing<sp/>thread&quot;<sp/>&lt;&lt;<sp/>std::endl;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal">SimThreadExecution::SimThreadExecution(uint64_t<sp/>threadIdent,<sp/>uint64_t<sp/>currentSimNanos)<sp/>:<sp/><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref>(){</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>currentThreadNanos<sp/>=<sp/>currentSimNanos;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>threadID<sp/>=<sp/>threadIdent;</highlight></codeline>
<codeline lineno="62"><highlight class="normal">}</highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"><ref refid="class_sim_thread_execution_1ae0de01a00621e4a5b5ec5e90785ed171" kindref="member">SimThreadExecution::~SimThreadExecution</ref>()<sp/>{</highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal">}</highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal">SimThreadExecution::SimThreadExecution()<sp/>{</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1a1b34399826b6adfe35ba8455c295b693" kindref="member">currentThreadNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>threadRunning<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>terminateThread<sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1a169db192ab9b7e54076ad2a304ea80e9" kindref="member">selfInitNow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1a8dd24f0258370dea1238854129ca6574" kindref="member">crossInitNow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1a385c3bf1681dbc863b3b401237d0c6e5" kindref="member">resetNow</ref><sp/>=<sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1a3a56138fc7e0df51cdf62f9b8aa407fd" kindref="member">threadID</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1aab96b5f499ad6e30a12e8b0af1f4a690" kindref="member">CurrentNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1af9cc6342ad99dd16580b6ae84715d300" kindref="member">stopThreadNanos</ref>=0;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1ab5a87bc91b39ed07eb855b760bca2df1" kindref="member">nextProcPriority</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution_1a6e8642516dc592c80917fc730204327e" kindref="member">threadContext</ref><sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal">}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a7b6b683e14c44451042f528506f0be42" kindref="member">SimThreadExecution::lockThread</ref>()<sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;selfThreadLock.acquire();</highlight></codeline>
<codeline lineno="91"><highlight class="normal">}</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a14670530672acc6509b11d538d2f1e8a" kindref="member">SimThreadExecution::lockParent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;parentThreadLock.acquire();</highlight></codeline>
<codeline lineno="100"><highlight class="normal">}</highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a45a709d8bde76c6be42a807988160418" kindref="member">SimThreadExecution::unlockThread</ref>()<sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;selfThreadLock.release();</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a5087446d12c59af56c0dcefc52c58c0e" kindref="member">SimThreadExecution::unlockParent</ref>()<sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;parentThreadLock.release();</highlight></codeline>
<codeline lineno="119"><highlight class="normal">}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1ae726d77b8faf40c0bb7ec5d85187da7a" kindref="member">SimThreadExecution::SingleStepProcesses</ref>(int64_t<sp/>stopPri)</highlight></codeline>
<codeline lineno="128"><highlight class="normal">{</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>nextCallTime<sp/>=<sp/>~((uint64_t)<sp/>0);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it<sp/>=<sp/>this-&gt;processList.begin();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1aab96b5f499ad6e30a12e8b0af1f4a690" kindref="member">CurrentNanos</ref><sp/>=<sp/>this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(it!=<sp/>this-&gt;processList.end()<sp/>&amp;&amp;<sp/>this-&gt;<ref refid="class_sim_thread_execution_1a46b365038a59d03e6549e484c3f098f6" kindref="member">threadValid</ref>())</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sys_process" kindref="compound">SysProcess</ref><sp/>*localProc<sp/>=<sp/>(*it);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a470863013890fa8ec35ab91ecd64cf58" kindref="member">processEnabled</ref>())</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>&lt;<sp/>this-&gt;CurrentNanos<sp/>||</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(localProc-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>==<sp/>this-&gt;CurrentNanos<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref><sp/>&gt;=<sp/>stopPri))</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localProc-&gt;<ref refid="class_sys_process_1aefa433273e78326a62d24b6c76d7f1f2" kindref="member">singleStepNextTask</ref>(this-&gt;<ref refid="class_sim_thread_execution_1aab96b5f499ad6e30a12e8b0af1f4a690" kindref="member">CurrentNanos</ref>);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a953bb464d3adfec018adfc08d8bf9504" kindref="member">getNextTime</ref>()<sp/>&lt;<sp/>nextCallTime)</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextCallTime<sp/>=<sp/>localProc-&gt;<ref refid="class_sys_process_1a953bb464d3adfec018adfc08d8bf9504" kindref="member">getNextTime</ref>();</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1ab5a87bc91b39ed07eb855b760bca2df1" kindref="member">nextProcPriority</ref><sp/>=<sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref>;</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a953bb464d3adfec018adfc08d8bf9504" kindref="member">getNextTime</ref>()<sp/>==<sp/>nextCallTime<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref><sp/>&gt;<sp/>this-&gt;<ref refid="class_sim_thread_execution_1ab5a87bc91b39ed07eb855b760bca2df1" kindref="member">nextProcPriority</ref>)</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1ab5a87bc91b39ed07eb855b760bca2df1" kindref="member">nextProcPriority</ref><sp/>=<sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref>;</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>=<sp/>nextCallTime<sp/>!=<sp/>~((uint64_t)<sp/>0)<sp/>?<sp/>nextCallTime<sp/>:<sp/>this-&gt;<ref refid="class_sim_thread_execution_1aab96b5f499ad6e30a12e8b0af1f4a690" kindref="member">CurrentNanos</ref>;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal">}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1abd78120803f5811d2a166097f0a6fb94" kindref="member">SimThreadExecution::StepUntilStop</ref>()</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>inPri<sp/>=<sp/><ref refid="class_sim_thread_execution_1af9cc6342ad99dd16580b6ae84715d300" kindref="member">stopThreadNanos</ref><sp/>==<sp/>this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>?<sp/><ref refid="class_sim_thread_execution_1a8f7271e229e8f16d8840231137b1964a" kindref="member">stopThreadPriority</ref><sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(this-&gt;<ref refid="class_sim_thread_execution_1a46b365038a59d03e6549e484c3f098f6" kindref="member">threadValid</ref>()<sp/>&amp;&amp;<sp/>(this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>&lt;<sp/><ref refid="class_sim_thread_execution_1af9cc6342ad99dd16580b6ae84715d300" kindref="member">stopThreadNanos</ref><sp/>||<sp/>(this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>==<sp/><ref refid="class_sim_thread_execution_1af9cc6342ad99dd16580b6ae84715d300" kindref="member">stopThreadNanos</ref><sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1ab5a87bc91b39ed07eb855b760bca2df1" kindref="member">nextProcPriority</ref><sp/>&gt;=<sp/><ref refid="class_sim_thread_execution_1a8f7271e229e8f16d8840231137b1964a" kindref="member">stopThreadPriority</ref>))<sp/>)</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1ae726d77b8faf40c0bb7ec5d85187da7a" kindref="member">SingleStepProcesses</ref>(inPri);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inPri<sp/>=<sp/><ref refid="class_sim_thread_execution_1af9cc6342ad99dd16580b6ae84715d300" kindref="member">stopThreadNanos</ref><sp/>==<sp/>this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>?<sp/><ref refid="class_sim_thread_execution_1a8f7271e229e8f16d8840231137b1964a" kindref="member">stopThreadPriority</ref><sp/>:<sp/>-1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal">}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1adca92b0157f86b0623d6c71c38e9a154" kindref="member">SimThreadExecution::moveProcessMessages</ref>()<sp/>{</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;processList.begin();<sp/>it<sp/>!=<sp/>this-&gt;processList.end();<sp/>it++)</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*it)-&gt;routeInterfaces(this-&gt;CurrentNanos);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal">}</highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1acbb9bbbf0cb9203c1655e3b7aaf6ff17" kindref="member">SimThreadExecution::waitOnInit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lck(this-&gt;initReadyLock);</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(!this-&gt;<ref refid="class_sim_thread_execution_1ab24a2c1581aa1851bd2abbf3ae071129" kindref="member">threadActive</ref>())</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal">)-&gt;initHoldVar.wait(lck);</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="206"><highlight class="normal">}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a40245432fadd460de18913b6db87bb2e" kindref="member">SimThreadExecution::postInit</ref>()<sp/>{</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::unique_lock&lt;std::mutex&gt;<sp/>lck(this-&gt;initReadyLock);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1a24d4fb7186480135066b347ab2a18d19" kindref="member">threadReady</ref>();</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;initHoldVar.notify_one();</highlight></codeline>
<codeline lineno="217"><highlight class="normal">}</highlight></codeline>
<codeline lineno="218"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1af1423c1ddab7e191fe9469d1edaef793" kindref="member">SimThreadExecution::selfInitProcesses</ref>()<sp/>{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it=this-&gt;processList.begin();<sp/>it!=<sp/>this-&gt;processList.end();<sp/>it++)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)-&gt;selfInitProcess();</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="230"><highlight class="normal">}</highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a142dc427f98a58888407bf2b1abc1868" kindref="member">SimThreadExecution::crossInitProcesses</ref>()<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it=this-&gt;processList.begin();<sp/>it!=<sp/>this-&gt;processList.end();<sp/>it++)</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*it)-&gt;crossInitProcess();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="242"><highlight class="normal">}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a3984b22554c81447b49db7abc2f152e7" kindref="member">SimThreadExecution::resetProcesses</ref>()<sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1a1b34399826b6adfe35ba8455c295b693" kindref="member">currentThreadNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1aab96b5f499ad6e30a12e8b0af1f4a690" kindref="member">CurrentNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_thread_execution_1aa2431425f698a55249673e02dcd4c805" kindref="member">NextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it=this-&gt;processList.begin();<sp/>it!=<sp/>this-&gt;processList.end();<sp/>it++)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)-&gt;resetProcess(this-&gt;<ref refid="class_sim_thread_execution_1a1b34399826b6adfe35ba8455c295b693" kindref="member">currentThreadNanos</ref>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution_1a6db496d5d6acf2f1e7b9aacd82fd93de" kindref="member">SimThreadExecution::addNewProcess</ref>(<ref refid="class_sys_process" kindref="compound">SysProcess</ref>*<sp/>newProc)<sp/>{</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>processList.push_back(newProc);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>newProc-&gt;<ref refid="class_sys_process_1a96c798436b6cf71bac56c2f821087878" kindref="member">setProcessControlStatus</ref>(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="268"><highlight class="normal">}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><ref refid="class_sim_model_1a611b900776f23877a3eab1cde6f1c803" kindref="member">SimModel::SimModel</ref>()</highlight></codeline>
<codeline lineno="273"><highlight class="normal">{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.clear();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"></highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//Default<sp/>to<sp/>single-threaded<sp/>runtime</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref><sp/>*newThread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref>(0,<sp/>0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.push_back(newThread);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a41140caca6d27ed1ec5ca53d826c3f2e" kindref="member">nextProcPriority</ref><sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="286"><highlight class="normal">}</highlight></codeline>
<codeline lineno="287"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><ref refid="class_sim_model_1a510e5563113c7b34235f8ac8f6f17690" kindref="member">SimModel::~SimModel</ref>()</highlight></codeline>
<codeline lineno="290"><highlight class="normal">{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a5e4106f716aa07e4421ef9333e44b98f" kindref="member">deleteThreads</ref>();</highlight></codeline>
<codeline lineno="292"><highlight class="normal">}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a5c3116c212cd092d06a80fcb8623951d" kindref="member">SimModel::StepUntilStop</ref>(uint64_t<sp/>SimStopTime,<sp/>int64_t<sp/>stopPri)</highlight></codeline>
<codeline lineno="301"><highlight class="normal">{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>std::flush;</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;moveProcessMessages();</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;stopThreadNanos<sp/>=<sp/>SimStopTime;</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;stopThreadPriority<sp/>=<sp/>stopPri;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*thrIt)-&gt;procCount()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;unlockThread();</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>(uint64_t)<sp/>~0;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>=<sp/>(uint64_t)<sp/>~0;</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*thrIt)-&gt;procCount()<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;lockParent();</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>(*thrIt)-&gt;NextTaskTime<sp/>&lt;<sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>?</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;NextTaskTime<sp/>:<sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>=<sp/>(*thrIt)-&gt;CurrentNanos<sp/>&lt;<sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>?</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;CurrentNanos<sp/>:<sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref>;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="328"><highlight class="normal">}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1ab8b9e34277edf0f2126700686c4faedc" kindref="member">SimModel::addNewProcess</ref>(<ref refid="class_sys_process" kindref="compound">SysProcess</ref><sp/>*newProc)</highlight></codeline>
<codeline lineno="339"><highlight class="normal">{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref><sp/>&gt;<sp/>(*it)-&gt;processPriority)</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.insert(it,<sp/>newProc);</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.push_back(newProc);</highlight></codeline>
<codeline lineno="350"><highlight class="normal">}</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a4054d6b12154b29ae31fd19e24182ad0" kindref="member">SimModel::selfInitSimulation</ref>()</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;selfInitNow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;unlockThread();</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)<sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;lockParent();</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a3c9d52f87b3632813601b005eb29ec22" kindref="member">SimModel::resetInitSimulation</ref>()</highlight></codeline>
<codeline lineno="379"><highlight class="normal">{</highlight></codeline>
<codeline lineno="380"><highlight class="normal"></highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;resetNow<sp/>=<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;unlockThread();</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;lockParent();</highlight></codeline>
<codeline lineno="391"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="393"><highlight class="normal">}</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1ae18704e320e709c850574423501be333" kindref="member">SimModel::SingleStepProcesses</ref>(int64_t<sp/>stopPri)</highlight></codeline>
<codeline lineno="403"><highlight class="normal">{</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>nextCallTime<sp/>=<sp/>~((uint64_t)<sp/>0);</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it<sp/>=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.begin();</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>=<sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref>;</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(it!=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.end())</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sys_process" kindref="compound">SysProcess</ref><sp/>*localProc<sp/>=<sp/>(*it);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a470863013890fa8ec35ab91ecd64cf58" kindref="member">processEnabled</ref>())</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>&lt;<sp/>this-&gt;CurrentNanos<sp/>||</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(localProc-&gt;<ref refid="class_sys_process_1a80256006e4a051a416b57ee0a5c59304" kindref="member">nextTaskTime</ref><sp/>==<sp/>this-&gt;CurrentNanos<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref><sp/>&gt;=<sp/>stopPri))</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localProc-&gt;<ref refid="class_sys_process_1aefa433273e78326a62d24b6c76d7f1f2" kindref="member">singleStepNextTask</ref>(this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref>);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a953bb464d3adfec018adfc08d8bf9504" kindref="member">getNextTime</ref>()<sp/>&lt;<sp/>nextCallTime)</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>nextCallTime<sp/>=<sp/>localProc-&gt;<ref refid="class_sys_process_1a953bb464d3adfec018adfc08d8bf9504" kindref="member">getNextTime</ref>();</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a41140caca6d27ed1ec5ca53d826c3f2e" kindref="member">nextProcPriority</ref><sp/>=<sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref>;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(localProc-&gt;<ref refid="class_sys_process_1a953bb464d3adfec018adfc08d8bf9504" kindref="member">getNextTime</ref>()<sp/>==<sp/>nextCallTime<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref><sp/>&gt;<sp/>this-&gt;<ref refid="class_sim_model_1a41140caca6d27ed1ec5ca53d826c3f2e" kindref="member">nextProcPriority</ref>)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a41140caca6d27ed1ec5ca53d826c3f2e" kindref="member">nextProcPriority</ref><sp/>=<sp/>localProc-&gt;<ref refid="class_sys_process_1a74174ceb262e4e77a76fdec964f6a465" kindref="member">processPriority</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it++;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>nextCallTime<sp/>!=<sp/>~((uint64_t)<sp/>0)<sp/>?<sp/>nextCallTime<sp/>:<sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref>;</highlight></codeline>
<codeline lineno="434"><highlight class="normal">}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a882a554253a92500efe21ab01a7e84fb" kindref="member">SimModel::ResetSimulation</ref>()</highlight></codeline>
<codeline lineno="442"><highlight class="normal">{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)-&gt;reInitProcess();</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a2195fb8d34f3b792973235188696f0ab" kindref="member">NextTaskTime</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a660408e1fa80f3f10511a7c7607f96e8" kindref="member">CurrentNanos</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;NextTaskTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;CurrentNanos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a1b6d945f5e5da5dd9d4159faae218627" kindref="member">SimModel::clearProcsFromThreads</ref>()<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;clearProcessList();</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it<sp/>=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*it)-&gt;setProcessControlStatus(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="477"><highlight class="normal"></highlight></codeline>
<codeline lineno="478"><highlight class="normal">}</highlight></codeline>
<codeline lineno="479"><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1aaceb5cecd0a4d8f10dcfcdff69fe609c" kindref="member">SimModel::resetThreads</ref>(uint64_t<sp/>threadCount)</highlight></codeline>
<codeline lineno="488"><highlight class="normal">{</highlight></codeline>
<codeline lineno="489"><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a1b6d945f5e5da5dd9d4159faae218627" kindref="member">clearProcsFromThreads</ref>();</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1a5e4106f716aa07e4421ef9333e44b98f" kindref="member">deleteThreads</ref>();</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.clear();</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(uint64_t<sp/>i=0;<sp/>i&lt;threadCount;<sp/>i++)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref><sp/>*newThread<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/><ref refid="class_sim_thread_execution" kindref="compound">SimThreadExecution</ref>(0,<sp/>0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.push_back(newThread);</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal">}</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a5e4106f716aa07e4421ef9333e44b98f" kindref="member">SimModel::deleteThreads</ref>()<sp/>{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;killThread();</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;unlockThread();</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*thrIt)-&gt;threadContext<sp/>&amp;&amp;<sp/>(*thrIt)-&gt;threadContext-&gt;joinable())<sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;threadContext-&gt;join();</highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(*thrIt)-&gt;threadContext;</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>(*thrIt);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.clear();</highlight></codeline>
<codeline lineno="520"><highlight class="normal">}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1afa896824d31f013c277ec37753468437" kindref="member">SimModel::assignRemainingProcs</ref>()<sp/>{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SysProcess<sp/>*&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(it=this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.begin(),<sp/>thrIt=<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>it!=<sp/>this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.end();<sp/>it++,<sp/>thrIt++)</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(thrIt<sp/>==<sp/><ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end())</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrIt<sp/>=<sp/><ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((*it)-&gt;getProcessControlStatus())<sp/>{</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrIt--;<sp/></highlight><highlight class="comment">//Didn&apos;t<sp/>get<sp/>a<sp/>thread<sp/>to<sp/>add,<sp/>so<sp/>roll<sp/>back</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;addNewProcess((*it));</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it=this-&gt;<ref refid="class_sim_model_1ad7f062d45c8f806b53988a829b1359c0" kindref="member">processList</ref>.begin();</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;nextProcPriority<sp/>=<sp/>(*it)-&gt;processPriority;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;NextTaskTime<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;CurrentNanos<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//(*thrIt)-&gt;lockThread();</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;threadContext<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>std::thread(activateNewThread,<sp/>(*thrIt));</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(thrIt=this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin();<sp/>thrIt<sp/>!=<sp/>this-&gt;<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.end();<sp/>thrIt++)</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(*thrIt)-&gt;waitOnInit();</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="559"><highlight class="normal">}</highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight></codeline>
<codeline lineno="571"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_sim_model_1a1d613ac2d851eb3620f2117485e59c6e" kindref="member">SimModel::addProcessToThread</ref>(<ref refid="class_sys_process" kindref="compound">SysProcess</ref><sp/>*newProc,<sp/>uint64_t<sp/>threadSel)</highlight></codeline>
<codeline lineno="572"><highlight class="normal">{</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;SimThreadExecution*&gt;::iterator<sp/>thrIt;</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>thrIt=<ref refid="class_sim_model_1af934c33478a2b9f0747957847e9b63d6" kindref="member">threadList</ref>.begin()<sp/>+<sp/>threadSel;</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>(*thrIt)-&gt;addNewProcess(newProc);</highlight></codeline>
<codeline lineno="576"><highlight class="normal">}</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/architecture/system_model/sim_model.cpp"/>
  </compounddef>
</doxygen>
