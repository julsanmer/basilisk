<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="inertial_u_k_f_8c" kind="file" language="C++">
    <compoundname>inertialUKF.c</compoundname>
    <includes local="no">string.h</includes>
    <includes local="no">math.h</includes>
    <includes refid="inertial_u_k_f_8h" local="yes">fswAlgorithms/attDetermination/InertialUKF/inertialUKF.h</includes>
    <includes local="yes">architecture/utilities/ukfUtilities.h</includes>
    <includes local="yes">architecture/utilities/linearAlgebra.h</includes>
    <includes local="yes">architecture/utilities/rigidBodyKinematics.h</includes>
    <includes local="yes">architecture/utilities/macroDefinitions.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c</label>
        <link refid="inertial_u_k_f_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>fswAlgorithms/attDetermination/InertialUKF/inertialUKF.h</label>
        <link refid="inertial_u_k_f_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="16">
        <label>architecture/utilities/linearAlgebra.h</label>
      </node>
      <node id="18">
        <label>architecture/utilities/macroDefinitions.h</label>
      </node>
      <node id="17">
        <label>architecture/utilities/rigidBodyKinematics.h</label>
      </node>
      <node id="12">
        <label>architecture/utilities/signalCondition.h</label>
      </node>
      <node id="15">
        <label>architecture/utilities/ukfUtilities.h</label>
      </node>
      <node id="11">
        <label>cMsgCInterface/AccDataMsg_C.h</label>
      </node>
      <node id="7">
        <label>cMsgCInterface/InertialFilterMsg_C.h</label>
      </node>
      <node id="6">
        <label>cMsgCInterface/NavAttMsg_C.h</label>
      </node>
      <node id="10">
        <label>cMsgCInterface/RWArrayConfigMsg_C.h</label>
      </node>
      <node id="5">
        <label>cMsgCInterface/RWSpeedMsg_C.h</label>
      </node>
      <node id="8">
        <label>cMsgCInterface/STAttMsg_C.h</label>
      </node>
      <node id="9">
        <label>cMsgCInterface/VehicleConfigMsg_C.h</label>
      </node>
      <node id="3">
        <label>math.h</label>
      </node>
      <node id="14">
        <label>stdint.h</label>
      </node>
      <node id="2">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="inertial_u_k_f_8c_1aafd22d4af433ea66e0ebbaea2016311f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SelfInit_inertialUKF</definition>
        <argsstring>(InertialUKFConfig *configData, int64_t moduleId)</argsstring>
        <name>SelfInit_inertialUKF</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method creates the two moduel output messages. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS WLS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleId</parametername>
</parameternamelist>
<parameterdescription>
<para>The module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="33" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="33" bodyend="37"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1a662a3db3e00c5eff577a97aea91e8a7a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Reset_inertialUKF</definition>
        <argsstring>(InertialUKFConfig *configData, uint64_t callTime, int64_t moduleId)</argsstring>
        <name>Reset_inertialUKF</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>callTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleId</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method resets the inertial inertial filter to an initial state and initializes the internal estimation matrices. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock time at which the function was called (nanoseconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleId</parametername>
</parameternamelist>
<parameterdescription>
<para>The module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Read static RW config data message and store it in module variables</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Initialize filter parameters to max values</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Ensure that all internal filter matrices are zeroed</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Set lambda/gamma to standard value for unscented kalman filters</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Set the wM/wC vectors to standard values for unscented kalman filters</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>User a cholesky decomposition to obtain the sBar and sQnoise matrices for use in filter at runtime</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="47" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="47" bodyend="138"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1a8d7a5389d7a61063ea1375c92a155218" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Read_STMessages</definition>
        <argsstring>(InertialUKFConfig *configData)</argsstring>
        <name>Read_STMessages</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method reads in the messages from all available star trackers and orders them with respect to time of measurement <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Read the input parsed CSS sensor data message</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Only mark valid size if message isn&apos;t stale</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If the time tag from the measured data is new compared to previous step, propagate and update the filter</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Ensure that the time-tags we&apos;ve received are put in time order</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="144" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="144" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1afc51cbaf710071b5d473d83bffc5aa16" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Update_inertialUKF</definition>
        <argsstring>(InertialUKFConfig *configData, uint64_t callTime, int64_t moduleID)</argsstring>
        <name>Update_inertialUKF</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>callTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method takes the parsed CSS sensor data and outputs an estimate of the sun vector in the ADCS body frame <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock time at which the function was called (nanoseconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Handle initializing time in filter and discard initial messages</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Set wheel speeds so that acceleration can be safely computed</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Loop through ordered time-tags and select largest valid one</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If any ST message is valid mark initialization complete</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If no ST messages were valid, return from filter and try again next frame</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If the star tracker has provided a new message compared to last time, update the filter to the new measurement</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If current clock time is further ahead than the measured time, then propagate to this current time-step</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If no star tracker measurement was available, propagate the state on the gyro measurements received since the last ST update. Note that the rate estimate is just smoothed gyro data in this case</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Assemble the aggregrate rotation from the gyro buffer</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Propagate the attitude quaternion with the aggregate rotation</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Switch the MRPs if necessary</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Rate estimate in this case is simply the low-pass filtered gyro data. This is likely much noisier than the time-update solution</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>If we are already at callTime just copy the states over without change</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Write the inertial estimate into the copy of the navigation message structure</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Populate the filter states output buffer and write the output message</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="188" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="188" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1a68a475490cd669c915f266b974c8ef8f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inertialStateProp</definition>
        <argsstring>(InertialUKFConfig *configData, double *stateInOut, double dt)</argsstring>
        <name>inertialStateProp</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>stateInOut</declname>
        </param>
        <param>
          <type>double</type>
          <declname>dt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method propagates a inertial state vector forward in time. Note that the calling parameter is updated in place to save on data copies. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with this module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>stateInOut</parametername>
</parameternamelist>
<parameterdescription>
<para>The state that is propagated </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>dt</parametername>
</parameternamelist>
<parameterdescription>
<para>Time step (s) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Convert the state derivative (body rate) to sigmaDot and propagate the attitude MRPs</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Assemble the total torque from the reaction wheels to get the forcing function from any wheels present</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Get the angular acceleration and propagate the state forward (euler prop)</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="334" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="334" bodyend="373"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1afd3b76c493d3604ae35155a52caa6cc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inertialUKFTimeUpdate</definition>
        <argsstring>(InertialUKFConfig *configData, double updateTime)</argsstring>
        <name>inertialUKFTimeUpdate</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>double</type>
          <declname>updateTime</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs the time update for the inertial kalman filter. It propagates the sigma points forward in time and then gets the current covariance and state estimates. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>updateTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The time that we need to fix the filter to (seconds) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Copy over the current state estimate into the 0th Sigma point and propagate by dt</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Scale that Sigma point by the appopriate scaling factor (Wm[0])</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Get the transpose of the sBar matrix because it is easier to extract Rows vs columns</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>For each Sigma point, apply sBar-based error, propagate forward, and scale by Wm just like 0th. Note that we perform +/- sigma points simultaneously in loop to save loop values.</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Adding covariance columns from sigma points</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Subtracting covariance columns from sigma points</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Zero the AT matrix prior to assembly</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Assemble the AT matrix. Note that this matrix is the internals of the qr decomposition call in the source design documentation. It is the inside of equation 20 in that document</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Scale sQNoise matrix depending on the dt</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Pop the sQNoise matrix on to the end of AT prior to getting QR decomposition</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>QR decomposition (only R computed!) of the AT matrix provides the new sBar matrix</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Shift the sBar matrix over by the xBar vector using the appropriate weight like in equation 21 in design document.</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Save current sBar matrix, covariance, and state estimate off for further use</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="382" column="5" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="382" bodyend="496"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1acf66f59d189357f2937fb99b413a949f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inertialUKFMeasModel</definition>
        <argsstring>(InertialUKFConfig *configData, int currentST)</argsstring>
        <name>inertialUKFMeasModel</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>currentST</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method computes what the expected measurement vector is for each CSS that is present on the spacecraft. All data is transacted from the main data structure for the model because there are many variables that would have to be updated otherwise. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentST</parametername>
</parameternamelist>
<parameterdescription>
<para>current star tracker state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>This math seems more difficult than it should be, but there is a method. The input MRP may or may not be in the same &quot;shadow&quot; set as the state estimate. So, if they are different in terms of light/shadow, you have to get them to the same representation otherwise your residuals will show 360 degree errors. Which is not ideal. So that&apos;s why it is so blessed complicated. <linebreak/>
 The measurement is shadowed into the same representation as the state.</para>
<para><itemizedlist>
<listitem><para>The measurement model is the same as the states since the star tracker measures the inertial attitude directly.</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="507" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="507" bodyend="542"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1aebe0f61b4906081c21182e7db3552c6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inertialUKFAggGyrData</definition>
        <argsstring>(InertialUKFConfig *configData, double prevTime, double propTime, AccDataMsgPayload *gyrData)</argsstring>
        <name>inertialUKFAggGyrData</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>double</type>
          <declname>prevTime</declname>
        </param>
        <param>
          <type>double</type>
          <declname>propTime</declname>
        </param>
        <param>
          <type>AccDataMsgPayload *</type>
          <declname>gyrData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method aggregates the input gyro data into a combined total quaternion rotation to push the state forward by. This information is stored in the main data structure for use in the propagation routines. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>prevTime</parametername>
</parameternamelist>
<parameterdescription>
<para>[s] Previous time step </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>propTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The time that we need to fix the filter to (seconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>gyrData</parametername>
</parameternamelist>
<parameterdescription>
<para>The gyro measurements that we are going to accumulate forward into time </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para>Note that the math here is tortured to avoid the issues of adding PRVs together. That is numerically problematic, so we convert to euler parameters (quaternions) and add those</para>
<para><itemizedlist>
<listitem><para>Loop through the entire gyro buffer to find the first index that is in the future compared to prevTime</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Initialize the propagated euler parameters and time</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Loop through buffer for all valid measurements to assemble the composite rotation since the previous time</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Treat rates scaled by dt as a PRV (small angle approximation)</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Convert the PRV to euler parameters and add that delta-rotation to the running sum (ep_BpropB0)</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Prepare for the next measurement and set time-tags for termination</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Apply low-pass filter to gyro measurements to get smoothed body rate</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Saved the measurement count and convert the euler parameters to MRP as that is our filter representation</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="553" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="553" bodyend="618"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1a0884f2d6624e68174d2ede95ab66b0a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int inertialUKFMeasUpdate</definition>
        <argsstring>(InertialUKFConfig *configData, int currentST)</argsstring>
        <name>inertialUKFMeasUpdate</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>int</type>
          <declname>currentST</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs the measurement update for the inertial kalman filter. It applies the observations in the obs vectors to the current state estimate and updates the state/covariance with that information. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>currentST</parametername>
</parameternamelist>
<parameterdescription>
<para>Current star tracker state </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Compute the valid observations and the measurement model for all observations</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Compute the value for the yBar parameter (note that this is equation 23 in the time update section of the reference document</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Populate the matrix that we perform the QR decomposition on in the measurement update section of the code. This is based on the differenence between the yBar parameter and the calculated measurement models. Equation 24 in driving doc.</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>This is the square-root of the Rk matrix which we treat as the Cholesky decomposition of the observation variance matrix constructed for our number of observations</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Perform QR decomposition (only R again) of the above matrix to obtain the current Sy matrix</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Shift the matrix over by the difference between the 0th SP-based measurement model and the yBar matrix (cholesky down-date again)</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Shifted matrix represents the Sy matrix</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Construct the Pxy matrix (equation 26) which multiplies the Sigma-point cloud by the measurement model cloud (weighted) to get the total Pxy matrix</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Then we need to invert the SyT*Sy matrix to get the Kalman gain factor. Since The Sy matrix is lower triangular, we can do a back-sub inversion instead of a full matrix inversion. That is the ukfUInv and ukfLInv calls below. Once that multiplication is done (equation 27), we have the Kalman Gain.</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Difference the yBar and the observations to get the observed error and multiply by the Kalman Gain to get the state update. Add the state update to the state to get the updated state value (equation 27).</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Compute the updated matrix U from equation 28. Note that I then transpose it so that I can extract &quot;columns&quot; from adjacent memory</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>For each column in the update matrix, perform a cholesky down-date on it to get the total shifted S matrix (called sBar in internal parameters</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Compute equivalent covariance based on updated sBar matrix</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="627" column="5" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="627" bodyend="759"/>
      </memberdef>
      <memberdef kind="function" id="inertial_u_k_f_8c_1aa5fd91033bf0897aa0aa98163bbdf5f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void inertialUKFCleanUpdate</definition>
        <argsstring>(InertialUKFConfig *configData)</argsstring>
        <name>inertialUKFCleanUpdate</name>
        <param>
          <type><ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method cleans the filter states after a bad upadate on the fly. It removes the potentially corrupted previous estimates and puts the filter back to a working state. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the CSS estimator </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Reset the observations, state, and covariannces to a previous safe value</para>
</listitem></itemizedlist>
</para>
<para><itemizedlist>
<listitem><para>Reset the wM/wC vectors to standard values for unscented kalman filters</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" line="767" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c" bodystart="767" bodyend="788"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;fswAlgorithms/attDetermination/InertialUKF/inertialUKF.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/ukfUtilities.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/rigidBodyKinematics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/macroDefinitions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SelfInit_inertialUKF(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/>int64_t<sp/>moduleId)</highlight></codeline>
<codeline lineno="34"><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>NavAttMsg_C_init(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9a76bb9fdfafc5e6eb44cec96f2d9afa" kindref="member">navStateOutMsg</ref>);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>InertialFilterMsg_C_init(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a93f1eebee7866914c605a3e7ed88b711" kindref="member">filtDataOutMsg</ref>);</highlight></codeline>
<codeline lineno="37"><highlight class="normal">}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset_inertialUKF(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/>uint64_t<sp/>callTime,</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>int64_t<sp/>moduleId)</highlight></codeline>
<codeline lineno="49"><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>badUpdate=0;<sp/></highlight><highlight class="comment">/*<sp/>Negative<sp/>badUpdate<sp/>is<sp/>faulty,<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tempMatrix[AKF_N_STATES*AKF_N_STATES];</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>required<sp/>input<sp/>messages<sp/>are<sp/>included</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RWArrayConfigMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae1c8e907dfd069f2c13c3c9d91e27029" kindref="member">rwParamsInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2f4f5f70c3232355e5c418f54d6239e" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>inertialUKF.rwParamsInMsg<sp/>wasn&apos;t<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VehicleConfigMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae5efa0f6ec6f67fc2f0ff7fbafce1de3" kindref="member">massPropsInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2f4f5f70c3232355e5c418f54d6239e" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>inertialUKF.massPropsInMsg<sp/>wasn&apos;t<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!RWSpeedMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3971811eabbe302e65f9574dd70cf59d" kindref="member">rwSpeedsInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2f4f5f70c3232355e5c418f54d6239e" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>inertialUKF.rwSpeedsInMsg<sp/>wasn&apos;t<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!AccDataMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2a0b51aee3594a02b48a96d4ca7db79" kindref="member">gyrBuffInMsgName</ref>))<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2f4f5f70c3232355e5c418f54d6239e" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;Error:<sp/>inertialUKF.gyrBuffInMsgName<sp/>wasn&apos;t<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a12c5577f664d31d656d3865d4c353a65" kindref="member">rwConfigParams</ref><sp/>=<sp/>RWArrayConfigMsg_C_read(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae1c8e907dfd069f2c13c3c9d91e27029" kindref="member">rwParamsInMsg</ref>);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a82ddf2b96ca50d5e504f61bca39496c4" kindref="member">localConfigData</ref><sp/>=<sp/>VehicleConfigMsg_C_read(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae5efa0f6ec6f67fc2f0ff7fbafce1de3" kindref="member">massPropsInMsg</ref>);</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref><sp/>=<sp/>callTime*NANO2SEC;</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>=<sp/>AKF_N_STATES;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>=<sp/>AKF_N_STATES;</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6c724eee9a77d271aa86d43c9ae83c1c" kindref="member">firstPassComplete</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af43216985e94e289aba5f27f27657de5" kindref="member">speedDt</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa8c5cece73dacbda03d9dff56268d3cb" kindref="member">timeWheelPrev</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>vSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac036a9ca4753eade7d1901c2877dcd20" kindref="member">obs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>vSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>*<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>vSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>*<sp/>2<sp/>+<sp/>1);</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>*<sp/>2<sp/>+<sp/>1,</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac6bdafafc9c64c1c23ed0a0549f5ba0b" kindref="member">sQnoise</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref><sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3d8f16b7eaa499f7b2473bceaf9edf13" kindref="member">alpha</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3d8f16b7eaa499f7b2473bceaf9edf13" kindref="member">alpha</ref>*</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae59100118174ee1b618986d1ed0ca129" kindref="member">kappa</ref>)<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a31de60f6379d350edac110840817859c" kindref="member">gamma</ref><sp/>=<sp/>sqrt(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[0]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref><sp/>/<sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>);</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[0]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref><sp/>/<sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>)<sp/>+<sp/>(1<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3d8f16b7eaa499f7b2473bceaf9edf13" kindref="member">alpha</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3d8f16b7eaa499f7b2473bceaf9edf13" kindref="member">alpha</ref><sp/>+<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9c3e83aa68961a4a7877e56b427236d7" kindref="member">beta</ref>);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>*<sp/>2<sp/>+<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[i]<sp/>=<sp/>1.0<sp/>/<sp/>2.0*1.0<sp/>/<sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[i];</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>vCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a8600966a7e24561acd9a34ed28620256" kindref="member">stateInit</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a43161a6cdb8e5b755388ee37323d452c" kindref="member">covarInit</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>);</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a43161a6cdb8e5b755388ee37323d452c" kindref="member">covarInit</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>);</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(tempMatrix,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfCholDecomp(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>tempMatrix);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfCholDecomp(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af44579b7f799e24a275dace0dfb2ce7d" kindref="member">qNoise</ref>,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac6bdafafc9c64c1c23ed0a0549f5ba0b" kindref="member">sQnoise</ref>);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(tempMatrix,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac6bdafafc9c64c1c23ed0a0549f5ba0b" kindref="member">sQnoise</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac6bdafafc9c64c1c23ed0a0549f5ba0b" kindref="member">sQnoise</ref>);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af0934aab4bf22800773c4243af0c5590" kindref="member">sigma_BNOut</ref>);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>[3]),<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a324a1e24e8f9c710c4588232114c18e8" kindref="member">omega_BN_BOut</ref>);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a15ecbaa321de3597484fef890769e563" kindref="member">timeTagOut</ref><sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref>;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>Read_STMessages(configData);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(badUpdate<sp/>&lt;0){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2f4f5f70c3232355e5c418f54d6239e" kindref="member">bskLogger</ref>,<sp/>BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Reset<sp/>method<sp/>contained<sp/>bad<sp/>update&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="138"><highlight class="normal">}</highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Read_STMessages(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData)</highlight></codeline>
<codeline lineno="145"><highlight class="normal">{</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>timeOfMsgWritten;<sp/></highlight><highlight class="comment">/*<sp/>[ns]<sp/>Read<sp/>time<sp/>when<sp/>the<sp/>message<sp/>was<sp/>written*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isWritten;<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>has<sp/>the<sp/>message<sp/>been<sp/>written<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bufferSTIndice;<sp/></highlight><highlight class="comment">/*<sp/>Local<sp/>ST<sp/>message<sp/>to<sp/>copy<sp/>and<sp/>organize<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a9956f94cf93f05a15870ab0246f98f9b" kindref="member">numST</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[i]<sp/>=<sp/>STAttMsg_C_read(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a8544ef2b379901fe6419c30b58535460" kindref="member">STMessages</ref>[i].<ref refid="struct_s_t_message_1a39c838b0d87e0401d021670c6e25a107" kindref="member">stInMsg</ref>);</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>timeOfMsgWritten<sp/>=<sp/>STAttMsg_C_timeWritten(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a8544ef2b379901fe6419c30b58535460" kindref="member">STMessages</ref>[i].<ref refid="struct_s_t_message_1a39c838b0d87e0401d021670c6e25a107" kindref="member">stInMsg</ref>);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>isWritten<sp/>=<sp/>STAttMsg_C_isWritten(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a8544ef2b379901fe6419c30b58535460" kindref="member">STMessages</ref>[i].<ref refid="struct_s_t_message_1a39c838b0d87e0401d021670c6e25a107" kindref="member">stInMsg</ref>);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae5ef067995ff2eeb47728203f4d12239" kindref="member">isFreshST</ref>[i]<sp/>=<sp/>timeOfMsgWritten<sp/>!=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a43f3ae4413cb6c26de1d3bd0d4a715f8" kindref="member">ClockTimeST</ref>[i]<sp/>?<sp/>isWritten<sp/>:<sp/>0;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a43f3ae4413cb6c26de1d3bd0d4a715f8" kindref="member">ClockTimeST</ref>[i]<sp/>=<sp/>timeOfMsgWritten;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]<sp/>=<sp/>i;</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(j=i;<sp/>j&gt;0;<sp/>j--)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[j]].timeTag<sp/>&lt;</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[j-1]].timeTag<sp/>)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bufferSTIndice<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[j];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[j]<sp/>=<sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[j-1];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[j-1]<sp/>=<sp/>bufferSTIndice;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="188"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Update_inertialUKF(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/>uint64_t<sp/>callTime,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>int64_t<sp/>moduleID)</highlight></codeline>
<codeline lineno="190"><highlight class="normal">{</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>newTimeTag;<sp/><sp/></highlight><highlight class="comment">/*<sp/>[s]<sp/>Local<sp/>Time-tag<sp/>variable*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>timeOfRWSpeeds;<sp/></highlight><highlight class="comment">/*<sp/>[ns]<sp/>Read<sp/>time<sp/>for<sp/>the<sp/>RWs*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>trackerValid;<sp/></highlight><highlight class="comment">/*<sp/>[-]<sp/>Indicates<sp/>whether<sp/>the<sp/>star<sp/>tracker<sp/>was<sp/>valid*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigma_BNSum[3];<sp/></highlight><highlight class="comment">/*<sp/>[-]<sp/>Local<sp/>MRP<sp/>for<sp/>propagated<sp/>state*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/>InertialFilterMsgPayload<sp/>inertialDataOutBuffer;<sp/></highlight><highlight class="comment">/*<sp/>[-]<sp/>Output<sp/>filter<sp/>info*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>AccDataMsgPayload<sp/>gyrBuffer;<sp/></highlight><highlight class="comment">/*<sp/>[-]<sp/>Buffer<sp/>of<sp/>IMU<sp/>messages<sp/>for<sp/>gyro<sp/>prop*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>NavAttMsgPayload<sp/>outputInertial;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>update<sp/>check<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v3Norm(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>)<sp/>&gt;<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a23729f0f992039a315e96551eccc0361" kindref="member">switchMag</ref>)<sp/></highlight><highlight class="comment">//Little<sp/>extra<sp/>margin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MRPswitch(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a23729f0f992039a315e96551eccc0361" kindref="member">switchMag</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>output<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>outputInertial<sp/>=<sp/>NavAttMsg_C_zeroMsgPayload();</highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>read<sp/>input<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a82ddf2b96ca50d5e504f61bca39496c4" kindref="member">localConfigData</ref><sp/>=<sp/>VehicleConfigMsg_C_read(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae5efa0f6ec6f67fc2f0ff7fbafce1de3" kindref="member">massPropsInMsg</ref>);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>gyrBuffer<sp/>=<sp/>AccDataMsg_C_read(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2a0b51aee3594a02b48a96d4ca7db79" kindref="member">gyrBuffInMsgName</ref>);</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6b64e3ea15d2de523055d12010bbee8e" kindref="member">rwSpeeds</ref><sp/>=<sp/>RWSpeedMsg_C_read(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3971811eabbe302e65f9574dd70cf59d" kindref="member">rwSpeedsInMsg</ref>);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/>timeOfRWSpeeds<sp/>=<sp/>RWSpeedMsg_C_timeWritten(&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3971811eabbe302e65f9574dd70cf59d" kindref="member">rwSpeedsInMsg</ref>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>Read_STMessages(configData);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/>m33Inverse(RECAST3X3<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a82ddf2b96ca50d5e504f61bca39496c4" kindref="member">localConfigData</ref>.ISCPntB_B,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3a0c90fdd8f70a7d5600bfaaaa134cc0" kindref="member">IInv</ref>);</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6c724eee9a77d271aa86d43c9ae83c1c" kindref="member">firstPassComplete</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1abf859050eb71713bbbb2f6de758e44a9" kindref="member">rwSpeedPrev</ref><sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6b64e3ea15d2de523055d12010bbee8e" kindref="member">rwSpeeds</ref>;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa8c5cece73dacbda03d9dff56268d3cb" kindref="member">timeWheelPrev</ref><sp/>=<sp/>timeOfRWSpeeds;</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTimeTag<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a9956f94cf93f05a15870ab0246f98f9b" kindref="member">numST</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae5ef067995ff2eeb47728203f4d12239" kindref="member">isFreshST</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]]<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]].timeTag*NANO2SEC<sp/>&gt;<sp/>newTimeTag)</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTimeTag<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]].timeTag*NANO2SEC;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6c724eee9a77d271aa86d43c9ae83c1c" kindref="member">firstPassComplete</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6c724eee9a77d271aa86d43c9ae83c1c" kindref="member">firstPassComplete</ref><sp/>==<sp/>0)</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref><sp/>=<sp/>newTimeTag;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="243"><highlight class="normal"></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af43216985e94e289aba5f27f27657de5" kindref="member">speedDt</ref><sp/>=<sp/>(timeOfRWSpeeds<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa8c5cece73dacbda03d9dff56268d3cb" kindref="member">timeWheelPrev</ref>)*NANO2SEC;</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa8c5cece73dacbda03d9dff56268d3cb" kindref="member">timeWheelPrev</ref><sp/>=<sp/>timeOfRWSpeeds;</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>inertialDataOutBuffer.numObs<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>trackerValid<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a9956f94cf93f05a15870ab0246f98f9b" kindref="member">numST</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTimeTag<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]].timeTag<sp/>*<sp/>NANO2SEC;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>isFresh<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae5ef067995ff2eeb47728203f4d12239" kindref="member">isFreshST</ref>[configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]];</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(newTimeTag<sp/>&gt;=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref><sp/>&amp;&amp;<sp/>isFresh)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trackerValid<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((newTimeTag<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref>)<sp/>&gt;<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a263eee9d8bc87bacfb43f9981f8fe77c" kindref="member">maxTimeJump</ref></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a263eee9d8bc87bacfb43f9981f8fe77c" kindref="member">maxTimeJump</ref><sp/>&gt;<sp/>0)</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref><sp/>=<sp/>newTimeTag<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a263eee9d8bc87bacfb43f9981f8fe77c" kindref="member">maxTimeJump</ref>;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae2f4f5f70c3232355e5c418f54d6239e" kindref="member">bskLogger</ref>,<sp/>BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Large<sp/>jump<sp/>in<sp/>state<sp/>time<sp/>that<sp/>was<sp/>set<sp/>to<sp/>max.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trackerValid<sp/>+=<sp/>inertialUKFTimeUpdate(configData,<sp/>newTimeTag);</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>trackerValid<sp/>+=<sp/>inertialUKFMeasUpdate(configData,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ad073cad5f20265705a5e6aca242c80a6" kindref="member">stSensorOrder</ref>[i]);</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialDataOutBuffer.numObs<sp/>+=<sp/>trackerValid;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>newTimeTag<sp/>=<sp/>callTime*NANO2SEC;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(trackerValid<sp/>&lt;<sp/>1)</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialUKFAggGyrData(configData,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a15ecbaa321de3597484fef890769e563" kindref="member">timeTagOut</ref>,</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>newTimeTag,<sp/>&amp;gyrBuffer);</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addMRP(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af0934aab4bf22800773c4243af0c5590" kindref="member">sigma_BNOut</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a5fb80f308c8ed1d66f1d55961ec71474" kindref="member">aggSigma_b2b1</ref>,</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_BNSum);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v3Norm(sigma_BNSum)<sp/>&gt;<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a23729f0f992039a315e96551eccc0361" kindref="member">switchMag</ref>)<sp/></highlight><highlight class="comment">//Little<sp/>extra<sp/>margin</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MRPswitch(sigma_BNSum,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a23729f0f992039a315e96551eccc0361" kindref="member">switchMag</ref>,<sp/>sigma_BNSum);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(sigma_BNSum,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af0934aab4bf22800773c4243af0c5590" kindref="member">sigma_BNOut</ref>);</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;3;<sp/>i++)</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a324a1e24e8f9c710c4588232114c18e8" kindref="member">omega_BN_BOut</ref>[i]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ade7393e1081f937bcb02c525cec04c7e" kindref="member">gyroFilt</ref>[i].currentState;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a15ecbaa321de3597484fef890769e563" kindref="member">timeTagOut</ref><sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a08b5d74c8bd325adeab7b0201f65601b" kindref="member">gyrAggTimeTag</ref>;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af0934aab4bf22800773c4243af0c5590" kindref="member">sigma_BNOut</ref>);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>[3]),<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a324a1e24e8f9c710c4588232114c18e8" kindref="member">omega_BN_BOut</ref>);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a15ecbaa321de3597484fef890769e563" kindref="member">timeTagOut</ref><sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref>;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af0934aab4bf22800773c4243af0c5590" kindref="member">sigma_BNOut</ref>,<sp/>outputInertial.sigma_BN);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a324a1e24e8f9c710c4588232114c18e8" kindref="member">omega_BN_BOut</ref>,<sp/>outputInertial.omega_BN_B);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>outputInertial.timeTag<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a15ecbaa321de3597484fef890769e563" kindref="member">timeTagOut</ref>;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/>NavAttMsg_C_write(&amp;outputInertial,<sp/>&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9a76bb9fdfafc5e6eb44cec96f2d9afa" kindref="member">navStateOutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/>inertialDataOutBuffer.timeTag<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref>;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(inertialDataOutBuffer.covar,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>,</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>AKF_N_STATES*AKF_N_STATES*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>memmove(inertialDataOutBuffer.state,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>AKF_N_STATES*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/>InertialFilterMsg_C_write(&amp;inertialDataOutBuffer,<sp/>&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a93f1eebee7866914c605a3e7ed88b711" kindref="member">filtDataOutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1abf859050eb71713bbbb2f6de758e44a9" kindref="member">rwSpeedPrev</ref><sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6b64e3ea15d2de523055d12010bbee8e" kindref="member">rwSpeeds</ref>;</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="325"><highlight class="normal">}</highlight></codeline>
<codeline lineno="326"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inertialStateProp(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*stateInOut,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt)</highlight></codeline>
<codeline lineno="335"><highlight class="normal">{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sigmaDot[3];</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>BMatrix[3][3];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>torqueTotal[3];</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>wheelAccel;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>torqueSingle[3];</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angAccelTotal[3];</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>BmatMRP(stateInOut,<sp/>BMatrix);</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>m33Scale(0.25,<sp/>BMatrix,<sp/>BMatrix);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(BMatrix,<sp/>&amp;(stateInOut[3]),<sp/>sigmaDot);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(dt,<sp/>sigmaDot,<sp/>sigmaDot);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(stateInOut,<sp/>sigmaDot,<sp/>stateInOut);</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>v3SetZero(torqueTotal);</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a12c5577f664d31d656d3865d4c353a65" kindref="member">rwConfigParams</ref>.numRW;<sp/>i++)</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af43216985e94e289aba5f27f27657de5" kindref="member">speedDt</ref><sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">continue</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wheelAccel<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6b64e3ea15d2de523055d12010bbee8e" kindref="member">rwSpeeds</ref>.wheelSpeeds[i]-</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1abf859050eb71713bbbb2f6de758e44a9" kindref="member">rwSpeedPrev</ref>.wheelSpeeds[i];</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wheelAccel<sp/>/=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af43216985e94e289aba5f27f27657de5" kindref="member">speedDt</ref>/configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a12c5577f664d31d656d3865d4c353a65" kindref="member">rwConfigParams</ref>.JsList[i];</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(wheelAccel,<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a12c5577f664d31d656d3865d4c353a65" kindref="member">rwConfigParams</ref>.GsMatrix_B[i*3]),<sp/>torqueSingle);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Subtract(torqueTotal,<sp/>torqueSingle,<sp/>torqueTotal);</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3a0c90fdd8f70a7d5600bfaaaa134cc0" kindref="member">IInv</ref>,<sp/>torqueTotal,<sp/>angAccelTotal);</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(dt,<sp/>angAccelTotal,<sp/>angAccelTotal);</highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(&amp;(stateInOut[3]),<sp/>angAccelTotal,<sp/>&amp;(stateInOut[3]));</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="373"><highlight class="normal">}</highlight></codeline>
<codeline lineno="374"><highlight class="normal"></highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inertialUKFTimeUpdate(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>updateTime)</highlight></codeline>
<codeline lineno="383"><highlight class="normal">{</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>Index,<sp/>k;</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sBarT[AKF_N_STATES*AKF_N_STATES];</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xComp[AKF_N_STATES],<sp/>AT[(2<sp/>*<sp/>AKF_N_STATES<sp/>+<sp/>AKF_N_STATES)*AKF_N_STATES];</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aRow[AKF_N_STATES],<sp/>rAT[AKF_N_STATES*AKF_N_STATES],<sp/>xErr[AKF_N_STATES];<sp/></highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sBarUp[AKF_N_STATES*AKF_N_STATES];</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*spPtr;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>procNoise[AKF_N_STATES*AKF_N_STATES];</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>badUpdate=0;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref><sp/>=<sp/>updateTime<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref>;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/>vCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae42ddbe7d1a93ce0555e222230906b60" kindref="member">statePrev</ref>);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9420efe1d5f9a2bda670d96040faa8dc" kindref="member">sBarPrev</ref>);</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a802ea0a6f398017f0c319f2ed7eb74c8" kindref="member">covarPrev</ref>);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(rAT,<sp/>AKF_N_STATES,<sp/>AKF_N_STATES);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac6bdafafc9c64c1c23ed0a0549f5ba0b" kindref="member">sQnoise</ref>,<sp/>AKF_N_STATES,<sp/>AKF_N_STATES,<sp/>procNoise);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>vCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[0<sp/>*<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+<sp/>0]));</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>inertialStateProp(configData,<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[0]),</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref>);</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>vScale(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[0],<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[0]),</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>);</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sBarT);</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>(int)<sp/>i<sp/>+<sp/>1;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spPtr<sp/>=<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[Index*<sp/>(int)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>]);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCopy(&amp;sBarT[i*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>],<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>spPtr);</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a31de60f6379d350edac110840817859c" kindref="member">gamma</ref>,<sp/>spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>spPtr);</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>spPtr);</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialStateProp(configData,<sp/>spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref>);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[Index],<sp/>spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>xComp);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(xComp,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Index<sp/>=<sp/>(int)<sp/>i<sp/>+<sp/>1<sp/>+<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>spPtr<sp/>=<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[Index*<sp/>(int)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>]);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCopy(&amp;sBarT[i*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>],<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>spPtr);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(-configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a31de60f6379d350edac110840817859c" kindref="member">gamma</ref>,<sp/>spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>spPtr);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>spPtr);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialStateProp(configData,<sp/>spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref>);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[Index],<sp/>spPtr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>xComp);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(xComp,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(AT,<sp/>(2<sp/>*<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>+<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>),</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>);</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>0;<sp/>i&lt;2<sp/>*<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(-1.0,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>aRow);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(aRow,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[(i+1)*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>]),<sp/>aRow);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*Check<sp/>sign<sp/>of<sp/>wC<sp/>to<sp/>know<sp/>if<sp/>the<sp/>sqrt<sp/>will<sp/>fail*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i+1]&lt;=0){</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialUKFCleanUpdate(configData);</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;}</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(sqrt(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i+1]),<sp/>aRow,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>aRow);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy((</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)&amp;AT[i*<sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>],<sp/>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*)aRow,</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(k=0;k&lt;3;k++){</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>procNoise[k*AKF_N_STATES+k]<sp/>*=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref>/2;</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>procNoise[(k+3)*AKF_N_STATES+(k+3)]<sp/>*=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa97229f74fe21bb3665b96c416e9a655" kindref="member">dt</ref>;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;AT[2<sp/>*<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>],</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>procNoise,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref></highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>ukfQRDJustR(AT,<sp/>(int32_t)<sp/>(2<sp/>*<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>+<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>),</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>,<sp/>rAT);</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(rAT,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>sBarT);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(sBarT,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>);</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/>vScale(-1.0,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>xErr);</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/>vAdd(xErr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>&amp;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[0],<sp/>xErr);</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfCholDownDate(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>xErr,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[0],</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>sBarUp);</highlight></codeline>
<codeline lineno="478"><highlight class="normal"></highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="481"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(sBarUp,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>);</highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>);</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultM(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>);</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>vCopy(&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[0]),<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(badUpdate&lt;0){</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialUKFCleanUpdate(configData);</highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);}</highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ab7136be9f7441080b241d453a8bb6ebf" kindref="member">timeTag</ref><sp/>=<sp/>updateTime;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="496"><highlight class="normal">}</highlight></codeline>
<codeline lineno="497"><highlight class="normal"></highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inertialUKFMeasModel(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentST)</highlight></codeline>
<codeline lineno="508"><highlight class="normal">{</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quatTranspose[4];</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>quatMeas[4];</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>EPSum[4];</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mrpSum[3];</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>MRP2EP(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>quatTranspose);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(-1.0,<sp/>&amp;(quatTranspose[1]),<sp/>&amp;(quatTranspose[1]));</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/>MRP2EP(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[currentST].MRP_BdyInrtl,<sp/>quatMeas);</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/>addEP(quatTranspose,<sp/>quatMeas,<sp/>EPSum);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>EP2MRP(EPSum,<sp/>mrpSum);</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v3Norm(mrpSum)<sp/>&gt;<sp/>1.0)</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>MRPshadow(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[currentST].MRP_BdyInrtl,</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[currentST].MRP_BdyInrtl);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>*2+1;<sp/>i++)</highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[i*AKF_N_STATES]),<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a0c6e54cb934405ec82992f12cf5a6dbf" kindref="member">yMeas</ref>[i*3]));</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a368c5281e6dcdc233c65331e4794ffe5" kindref="member">stSensorIn</ref>[currentST].MRP_BdyInrtl,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac036a9ca4753eade7d1901c2877dcd20" kindref="member">obs</ref>);</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref><sp/>=<sp/>3;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="542"><highlight class="normal">}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inertialUKFAggGyrData(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>prevTime,</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>propTime,<sp/>AccDataMsgPayload<sp/>*gyrData)</highlight></codeline>
<codeline lineno="555"><highlight class="normal">{</highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>minFutInd;<sp/><sp/></highlight><highlight class="comment">/*<sp/>[-]<sp/>Index<sp/>in<sp/>buffer<sp/>that<sp/>is<sp/>the<sp/>oldest<sp/>new<sp/>meas*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>j;</highlight></codeline>
<codeline lineno="558"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>minFutTime;<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>[s]<sp/>smallest<sp/>future<sp/>measurement<sp/>time-tag*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>measTime;<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>[s]<sp/>measurement<sp/>time*/</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ep_BpropB0[4],<sp/>ep_B1B0[4],<sp/>epTemp[4],<sp/>omeg_BN_B[3],<sp/>prvTemp[3];</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dt;</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/>minFutInd<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>minFutTime<sp/>=<sp/>-1;</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;MAX_ACC_BUF_PKT;<sp/>i++)</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="572"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measTime<sp/>=<sp/>gyrData-&gt;accPkts[i].measTime*NANO2SEC;</highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(measTime<sp/>&gt;<sp/>prevTime<sp/>&amp;&amp;<sp/>(measTime<sp/>&lt;<sp/>minFutTime<sp/>||<sp/>minFutTime<sp/>&lt;<sp/>0.0))</highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minFutInd<sp/>=<sp/>(uint32_t)<sp/>i;</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minFutTime<sp/>=<sp/>measTime;</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/>v4SetZero(ep_BpropB0);</highlight></codeline>
<codeline lineno="581"><highlight class="normal"><sp/><sp/><sp/><sp/>ep_BpropB0[0]<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/>i=0;</highlight></codeline>
<codeline lineno="583"><highlight class="normal"><sp/><sp/><sp/><sp/>measTime<sp/>=<sp/>prevTime;</highlight></codeline>
<codeline lineno="586"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(minFutTime<sp/>&gt;<sp/>prevTime<sp/>&amp;&amp;<sp/>i&lt;MAX_ACC_BUF_PKT)</highlight></codeline>
<codeline lineno="587"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="588"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dt<sp/>=<sp/>minFutTime<sp/>-<sp/>measTime;</highlight></codeline>
<codeline lineno="590"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(gyrData-&gt;accPkts[minFutInd].gyro_B,<sp/>omeg_BN_B);</highlight></codeline>
<codeline lineno="591"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(dt,<sp/>omeg_BN_B,<sp/>prvTemp);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="595"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>PRV2EP(prvTemp,<sp/>ep_B1B0);</highlight></codeline>
<codeline lineno="596"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v4Copy(ep_BpropB0,<sp/>epTemp);</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>addEP(epTemp,<sp/>ep_B1B0,<sp/>ep_BpropB0);</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a08b5d74c8bd325adeab7b0201f65601b" kindref="member">gyrAggTimeTag</ref><sp/>=<sp/>minFutTime;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>i++;</highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>measTime<sp/>=<sp/>minFutTime;</highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*%<sp/>operator<sp/>used<sp/>because<sp/>gyro<sp/>buffer<sp/>is<sp/>a<sp/>ring-buffer<sp/>and<sp/>this<sp/>operator<sp/></highlight></codeline>
<codeline lineno="603"><highlight class="comment"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>wraps<sp/>the<sp/>index<sp/>back<sp/>to<sp/>zero<sp/>when<sp/>we<sp/>overflow.*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minFutInd<sp/>=<sp/>(minFutInd<sp/>+<sp/>1)%MAX_ACC_BUF_PKT;</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>minFutTime<sp/>=<sp/>gyrData-&gt;accPkts[minFutInd].measTime*NANO2SEC;</highlight></codeline>
<codeline lineno="607"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(j=0;<sp/>j&lt;3;<sp/>j++)</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lowPassFilterSignal(omeg_BN_B[j],<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ade7393e1081f937bcb02c525cec04c7e" kindref="member">gyroFilt</ref>[j]));</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad9421f938e9b971a154f8019b294714" kindref="member">numUsedGyros</ref><sp/>=<sp/>(uint32_t)<sp/>i;</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/>EP2MRP(ep_BpropB0,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a5fb80f308c8ed1d66f1d55961ec71474" kindref="member">aggSigma_b2b1</ref>);</highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="617"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="618"><highlight class="normal">}</highlight></codeline>
<codeline lineno="619"><highlight class="normal"></highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>inertialUKFMeasUpdate(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>currentST)</highlight></codeline>
<codeline lineno="628"><highlight class="normal">{</highlight></codeline>
<codeline lineno="629"><highlight class="normal"><sp/><sp/><sp/><sp/>uint32_t<sp/>i;</highlight></codeline>
<codeline lineno="630"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>yBar[3],<sp/>syInv[3*3];</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>kMat[AKF_N_STATES*3];</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xHat[AKF_N_STATES],<sp/>Ucol[AKF_N_STATES],<sp/>sBarT[AKF_N_STATES*AKF_N_STATES],<sp/>tempYVec[3];</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>AT[(2<sp/>*<sp/>AKF_N_STATES<sp/>+<sp/>3)*3],<sp/>qChol[3*3];</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rAT[3*3],<sp/>syT[3*3];</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sy[3*3];</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>updMat[3*3],<sp/>pXY[AKF_N_STATES*3],<sp/>Umat[AKF_N_STATES*3];</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/>int32_t<sp/>badUpdate=0;</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/>vCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae42ddbe7d1a93ce0555e222230906b60" kindref="member">statePrev</ref>);</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9420efe1d5f9a2bda670d96040faa8dc" kindref="member">sBarPrev</ref>);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a802ea0a6f398017f0c319f2ed7eb74c8" kindref="member">covarPrev</ref>);</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/>inertialUKFMeasModel(configData,<sp/>currentST);</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(rAT,<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/>vSetZero(yBar,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>);</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>*2+1;<sp/>i++)</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCopy(&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a0c6e54cb934405ec82992f12cf5a6dbf" kindref="member">yMeas</ref>[i*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>]),<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempYVec);</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[i],<sp/>tempYVec,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec);</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(yBar,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec,<sp/>yBar);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(AT,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>*2+configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>);</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>*2;<sp/>i++)</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(-1.0,<sp/>yBar,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec);</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(tempYVec,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a0c6e54cb934405ec82992f12cf5a6dbf" kindref="member">yMeas</ref>[(i+1)*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>]),<sp/>tempYVec);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i+1]&lt;0){</highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-1;}</highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(sqrt(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i+1]),<sp/>tempYVec,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(&amp;(AT[i*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>]),<sp/>tempYVec,</highlight></codeline>
<codeline lineno="670"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="672"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="676"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfCholDecomp(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a6fa67ed43353db60b08546c355d94636" kindref="member">STDatasStruct</ref>.<ref refid="struct_s_t_data_parsing_1a8544ef2b379901fe6419c30b58535460" kindref="member">STMessages</ref>[currentST].<ref refid="struct_s_t_message_1a2226e73ca241ab30eb36b1d79b1780bb" kindref="member">noise</ref>,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>qChol);</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/>memcpy(&amp;(AT[2*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>]),</highlight></codeline>
<codeline lineno="678"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>qChol,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="681"><highlight class="normal"><sp/><sp/><sp/><sp/>ukfQRDJustR(AT,<sp/>(int32_t)<sp/>(2*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>+configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>),</highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>rAT);</highlight></codeline>
<codeline lineno="683"><highlight class="normal"></highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(rAT,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>syT);</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(syT,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>sy);</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>vScale(-1.0,<sp/>yBar,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec);</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/>vAdd(tempYVec,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a0c6e54cb934405ec82992f12cf5a6dbf" kindref="member">yMeas</ref>[0]),<sp/>tempYVec);</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfCholDownDate(sy,<sp/>tempYVec,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[0],</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>updMat);</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(updMat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>sy);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(sy,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>syT);</highlight></codeline>
<codeline lineno="696"><highlight class="normal"></highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>mSetZero(pXY,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>);</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;2*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref>+1;<sp/>i++)</highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(-1.0,<sp/>yBar,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec);</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vAdd(tempYVec,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a0c6e54cb934405ec82992f12cf5a6dbf" kindref="member">yMeas</ref>[i*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>]),<sp/>tempYVec);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vSubtract(&amp;(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aafa918b51c1d31ae954b7bad13d3b4c4" kindref="member">SP</ref>[i*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>]),<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aa2bd275ed7a7b94574ff5e8e9c4aadac" kindref="member">xBar</ref>,<sp/>xHat);</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vScale(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i],<sp/>xHat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>xHat);</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mMultM(xHat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>1,<sp/>tempYVec,<sp/>1,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,</highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kMat);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mAdd(pXY,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>kMat,<sp/>pXY);</highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="712"><highlight class="normal"></highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfUInv(syT,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>syInv);</highlight></codeline>
<codeline lineno="718"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="719"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultM(pXY,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>syInv,</highlight></codeline>
<codeline lineno="720"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>kMat);</highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfLInv(sy,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>syInv);</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultM(kMat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>syInv,</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>kMat);</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="725"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/>vSubtract(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac036a9ca4753eade7d1901c2877dcd20" kindref="member">obs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>yBar,<sp/>tempYVec);</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultM(kMat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>tempYVec,</highlight></codeline>
<codeline lineno="731"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>1,<sp/>xHat);</highlight></codeline>
<codeline lineno="732"><highlight class="normal"><sp/><sp/><sp/><sp/>vAdd(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>xHat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultM(kMat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>sy,</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>Umat);</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(Umat,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>,<sp/>Umat);</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>;<sp/>i++)</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vCopy(&amp;(Umat[i*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>]),<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>Ucol);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>badUpdate<sp/>+=<sp/>ukfCholDownDate(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>Ucol,<sp/>-1.0,<sp/>(int32_t)<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>sBarT);</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCopy(sBarT,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="747"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>mTranspose(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="750"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/>mMultM(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>);</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(badUpdate&lt;0){</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>inertialUKFCleanUpdate(configData);</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(-1);}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(0);</highlight></codeline>
<codeline lineno="759"><highlight class="normal">}</highlight></codeline>
<codeline lineno="760"><highlight class="normal"></highlight></codeline>
<codeline lineno="767"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>inertialUKFCleanUpdate(<ref refid="struct_inertial_u_k_f_config" kindref="compound">InertialUKFConfig</ref><sp/>*configData){</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/>vSetZero(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ac036a9ca4753eade7d1901c2877dcd20" kindref="member">obs</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1af81a53036b2e1fad1c3e7a6454876878" kindref="member">numObs</ref>);</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/>vCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae42ddbe7d1a93ce0555e222230906b60" kindref="member">statePrev</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aae797dfd024ac753cff48079d15f2bb4" kindref="member">state</ref>);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9420efe1d5f9a2bda670d96040faa8dc" kindref="member">sBarPrev</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a03d23d93521aebd6f137a886bdb24a40" kindref="member">sBar</ref>);</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/>mCopy(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a802ea0a6f398017f0c319f2ed7eb74c8" kindref="member">covarPrev</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref>,<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a7c72c34dac86cdc6ce73ff7e4b8086c7" kindref="member">covar</ref>);</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[0]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref><sp/>/<sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>);</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[0]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref><sp/>/<sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>)<sp/>+<sp/>(1<sp/>-<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3d8f16b7eaa499f7b2473bceaf9edf13" kindref="member">alpha</ref>*configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3d8f16b7eaa499f7b2473bceaf9edf13" kindref="member">alpha</ref><sp/>+<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9c3e83aa68961a4a7877e56b427236d7" kindref="member">beta</ref>);</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>1;<sp/>i&lt;configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a3eb82663fee3071e96614bfdfc90a7d8" kindref="member">countHalfSPs</ref><sp/>*<sp/>2<sp/>+<sp/>1;<sp/>i++)</highlight></codeline>
<codeline lineno="781"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[i]<sp/>=<sp/>1.0<sp/>/<sp/>2.0*1.0<sp/>/<sp/>(configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a48f7a85913da710eabadd70f7c42110b" kindref="member">numStates</ref><sp/>+</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1a9d03fac236e1f064a0c5dde97dfc9117" kindref="member">lambdaVal</ref>);</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1aad1404ffc5d7e9177a163501bb45692b" kindref="member">wC</ref>[i]<sp/>=<sp/>configData-&gt;<ref refid="struct_inertial_u_k_f_config_1ae895b80bf62a090b21c6a81902cd923e" kindref="member">wM</ref>[i];</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="788"><highlight class="normal">}</highlight></codeline>
<codeline lineno="789"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/attDetermination/InertialUKF/inertialUKF.c"/>
  </compounddef>
</doxygen>
