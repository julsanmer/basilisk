<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="orbital_motion_8c" kind="file" language="C++">
    <compoundname>orbitalMotion.c</compoundname>
    <includes refid="orbital_motion_8h" local="yes">orbitalMotion.h</includes>
    <includes local="no">math.h</includes>
    <includes local="no">stdio.h</includes>
    <includes local="no">stdarg.h</includes>
    <includes refid="linear_algebra_8h" local="yes">linearAlgebra.h</includes>
    <includes refid="astro_constants_8h" local="yes">astroConstants.h</includes>
    <includes refid="bsk___print_8h" local="yes">architecture/utilities/bsk_Print.h</includes>
    <includes refid="rigid_body_kinematics_8h" local="yes">rigidBodyKinematics.h</includes>
    <incdepgraph>
      <node id="9">
        <label>astroConstants.h</label>
        <link refid="astro_constants_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>architecture/utilities/bskLogging.h</label>
        <link refid="bsk_logging_8h_source"/>
      </node>
      <node id="10">
        <label>architecture/utilities/bsk_Print.h</label>
        <link refid="bsk___print_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
      </node>
      <node id="8">
        <label>linearAlgebra.h</label>
        <link refid="linear_algebra_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c</label>
        <link refid="orbital_motion_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>orbitalMotion.h</label>
        <link refid="orbital_motion_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>rigidBodyKinematics.h</label>
        <link refid="rigid_body_kinematics_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>architecture/msgPayloadDefC/ClassicElementsMsgPayload.h</label>
      </node>
      <node id="5">
        <label>math.h</label>
      </node>
      <node id="7">
        <label>stdarg.h</label>
      </node>
      <node id="6">
        <label>stdio.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="func">
      <memberdef kind="function" id="orbital_motion_8c_1a4fd2c4ccc9feab0d6f954b15e00f352a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hillFrame</definition>
        <argsstring>(double *rc_N, double *vc_N, double HN[3][3])</argsstring>
        <name>hillFrame</name>
        <param>
          <type>double *</type>
          <declname>rc_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vc_N</declname>
        </param>
        <param>
          <type>double</type>
          <declname>HN</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: maps inertial position and velocity vectors in the Hill frame DCM HN Inputs: rc_N: inertial position vector vc_N: inertial velocity vector Outputs: HN: Hill frame DCM relative to inertial frame </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="40" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="40" bodyend="56"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a1f8b971382317c09ae30ac1671748e0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hill2rv</definition>
        <argsstring>(double *rc_N, double *vc_N, double *rho_H, double *rhoPrime_H, double *rd_N, double *vd_N)</argsstring>
        <name>hill2rv</name>
        <param>
          <type>double *</type>
          <declname>rc_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vc_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rho_H</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rhoPrime_H</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rd_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vd_N</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: maps Hill frame deputy states to inertial inertial position and velocity vectors Inputs: rc_N: chief inertial position vector vc_N: chief inertial velocity vector rho_H: deputy Hill position vector rhoPrime_H: deputy Hill velocity vector Outputs: rd_N: deputy inertial position vector vd_N: deputy inertial velocity vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="69" column="7" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="69" bodyend="97"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a5a03909809850208991c83c17812fa90" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rv2hill</definition>
        <argsstring>(double *rc_N, double *vc_N, double *rd_N, double *vd_N, double *rho_H, double *rhoPrime_H)</argsstring>
        <name>rv2hill</name>
        <param>
          <type>double *</type>
          <declname>rc_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vc_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rd_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vd_N</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rho_H</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rhoPrime_H</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: maps inertial frame deputy states to Hill inertial position and velocity vectors Inputs: rc_N: chief inertial position vector vc_N: chief inertial velocity vector rd_N: deputy inertial position vector vd_N: deputy inertial velocity vector Outputs: rho_H: deputy Hill position vector rhoPrime_H: deputy Hill velocity vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="111" column="9" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="111" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1af8736e71eb795b4269ae7462ee341a92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double E2f</definition>
        <argsstring>(double Ecc, double e)</argsstring>
        <name>E2f</name>
        <param>
          <type>double</type>
          <declname>Ecc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps eccentric anomaly angles into true anomaly angles. This function requires the orbit to be either circular or non-rectilinar elliptic orbit. Inputs: Ecc = eccentric anomaly (rad) e = eccentricity (0 &lt;= e &lt; 1) Outputs: f = true anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="152" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="152" bodyend="164"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a829c7f14c48212a860b45ea3734a7296" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double E2M</definition>
        <argsstring>(double Ecc, double e)</argsstring>
        <name>E2M</name>
        <param>
          <type>double</type>
          <declname>Ecc</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps the eccentric anomaly angle into the corresponding mean elliptic anomaly angle. Both 2D and 1D elliptic orbit are allowed. Inputs: Ecc = eccentric anomaly (rad) e = eccentricity (0 &lt;= e &lt; 1) Outputs: M = mean elliptic anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="176" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="176" bodyend="188"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a7f8981f0dfee045a691fe64f524fcff5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double f2E</definition>
        <argsstring>(double f, double e)</argsstring>
        <name>f2E</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps true anomaly angles into eccentric anomaly angles. This function requires the orbit to be either circular or non-rectilinar elliptic orbit. Inputs: f = true anomaly angle (rad) e = eccentricity (0 &lt;= e &lt; 1) Outputs: Ecc = eccentric anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="200" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="200" bodyend="212"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1ac4a07684425c297705a4c173f15afbfc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double f2H</definition>
        <argsstring>(double f, double e)</argsstring>
        <name>f2H</name>
        <param>
          <type>double</type>
          <declname>f</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps true anomaly angles into hyperbolic anomaly angles. This function requires the orbit to be hyperbolic Inputs: f = true anomaly angle (rad) e = eccentricity (e &gt; 1) Outputs: H = hyperbolic anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="223" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="223" bodyend="235"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1af3b7f09bcdac83345decff823ac4be0c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double H2f</definition>
        <argsstring>(double H, double e)</argsstring>
        <name>H2f</name>
        <param>
          <type>double</type>
          <declname>H</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps hyperbolic anomaly angles into true anomaly angles. This function requires the orbit to be hyperbolic Inputs: H = hyperbolic anomaly (rad) e = eccentricity (e &gt; 1) Outputs: f = true anomaly angle (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="246" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="246" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1ac406aa432311b4981a039a7f76465747" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double H2N</definition>
        <argsstring>(double H, double e)</argsstring>
        <name>H2N</name>
        <param>
          <type>double</type>
          <declname>H</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps the hyperbolic anomaly angle H into the corresponding mean hyperbolic anomaly angle N. Inputs: H = hyperbolic anomaly (rad) e = eccentricity (e &gt; 1) Outputs: N = mean hyperbolic anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="269" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="269" bodyend="281"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1aa4732caf356b3aab0afc80e1352e12f8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double M2E</definition>
        <argsstring>(double M, double e)</argsstring>
        <name>M2E</name>
        <param>
          <type>double</type>
          <declname>M</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps the mean elliptic anomaly angle into the corresponding eccentric anomaly angle. Both 2D and 1D elliptic orbit are allowed. Inputs: M = mean elliptic anomaly (rad) e = eccentricity (0 &lt;= e &lt; 1) Outputs: Ecc = eccentric anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="293" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="293" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a4636a6951ee8e048b08cb1315a1104a2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double N2H</definition>
        <argsstring>(double N, double e)</argsstring>
        <name>N2H</name>
        <param>
          <type>double</type>
          <declname>N</declname>
        </param>
        <param>
          <type>double</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Maps the mean hyperbolic anomaly angle N into the corresponding hyperbolic anomaly angle H. Inputs: N = mean hyperbolic anomaly (rad) e = eccentricity (e &gt; 1) Outputs: H = hyperbolic anomaly (rad) </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="327" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="327" bodyend="354"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a9c0b837e75b80f3a12c6de224eabd122" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void elem2rv</definition>
        <argsstring>(double mu, classicElements *elements, double *rVec, double *vVec)</argsstring>
        <name>elem2rv</name>
        <param>
          <type>double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>classicElements *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rVec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vVec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Translates the orbit elements a - semi-major axis (km) e - eccentricity i - inclination (rad) AN - ascending node (rad) AP - argument of periapses (rad) f - true anomaly angle (rad) to the inertial Cartesian position and velocity vectors. The attracting body is specified through the supplied gravitational constant mu (units of km^3/s^2).</para>
<para>The code can handle the following cases: circular: e = 0 a &gt; 0 elliptical-2D: 0 &lt; e &lt; 1 a &gt; 0 elliptical-1D: e = 1 a &gt; 0 f = Ecc. Anom. here parabolic: e = 1 rp = -a hyperbolic: e &gt; 1 a &lt; 0</para>
<para>Note: to handle the parabolic case and distinguish it form the rectilinear elliptical case, instead of passing along the semi-major axis a in the &quot;a&quot; input slot, the negative radius at periapses is supplied. Having &quot;a&quot; be negative and e = 1 is a then a unique identified for the code for the parabolic case. Inputs: mu = gravitational parameter elements = orbital elements Outputs: rVec = position vector vVec = velocity vector </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="388" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="388" bodyend="457"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a36a65619f36f0166d8117ef4a85be72e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void rv2elem</definition>
        <argsstring>(double mu, double *rVec, double *vVec, classicElements *elements)</argsstring>
        <name>rv2elem</name>
        <param>
          <type>double</type>
          <declname>mu</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rVec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vVec</declname>
        </param>
        <param>
          <type>classicElements *</type>
          <declname>elements</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Translates the orbit elements inertial Cartesian position vector rVec and velocity vector vVec into the corresponding classical orbit elements where a - semi-major axis (zero if parabolic) e - eccentricity i - inclination (rad) AN - ascending node (rad) AP - argument of periapses (rad) f - true anomaly angle (rad) if the orbit is rectilinear, then this will be the eccentric or hyperbolic anomaly rp - radius at periapses ra - radius at apoapses (zero if parabolic) The attracting body is specified through the supplied gravitational constant mu (units of km^3/s^2). Inputs: mu = gravitational parameter rVec = position vector vVec = velocity vector Outputs: elements = orbital elements </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="483" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="483" bodyend="581"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a751bda0fc8ac6707f36ad8466547fd0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double atmosphericDensity</definition>
        <argsstring>(double alt)</argsstring>
        <name>atmosphericDensity</name>
        <param>
          <type>double</type>
          <declname>alt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: This program computes the atmospheric density based on altitude supplied by user. This function uses a curve fit based on atmospheric data from the Standard Atmosphere 1976 Data. This function is valid for altitudes ranging from 100km to 1000km.</para>
<para>Note: This code can only be applied to spacecraft orbiting the Earth Inputs: alt = altitude in km Outputs: density = density at the given altitude in kg/m^3 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="595" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="595" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a64e8eb7c23b49cdd202a339b64f14536" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>double</type>
        <definition>double debyeLength</definition>
        <argsstring>(double alt)</argsstring>
        <name>debyeLength</name>
        <param>
          <type>double</type>
          <declname>alt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: This program computes the Debye Length length for a given altitude and is valid for altitudes ranging from 200 km to GEO (35000km). However, all values above 1000 km are HIGHLY speculative at this point. Inputs: alt = altitude in km Outputs: debye = debye length given in m </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="629" column="8" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="629" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1ae058f10e9ca166e38130e8e61d3276a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void atmosphericDrag</definition>
        <argsstring>(double Cd, double A, double m, double *rvec, double *vvec, double *advec)</argsstring>
        <name>atmosphericDrag</name>
        <param>
          <type>double</type>
          <declname>Cd</declname>
        </param>
        <param>
          <type>double</type>
          <declname>A</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>vvec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>advec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: This program computes the atmospheric drag acceleration vector acting on a spacecraft. Note the acceleration vector output is inertial, and is only valid for altitudes up to 1000 km. Afterwards the drag force is zero. Only valid for Earth. Inputs: Cd = drag coefficient of the spacecraft A = cross-sectional area of the spacecraft in m^2 m = mass of the spacecraft in kg rvec = Inertial position vector of the spacecraft in km [x;y;z] vvec = Inertial velocity vector of the spacecraft in km/s [vx;vy;vz] Outputs: advec = The inertial acceleration vector due to atmospheric drag in km/sec^2 </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="687" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="687" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a7b3831b0af1af024f193a94957b03655" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jPerturb</definition>
        <argsstring>(double *rvec, int num, double *ajtot,...)</argsstring>
        <name>jPerturb</name>
        <param>
          <type>double *</type>
          <declname>rvec</declname>
        </param>
        <param>
          <type>int</type>
          <declname>num</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>ajtot</declname>
        </param>
        <param>
          <type>...</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Computes the J2_EARTH-J6_EARTH zonal graviational perturbation accelerations. Inputs: rvec = Cartesian Position vector in kilometers [x;y;z]. num = Corresponds to which J components to use, must be an integer between 2 and 6. (note: Additive- 2 corresponds to J2_EARTH while 3 will correspond to J2_EARTH + J3_EARTH) Outputs: ajtot = The total acceleration vector due to the J perturbations in km/sec^2 [accelx;accely;accelz] </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="731" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="731" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a4e52cb9151edb75b6bf496c2a6fbc2b0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void solarRad</definition>
        <argsstring>(double A, double m, double *sunvec, double *arvec)</argsstring>
        <name>solarRad</name>
        <param>
          <type>double</type>
          <declname>A</declname>
        </param>
        <param>
          <type>double</type>
          <declname>m</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>sunvec</declname>
        </param>
        <param>
          <type>double *</type>
          <declname>arvec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Purpose: Computes the inertial solar radiation force vectors based on cross-sectional Area and mass of the spacecraft and the position vector of the planet to the sun. Note: It is assumed that the solar radiation pressure decreases quadratically with distance from sun (in AU)</para>
<para>Solar Radiation Equations obtained from Earth Space and Planets Journal Vol. 51, 1999 pp. 979-986 Inputs: A = Cross-sectional area of the spacecraft that is facing the sun in m^2. m = The mass of the spacecraft in kg. sunvec = Position vector to the Sun in units of AU. Earth has a distance of 1 AU. Outputs: arvec = The inertial acceleration vector due to the effects of Solar Radiation pressure in km/sec^2. The vector components of the output are the same as the vector components of the sunvec input vector. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="909" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="909" bodyend="930"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a9feb12bcd89fbd84aad1e3d85bdffb96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clMeanOscMap</definition>
        <argsstring>(double req, double J2, classicElements *elements, classicElements *elements_p, double sgn)</argsstring>
        <name>clMeanOscMap</name>
        <param>
          <type>double</type>
          <declname>req</declname>
        </param>
        <param>
          <type>double</type>
          <declname>J2</declname>
        </param>
        <param>
          <type>classicElements *</type>
          <declname>elements</declname>
        </param>
        <param>
          <type>classicElements *</type>
          <declname>elements_p</declname>
        </param>
        <param>
          <type>double</type>
          <declname>sgn</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maps classical mean orbit elements to Osculating elements </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="933" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="933" bodyend="1012"/>
      </memberdef>
      <memberdef kind="function" id="orbital_motion_8c_1a7e61dea766cc170e079310fd036b1245" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void clElem2eqElem</definition>
        <argsstring>(classicElements *elements_cl, equinoctialElements *elements_eq)</argsstring>
        <name>clElem2eqElem</name>
        <param>
          <type>classicElements *</type>
          <declname>elements_cl</declname>
        </param>
        <param>
          <type><ref refid="structequinoctial_elements" kindref="compound">equinoctialElements</ref> *</type>
          <declname>elements_eq</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>maps from classical orbit elements to equinoctial elements </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" line="1015" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c" bodystart="1015" bodyend="1029"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;orbitalMotion.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdio.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdarg.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;astroConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/bsk_Print.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;rigidBodyKinematics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>hillFrame(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rc_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vc_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HN[3][3])</highlight></codeline>
<codeline lineno="41"><highlight class="normal">{</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ir_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>radial<sp/>unit<sp/>direction<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>itheta_N[3];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>along-track<sp/>unit<sp/>direction<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ih_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>plane<sp/>normal<sp/>unit<sp/>direction<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hVec_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>angular<sp/>momentum<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(rc_N,<sp/>ir_N);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(rc_N,<sp/>vc_N,<sp/>hVec_N);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(hVec_N,<sp/>ih_N);</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(ih_N,<sp/>ir_N,<sp/>itheta_N);</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(ir_N,<sp/>HN[0]);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(itheta_N,<sp/>HN[1]);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(ih_N,<sp/>HN[2]);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="56"><highlight class="normal">}</highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/>hill2rv(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rc_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vc_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rho_H,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rhoPrime_H,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rd_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vd_N)</highlight></codeline>
<codeline lineno="70"><highlight class="normal">{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HN[3][3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DCM<sp/>of<sp/>Hill<sp/>frame<sp/>relative<sp/>to<sp/>inertial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>NH[3][3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DCM<sp/>of<sp/>inertial<sp/>frame<sp/>relative<sp/>to<sp/>Hill<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hVec_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>angular<sp/>momentum<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chief<sp/>orbit<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fDot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chief<sp/>true<sp/>anomaly<sp/>rate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega_HN_H[3];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Hill<sp/>frame<sp/>angular<sp/>velocity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deputy<sp/>relative<sp/>to<sp/>chief<sp/>vector<sp/>in<sp/>N<sp/>frame<sp/>components<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>hillFrame(rc_N,<sp/>vc_N,<sp/>HN);</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>m33Transpose(HN,<sp/>NH);</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(rc_N,<sp/>vc_N,<sp/>hVec_N);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>v3Norm(rc_N);</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/>fDot<sp/>=<sp/>v3Norm(hVec_N)/rc/rc;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Set(0,<sp/>0,<sp/>fDot,<sp/>omega_HN_H);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>inertial<sp/>deputy<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(NH,<sp/>rho_H,<sp/>rho_N);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(rc_N,<sp/>rho_N,<sp/>rd_N);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>inertial<sp/>deputy<sp/>velocity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(omega_HN_H,<sp/>rho_H,<sp/>vd_N);</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(vd_N,<sp/>rhoPrime_H,<sp/>vd_N);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(NH,<sp/>vd_N,<sp/>vd_N);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(vd_N,<sp/>vc_N,<sp/>vd_N);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="97"><highlight class="normal">}</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>rv2hill(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rc_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vc_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rd_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vd_N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rho_H,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rhoPrime_H)</highlight></codeline>
<codeline lineno="112"><highlight class="normal">{</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>HN[3][3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>DCM<sp/>of<sp/>Hill<sp/>frame<sp/>relative<sp/>to<sp/>inertial<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hVec_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>angular<sp/>momentum<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rc;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chief<sp/>orbit<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fDot;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>chief<sp/>true<sp/>anomaly<sp/>rate<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega_HN_H[3];<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Hill<sp/>frame<sp/>angular<sp/>velocity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rho_N[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>deputy<sp/>relative<sp/>to<sp/>chief<sp/>vector<sp/>in<sp/>N<sp/>frame<sp/>components<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhoDot_N[3];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>inertial<sp/>derivative<sp/>of<sp/>deputy/chief<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhoDot_H[3];<sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>inertial<sp/>derivative<sp/>of<sp/>deputy/chief<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>hillFrame(rc_N,<sp/>vc_N,<sp/>HN);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(rc_N,<sp/>vc_N,<sp/>hVec_N);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>rc<sp/>=<sp/>v3Norm(rc_N);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>fDot<sp/>=<sp/>v3Norm(hVec_N)/rc/rc;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Set(0,<sp/>0,<sp/>fDot,<sp/>omega_HN_H);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>Hill<sp/>frame<sp/>position<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Subtract(rd_N,<sp/>rc_N,<sp/>rho_N);</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(HN,<sp/>rho_N,<sp/>rho_H);</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>Hill<sp/>frame<sp/>velocity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Subtract(vd_N,<sp/>vc_N,<sp/>rhoDot_N);</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(HN,<sp/>rhoDot_N,<sp/>rhoDot_H);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(omega_HN_H,<sp/>rho_H,<sp/>rhoPrime_H);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Subtract(rhoDot_H,<sp/>rhoPrime_H,<sp/>rhoPrime_H);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="139"><highlight class="normal">}</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E2f(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ecc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="153"><highlight class="normal">{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((e<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(e<sp/>&lt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>2<sp/>*<sp/>atan2(sqrt(1<sp/>+<sp/>e)<sp/>*<sp/>sin(Ecc<sp/>/<sp/>2),<sp/>sqrt(1<sp/>-<sp/>e)<sp/>*<sp/>cos(Ecc<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;E2f()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>0<sp/>&lt;=<sp/>e<sp/>&lt;<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}</highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E2M(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ecc,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="177"><highlight class="normal">{</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((e<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(e<sp/>&lt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>=<sp/>Ecc<sp/>-<sp/>e<sp/>*<sp/>sin(Ecc);</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>M<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;E2M()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>0<sp/>&lt;=<sp/>e<sp/>&lt;<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>M;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f2E(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="201"><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ecc;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((e<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(e<sp/>&lt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ecc<sp/>=<sp/>2<sp/>*<sp/>atan2(sqrt(1<sp/>-<sp/>e)<sp/>*<sp/>sin(f<sp/>/<sp/>2),<sp/>sqrt(1<sp/>+<sp/>e)<sp/>*<sp/>cos(f<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ecc<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;f2E()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>0<sp/>&lt;=<sp/>e<sp/>&lt;<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>Ecc;</highlight></codeline>
<codeline lineno="212"><highlight class="normal">}</highlight></codeline>
<codeline lineno="213"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f2H(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="224"><highlight class="normal">{</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>=<sp/>2<sp/>*<sp/>atanh(sqrt((e<sp/>-<sp/>1)<sp/>/<sp/>(e<sp/>+<sp/>1))<sp/>*<sp/>tan(f<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;f2H()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>1<sp/>&lt;<sp/>e.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H;</highlight></codeline>
<codeline lineno="235"><highlight class="normal">}</highlight></codeline>
<codeline lineno="236"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H2f(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="247"><highlight class="normal">{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>2<sp/>*<sp/>atan(sqrt((e<sp/>+<sp/>1)<sp/>/<sp/>(e<sp/>-<sp/>1))<sp/>*<sp/>tanh(H<sp/>/<sp/>2));</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>f<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;H2f()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>1<sp/>&lt;<sp/>e.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>f;</highlight></codeline>
<codeline lineno="258"><highlight class="normal">}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H2N(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="270"><highlight class="normal">{</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>e<sp/>*<sp/>sinh(H)<sp/>-<sp/>H;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>N<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;H2N()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>1<sp/>&lt;<sp/>e.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>N;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M2E(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="294"><highlight class="normal">{</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>small<sp/>=<sp/>1e-13;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dE<sp/>=<sp/>10<sp/>*<sp/>small;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E1<sp/>=<sp/>M;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((e<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(e<sp/>&lt;<sp/>1))<sp/>{</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fabs(dE)<sp/>&gt;<sp/>small)<sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dE<sp/>=<sp/>(E1<sp/>-<sp/>e<sp/>*<sp/>sin(E1)<sp/>-<sp/>M)<sp/>/<sp/>(1<sp/>-<sp/>e<sp/>*<sp/>cos(E1));</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E1<sp/>-=<sp/>dE;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++count<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;iteration<sp/>error<sp/>in<sp/>M2E(%f,%f)&quot;</highlight><highlight class="normal">,<sp/>M,<sp/>e);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dE<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>E1<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;M2E()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>0<sp/>&lt;=<sp/>e<sp/>&lt;<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="314"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>E1;</highlight></codeline>
<codeline lineno="316"><highlight class="normal">}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N2H(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>N,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e)</highlight></codeline>
<codeline lineno="328"><highlight class="normal">{</highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>small<sp/>=<sp/>1e-13;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dH<sp/>=<sp/>10<sp/>*<sp/>small;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>H1<sp/>=<sp/>N;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>max<sp/>=<sp/>200;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><sp/><sp/><sp/>count<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(H1)<sp/>&gt;<sp/>7.0)</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1<sp/>=<sp/>N/fabs(N)*7.0;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="338"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(e<sp/>&gt;<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal">(fabs(dH)<sp/>&gt;<sp/>small)<sp/>{</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dH<sp/>=<sp/>(e<sp/>*<sp/>sinh(H1)<sp/>-<sp/>H1<sp/>-<sp/>N)<sp/>/<sp/>(e<sp/>*<sp/>cosh(H1)<sp/>-<sp/>1);</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1<sp/>-=<sp/>dH;</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(++count<sp/>&gt;<sp/>max)<sp/>{</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;iteration<sp/>error<sp/>in<sp/>N2H(%f,%f)&quot;</highlight><highlight class="normal">,<sp/>N,<sp/>e);</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dH<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>H1<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;N2H()<sp/>received<sp/>e<sp/>=<sp/>%g.<sp/>The<sp/>value<sp/>of<sp/>e<sp/>should<sp/>be<sp/>e<sp/>&gt;<sp/>1.&quot;</highlight><highlight class="normal">,<sp/>e);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"></highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>H1;</highlight></codeline>
<codeline lineno="354"><highlight class="normal">}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>elem2rv(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu,<sp/>classicElements<sp/>*elements,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rVec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vVec)</highlight></codeline>
<codeline lineno="389"><highlight class="normal">{</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>eccentricty<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>semi-major<sp/>axis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>anomaly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>velocity<sp/>magnitude<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>inclination<sp/>angle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>parameter<sp/>or<sp/>the<sp/>semi-latus<sp/>rectum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>AP;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>argument<sp/>of<sp/>perigee<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>AN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>argument<sp/>of<sp/>the<sp/>ascending<sp/>node<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>theta;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>latitude<sp/>theta<sp/>=<sp/>omega<sp/>+<sp/>f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>angular<sp/>momentum<sp/>magnitude<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ir[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>radius<sp/>unit<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>small<sp/>numerical<sp/>value<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>define<sp/>what<sp/>is<sp/>a<sp/>small<sp/>numerical<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>1e-12;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>map<sp/>classical<sp/>elements<sp/>structure<sp/>into<sp/>local<sp/>variables<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>elements-&gt;a;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/>e<sp/>=<sp/>elements-&gt;e;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/>i<sp/>=<sp/>elements-&gt;i;</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/>AN<sp/>=<sp/>elements-&gt;Omega;</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/>AP<sp/>=<sp/>elements-&gt;omega;</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/>f<sp/>=<sp/>elements-&gt;f;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"></highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((fabs(e-1.0)<sp/>&lt;<sp/>eps)<sp/>&amp;&amp;<sp/>(fabs(a)<sp/>&gt;<sp/>eps))<sp/>{<sp/></highlight><highlight class="comment">/*<sp/>1D<sp/>rectilinear<sp/>elliptic/hyperbolic<sp/>orbit<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="416"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>angle;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>eccentric/hyperbolic<sp/>anomaly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>angle<sp/>=<sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>f<sp/>is<sp/>treated<sp/>as<sp/>ecc/hyp<sp/>anomaly<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>radius<sp/><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements-&gt;a<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>a<sp/>*<sp/>(1<sp/>-<sp/>e<sp/>*<sp/>cos(angle));</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>a<sp/>*<sp/>(1<sp/>-<sp/>e<sp/>*<sp/>cosh(angle));</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v<sp/>=<sp/>sqrt(2<sp/>*<sp/>mu<sp/>/<sp/>r<sp/>-<sp/>mu<sp/>/<sp/>a);</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir[0]<sp/>=<sp/>cos(AN)<sp/>*<sp/>cos(AP)<sp/>-<sp/>sin(AN)<sp/>*<sp/>sin(AP)<sp/>*<sp/>cos(i);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir[1]<sp/>=<sp/>sin(AN)<sp/>*<sp/>cos(AP)<sp/>+<sp/>cos(AN)<sp/>*<sp/>sin(AP)<sp/>*<sp/>cos(i);</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ir[2]<sp/>=<sp/>sin(AP)<sp/>*<sp/>sin(i);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(r,<sp/>ir,<sp/>rVec);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(sin(angle)<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(v,<sp/>ir,<sp/>vVec);</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(-v,<sp/>ir,<sp/>vVec);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{<sp/></highlight><highlight class="comment">/*<sp/>general<sp/>2D<sp/>orbit<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>evaluate<sp/>semi-latus<sp/>rectum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(a)<sp/>&gt;<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>a<sp/>*<sp/>(1<sp/>-<sp/>e<sp/>*<sp/>e);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>elliptic<sp/>or<sp/>hyperbolic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p<sp/>=<sp/>2<sp/>*<sp/>elements-&gt;rPeriap;<sp/><sp/></highlight><highlight class="comment">/*<sp/>parabolic<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="442"><highlight class="normal"></highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r<sp/>=<sp/>p<sp/>/<sp/>(1<sp/>+<sp/>e<sp/>*<sp/>cos(f));<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>AP<sp/>+<sp/>f;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>true<sp/>latitude<sp/>angle<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h<sp/>=<sp/>sqrt(mu<sp/>*<sp/>p);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>ang.<sp/>momentum<sp/>mag.<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rVec[0]<sp/>=<sp/>r<sp/>*<sp/>(cos(AN)<sp/>*<sp/>cos(theta)<sp/>-<sp/>sin(AN)<sp/>*<sp/>sin(theta)<sp/>*<sp/>cos(i));</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rVec[1]<sp/>=<sp/>r<sp/>*<sp/>(sin(AN)<sp/>*<sp/>cos(theta)<sp/>+<sp/>cos(AN)<sp/>*<sp/>sin(theta)<sp/>*<sp/>cos(i));</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rVec[2]<sp/>=<sp/>r<sp/>*<sp/>(sin(theta)<sp/>*<sp/>sin(i));</highlight></codeline>
<codeline lineno="450"><highlight class="normal"></highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vVec[0]<sp/>=<sp/>-mu<sp/>/<sp/>h<sp/>*<sp/>(cos(AN)<sp/>*<sp/>(sin(theta)<sp/>+<sp/>e<sp/>*<sp/>sin(AP))<sp/>+<sp/>sin(AN)<sp/>*<sp/>(cos(</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta)<sp/>+<sp/>e<sp/>*<sp/>cos(AP))<sp/>*<sp/>cos(i));</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vVec[1]<sp/>=<sp/>-mu<sp/>/<sp/>h<sp/>*<sp/>(sin(AN)<sp/>*<sp/>(sin(theta)<sp/>+<sp/>e<sp/>*<sp/>sin(AP))<sp/>-<sp/>cos(AN)<sp/>*<sp/>(cos(</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta)<sp/>+<sp/>e<sp/>*<sp/>cos(AP))<sp/>*<sp/>cos(i));</highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>vVec[2]<sp/>=<sp/>-mu<sp/>/<sp/>h<sp/>*<sp/>(-(cos(theta)<sp/>+<sp/>e<sp/>*<sp/>cos(AP))<sp/>*<sp/>sin(i));</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="457"><highlight class="normal">}</highlight></codeline>
<codeline lineno="458"><highlight class="normal"></highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="483"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>rv2elem(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rVec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vVec,<sp/>classicElements<sp/>*elements)</highlight></codeline>
<codeline lineno="484"><highlight class="normal">{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>hVec[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>angular<sp/>momentum<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ihHat[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normalized<sp/>orbit<sp/>angular<sp/>momentum<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>h;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>angular<sp/>momentum<sp/>magnitude<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v3[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>temp<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n1Hat[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>1st<sp/>inertial<sp/>frame<sp/>base<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>n3Hat[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>3rd<sp/>inertial<sp/>frame<sp/>base<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="491"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nVec[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>line<sp/>of<sp/>nodes<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>inHat[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normalized<sp/>line<sp/>of<sp/>nodes<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>irHat[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normalized<sp/>position<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>current<sp/>orbit<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>orbit<sp/>velocity<sp/>magnitude<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eVec[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>eccentricity<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ieHat[3];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>normalized<sp/>eccentricity<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>p;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>the<sp/>parameter,<sp/>also<sp/>called<sp/>semi-latus<sp/>rectum<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eps;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>small<sp/>numerical<sp/>value<sp/>parameter<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>define<sp/>what<sp/>is<sp/>a<sp/>small<sp/>numerical<sp/>value<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/>eps<sp/>=<sp/>1e-12;</highlight></codeline>
<codeline lineno="503"><highlight class="normal"></highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>define<sp/>inertial<sp/>frame<sp/>axes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Set(1.0,<sp/>0.0,<sp/>0.0,<sp/>n1Hat);</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Set(0.0,<sp/>0.0,<sp/>1.0,<sp/>n3Hat);</highlight></codeline>
<codeline lineno="507"><highlight class="normal"></highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>norms<sp/>of<sp/>position<sp/>and<sp/>velocity<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>v3Norm(rVec);</highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;rmag<sp/>=<sp/>r;</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>v3Norm(vVec);</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(rVec,<sp/>irHat);</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>specific<sp/>angular<sp/>momentum<sp/>and<sp/>its<sp/>magnitude<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(rVec,<sp/>vVec,<sp/>hVec);</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>h<sp/>=<sp/>v3Norm(hVec);</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(hVec,<sp/>ihHat);</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/>p<sp/>=<sp/>h*h<sp/>/<sp/>mu;</highlight></codeline>
<codeline lineno="519"><highlight class="normal"></highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>line<sp/>of<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(n3Hat,<sp/>hVec,<sp/>nVec);</highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(v3Norm(nVec)<sp/>&lt;<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>near<sp/>equatorial<sp/>orbits<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(n1Hat,<sp/>inHat);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Normalize(nVec,<sp/>inHat);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="528"><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Orbit<sp/>eccentricity<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(v<sp/>*<sp/>v<sp/>/<sp/>mu<sp/>-<sp/>1.0<sp/>/<sp/>r,<sp/>rVec,<sp/>eVec);</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(v3Dot(rVec,<sp/>vVec)<sp/>/<sp/>mu,<sp/>vVec,<sp/>v3);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Subtract(eVec,<sp/>v3,<sp/>eVec);</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;e<sp/>=<sp/>v3Norm(eVec);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;rPeriap<sp/>=<sp/>p<sp/>/<sp/>(1.0<sp/>+<sp/>elements-&gt;e);</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Orbit<sp/>eccentricity<sp/>unit<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements-&gt;e<sp/>&gt;<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Normalize(eVec,<sp/>ieHat);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>near<sp/>circular<sp/>orbits,<sp/>make<sp/>i_e_hat<sp/>equal<sp/>to<sp/>line<sp/>of<sp/>nodes<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(inHat,<sp/>ieHat);</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>semi-major<sp/>axis<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;alpha<sp/>=<sp/>2.0<sp/>/<sp/>r<sp/>-<sp/>v*v<sp/>/<sp/>mu;</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(fabs(elements-&gt;alpha)<sp/>&gt;<sp/>eps)<sp/>{</highlight></codeline>
<codeline lineno="547"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>elliptic<sp/>or<sp/>hyperbolic<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;a<sp/>=<sp/>1.0<sp/>/<sp/>elements-&gt;alpha;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;rApoap<sp/>=<sp/>p<sp/>/<sp/>(1.0<sp/>-<sp/>elements-&gt;e);</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="551"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>parabolic<sp/>case<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;a<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;rApoap<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="555"><highlight class="normal"></highlight></codeline>
<codeline lineno="556"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>inclination<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;i<sp/>=<sp/>safeAcos(hVec[2]<sp/>/<sp/>h);</highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>Ascending<sp/>Node<sp/>Omega<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(n1Hat,<sp/>inHat,<sp/>v3);</highlight></codeline>
<codeline lineno="561"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;Omega<sp/>=<sp/>atan2(v3[2],<sp/>inHat[0]);</highlight></codeline>
<codeline lineno="562"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements-&gt;Omega<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="563"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;Omega<sp/>+=<sp/>2*M_PI;</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>Argument<sp/>of<sp/>Periapses<sp/>omega<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="567"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(inHat,<sp/>ieHat,<sp/>v3);</highlight></codeline>
<codeline lineno="568"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;omega<sp/>=<sp/>atan2(v3Dot(ihHat,v3),<sp/>v3Dot(inHat,<sp/>ieHat));</highlight></codeline>
<codeline lineno="569"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements-&gt;omega<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="570"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;omega<sp/>+=<sp/>2*M_PI;</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="572"><highlight class="normal"></highlight></codeline>
<codeline lineno="573"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>true<sp/>anomaly<sp/>angle<sp/>f<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="574"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(ieHat,<sp/>irHat,<sp/>v3);</highlight></codeline>
<codeline lineno="575"><highlight class="normal"><sp/><sp/><sp/><sp/>elements-&gt;f<sp/>=<sp/>atan2(v3Dot(ihHat,v3),<sp/>v3Dot(ieHat,<sp/>irHat));</highlight></codeline>
<codeline lineno="576"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(elements-&gt;f<sp/>&lt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="577"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>elements-&gt;f<sp/>+=<sp/>2*M_PI;</highlight></codeline>
<codeline lineno="578"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="581"><highlight class="normal">}</highlight></codeline>
<codeline lineno="582"><highlight class="normal"></highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>atmosphericDensity(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alt)</highlight></codeline>
<codeline lineno="596"><highlight class="normal">{</highlight></codeline>
<codeline lineno="597"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>logdensity;</highlight></codeline>
<codeline lineno="598"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density;</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val;</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="601"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Smooth<sp/>exponential<sp/>drop-off<sp/>after<sp/>1000<sp/>km<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="602"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alt<sp/>&gt;<sp/>1000.)<sp/>{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>logdensity<sp/>=<sp/>(-7e-05)<sp/>*<sp/>alt<sp/>-<sp/>14.464;</highlight></codeline>
<codeline lineno="604"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>density<sp/>=<sp/>pow(10.,<sp/>logdensity);</highlight></codeline>
<codeline lineno="605"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>density;</highlight></codeline>
<codeline lineno="606"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="607"><highlight class="normal"></highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>the<sp/>density<sp/>based<sp/>on<sp/>a<sp/>scaled<sp/>6th<sp/>order<sp/>polynomial<sp/>fit<sp/>to<sp/>the<sp/>log<sp/>of<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="609"><highlight class="normal"><sp/><sp/><sp/><sp/>val<sp/>=<sp/>(alt<sp/>-<sp/>526.8000)<sp/>/<sp/>292.8563;</highlight></codeline>
<codeline lineno="610"><highlight class="normal"><sp/><sp/><sp/><sp/>logdensity<sp/>=<sp/>0.34047<sp/>*<sp/>pow(val,<sp/>6)<sp/>-<sp/>0.5889<sp/>*<sp/>pow(val,<sp/>5)<sp/>-<sp/>0.5269<sp/>*<sp/>pow(val,<sp/>4)</highlight></codeline>
<codeline lineno="611"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>1.0036<sp/>*<sp/>pow(val,<sp/>3)<sp/>+<sp/>0.60713<sp/>*<sp/>pow(val,<sp/>2)<sp/>-<sp/>2.3024<sp/>*<sp/>val<sp/>-<sp/>12.575;</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>density<sp/>by<sp/>raising<sp/>10<sp/>to<sp/>the<sp/>log<sp/>of<sp/>density<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="614"><highlight class="normal"><sp/><sp/><sp/><sp/>density<sp/>=<sp/>pow(10.,<sp/>logdensity);</highlight></codeline>
<codeline lineno="615"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>density;</highlight></codeline>
<codeline lineno="617"><highlight class="normal">}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight></codeline>
<codeline lineno="629"><highlight class="normal"></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>debyeLength(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alt)</highlight></codeline>
<codeline lineno="630"><highlight class="normal">{</highlight></codeline>
<codeline lineno="631"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>debyedist;</highlight></codeline>
<codeline lineno="632"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a;</highlight></codeline>
<codeline lineno="633"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>X[N_DEBYE_PARAMETERS]<sp/>=<sp/>{200,<sp/>250,<sp/>300,<sp/>350,<sp/>400,<sp/>450,<sp/>500,<sp/>550,</highlight></codeline>
<codeline lineno="634"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>600,<sp/>650,<sp/>700,<sp/>750,<sp/>800,<sp/>850,<sp/>900,<sp/>950,<sp/>1000,<sp/>1050,<sp/>1100,<sp/>1150,</highlight></codeline>
<codeline lineno="635"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1200,<sp/>1250,<sp/>1300,<sp/>1350,<sp/>1400,<sp/>1450,<sp/>1500,<sp/>1550,<sp/>1600,<sp/>1650,<sp/>1700,</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1750,<sp/>1800,<sp/>1850,<sp/>1900,<sp/>1950,<sp/>2000</highlight></codeline>
<codeline lineno="637"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="638"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Y[N_DEBYE_PARAMETERS]<sp/>=<sp/>{5.64E-03,<sp/>3.92E-03,<sp/>3.24E-03,<sp/>3.59E-03,</highlight></codeline>
<codeline lineno="639"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>4.04E-03,<sp/>4.28E-03,<sp/>4.54E-03,<sp/>5.30E-03,<sp/>6.55E-03,<sp/>7.30E-03,<sp/>8.31E-03,</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>8.38E-03,<sp/>8.45E-03,<sp/>9.84E-03,<sp/>1.22E-02,<sp/>1.37E-02,<sp/>1.59E-02,<sp/>1.75E-02,</highlight></codeline>
<codeline lineno="641"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>1.95E-02,<sp/>2.09E-02,<sp/>2.25E-02,<sp/>2.25E-02,<sp/>2.25E-02,<sp/>2.47E-02,<sp/>2.76E-02,</highlight></codeline>
<codeline lineno="642"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>2.76E-02,<sp/>2.76E-02,<sp/>2.76E-02,<sp/>2.76E-02,<sp/>2.76E-02,<sp/>2.76E-02,<sp/>3.21E-02,</highlight></codeline>
<codeline lineno="643"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.96E-02,<sp/>3.96E-02,<sp/>3.96E-02,<sp/>3.96E-02,<sp/>3.96E-02</highlight></codeline>
<codeline lineno="644"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="645"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i;</highlight></codeline>
<codeline lineno="646"><highlight class="normal"></highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Flat<sp/>debyeLength<sp/>length<sp/>for<sp/>altitudes<sp/>above<sp/>2000<sp/>km<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="648"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((alt<sp/>&gt;<sp/>2000.0)<sp/>&amp;&amp;<sp/>(alt<sp/>&lt;=<sp/>30000.0))<sp/>{</highlight></codeline>
<codeline lineno="649"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>alt<sp/>=<sp/>2000.0;</highlight></codeline>
<codeline lineno="650"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((alt<sp/>&gt;<sp/>30000.0)<sp/>&amp;&amp;<sp/>(alt<sp/>&lt;=<sp/>35000.0))<sp/>{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debyedist<sp/>=<sp/>0.1<sp/>*<sp/>alt<sp/>-<sp/>2999.7;</highlight></codeline>
<codeline lineno="652"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>debyedist;</highlight></codeline>
<codeline lineno="653"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((alt<sp/>&lt;<sp/>200.0)<sp/>||<sp/>(alt<sp/>&gt;<sp/>35000.0))<sp/>{</highlight></codeline>
<codeline lineno="654"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;debyeLength()<sp/>received<sp/>alt<sp/>=<sp/>%g\nThe<sp/>value<sp/>of<sp/>alt<sp/>should<sp/>be<sp/>in<sp/>the<sp/>range<sp/>of<sp/>[200<sp/>35000]&quot;</highlight><highlight class="normal">,<sp/>alt);</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>debyedist<sp/>=<sp/>NAN;</highlight></codeline>
<codeline lineno="656"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>debyedist;</highlight></codeline>
<codeline lineno="657"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Interpolation<sp/>of<sp/>data<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="660"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>N_DEBYE_PARAMETERS<sp/>-<sp/>1;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="661"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(X[i<sp/>+<sp/>1]<sp/>&gt;<sp/>alt)<sp/>{</highlight></codeline>
<codeline lineno="662"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="664"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="665"><highlight class="normal"><sp/><sp/><sp/><sp/>a<sp/>=<sp/>(alt<sp/>-<sp/>X[i])<sp/>/<sp/>(X[i<sp/>+<sp/>1]<sp/>-<sp/>X[i]);</highlight></codeline>
<codeline lineno="666"><highlight class="normal"><sp/><sp/><sp/><sp/>debyedist<sp/>=<sp/>Y[i]<sp/>+<sp/>a<sp/>*<sp/>(Y[i<sp/>+<sp/>1]<sp/>-<sp/>Y[i]);</highlight></codeline>
<codeline lineno="667"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>debyedist;</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>atmosphericDrag(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Cd,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rvec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*vvec,</highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*advec)</highlight></codeline>
<codeline lineno="689"><highlight class="normal">{</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>v;</highlight></codeline>
<codeline lineno="692"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>alt;</highlight></codeline>
<codeline lineno="693"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ad;</highlight></codeline>
<codeline lineno="694"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>density;</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>find<sp/>the<sp/>altitude<sp/>and<sp/>velocity<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="697"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>v3Norm(rvec);</highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/>v<sp/>=<sp/>v3Norm(vvec);</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/>alt<sp/>=<sp/>r<sp/>-<sp/>REQ_EARTH;</highlight></codeline>
<codeline lineno="700"><highlight class="normal"></highlight></codeline>
<codeline lineno="701"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Checking<sp/>if<sp/>user<sp/>supplied<sp/>a<sp/>orbital<sp/>position<sp/>is<sp/>inside<sp/>the<sp/>earth<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="702"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(alt<sp/>&lt;=<sp/>0.)<sp/>{</highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;atmosphericDrag()<sp/>received<sp/>rvec<sp/>=<sp/>[%g<sp/>%g<sp/>%g]The<sp/>value<sp/>of<sp/>rvec<sp/>should<sp/>produce<sp/>a<sp/>positive<sp/>altitude<sp/>for<sp/>the<sp/>Earth.&quot;</highlight><highlight class="normal">,<sp/><sp/>rvec[1],<sp/>rvec[2],<sp/>rvec[3]);</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set(NAN,<sp/>NAN,<sp/>NAN,<sp/>advec);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="707"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>get<sp/>the<sp/>Atmospheric<sp/>density<sp/>at<sp/>the<sp/>given<sp/>altitude<sp/>in<sp/>kg/m^3<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="709"><highlight class="normal"><sp/><sp/><sp/><sp/>density<sp/>=<sp/>atmosphericDensity(alt);</highlight></codeline>
<codeline lineno="710"><highlight class="normal"></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>the<sp/>magnitude<sp/>of<sp/>the<sp/>drag<sp/>acceleration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/>ad<sp/>=<sp/>((-0.5)<sp/>*<sp/>density<sp/>*<sp/>(Cd<sp/>*<sp/>A<sp/>/<sp/>m)<sp/>*<sp/>(pow(v<sp/>*<sp/>1000.,<sp/>2)))<sp/>/<sp/>1000.;</highlight></codeline>
<codeline lineno="713"><highlight class="normal"></highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>computing<sp/>the<sp/>vector<sp/>for<sp/>drag<sp/>acceleration<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(ad<sp/>/<sp/>v,<sp/>vvec,<sp/>advec);</highlight></codeline>
<codeline lineno="716"><highlight class="normal">}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>jPerturb(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*rvec,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>num,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*ajtot,<sp/>...)</highlight></codeline>
<codeline lineno="732"><highlight class="normal">{</highlight></codeline>
<codeline lineno="733"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mu;</highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>req;</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>J2,<sp/>J3,<sp/>J4,<sp/>J5,<sp/>J6;</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>x;</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>y;</highlight></codeline>
<codeline lineno="738"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>z;</highlight></codeline>
<codeline lineno="739"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r;</highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp[3];</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>temp2[3];</highlight></codeline>
<codeline lineno="742"><highlight class="normal"></highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>CelestialObject_t<sp/>planetID;</highlight></codeline>
<codeline lineno="744"><highlight class="normal"><sp/><sp/><sp/><sp/>va_list<sp/>args;</highlight></codeline>
<codeline lineno="745"><highlight class="normal"><sp/><sp/><sp/><sp/>va_start(args,<sp/>ajtot);</highlight></codeline>
<codeline lineno="746"><highlight class="normal"><sp/><sp/><sp/><sp/>planetID<sp/>=<sp/>(CelestialObject_t)<sp/>va_arg(args,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>va_end(args);</highlight></codeline>
<codeline lineno="748"><highlight class="normal"></highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>v3SetZero(ajtot);</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="751"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">switch</highlight><highlight class="normal">(planetID)<sp/>{</highlight></codeline>
<codeline lineno="752"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_MERCURY:</highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_MERCURY;</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_MERCURY;</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_MERCURY;</highlight></codeline>
<codeline lineno="756"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="759"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="760"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="761"><highlight class="normal"></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_VENUS:</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_VENUS;</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_VENUS;</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_VENUS;</highlight></codeline>
<codeline lineno="766"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="767"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="771"><highlight class="normal"></highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_MOON:</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_MOON;</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_MOON;</highlight></codeline>
<codeline lineno="775"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_MOON;</highlight></codeline>
<codeline lineno="776"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_MARS:</highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_MARS;</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_MARS;</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_MARS;</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="787"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="788"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="791"><highlight class="normal"></highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_JUPITER:</highlight></codeline>
<codeline lineno="793"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_JUPITER;</highlight></codeline>
<codeline lineno="794"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_JUPITER;</highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_JUPITER;</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="798"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="799"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="801"><highlight class="normal"></highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_URANUS:</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_URANUS;</highlight></codeline>
<codeline lineno="804"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_URANUS;</highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_URANUS;</highlight></codeline>
<codeline lineno="806"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="807"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="808"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="809"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="810"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="811"><highlight class="normal"></highlight></codeline>
<codeline lineno="812"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_NEPTUNE:</highlight></codeline>
<codeline lineno="813"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_NEPTUNE;</highlight></codeline>
<codeline lineno="814"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_NEPTUNE;</highlight></codeline>
<codeline lineno="815"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_NEPTUNE;</highlight></codeline>
<codeline lineno="816"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="817"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="818"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="819"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="820"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="821"><highlight class="normal"></highlight></codeline>
<codeline lineno="822"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_PLUTO:</highlight></codeline>
<codeline lineno="823"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">case</highlight><highlight class="normal"><sp/>CELESTIAL_SUN:</highlight></codeline>
<codeline lineno="824"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="825"><highlight class="normal"></highlight></codeline>
<codeline lineno="826"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">default</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="827"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mu<sp/><sp/>=<sp/>MU_EARTH;</highlight></codeline>
<codeline lineno="828"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>req<sp/>=<sp/>REQ_EARTH;</highlight></codeline>
<codeline lineno="829"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J2<sp/><sp/>=<sp/>J2_EARTH;</highlight></codeline>
<codeline lineno="830"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J3<sp/><sp/>=<sp/>J3_EARTH;</highlight></codeline>
<codeline lineno="831"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J4<sp/><sp/>=<sp/>J4_EARTH;</highlight></codeline>
<codeline lineno="832"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J5<sp/><sp/>=<sp/>J5_EARTH;</highlight></codeline>
<codeline lineno="833"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>J6<sp/><sp/>=<sp/>J6_EARTH;</highlight></codeline>
<codeline lineno="834"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="835"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="837"><highlight class="normal"></highlight></codeline>
<codeline lineno="838"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculate<sp/>the<sp/>J<sp/>perturbations<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="839"><highlight class="normal"><sp/><sp/><sp/><sp/>x<sp/>=<sp/>rvec[0];</highlight></codeline>
<codeline lineno="840"><highlight class="normal"><sp/><sp/><sp/><sp/>y<sp/>=<sp/>rvec[1];</highlight></codeline>
<codeline lineno="841"><highlight class="normal"><sp/><sp/><sp/><sp/>z<sp/>=<sp/>rvec[2];</highlight></codeline>
<codeline lineno="842"><highlight class="normal"><sp/><sp/><sp/><sp/>r<sp/>=<sp/>v3Norm(rvec);</highlight></codeline>
<codeline lineno="843"><highlight class="normal"></highlight></codeline>
<codeline lineno="844"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Error<sp/>Checking<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="845"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">((num<sp/>&lt;<sp/>2)<sp/>||<sp/>(num<sp/>&gt;<sp/>6))<sp/>{</highlight></codeline>
<codeline lineno="846"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BSK_PRINT(MSG_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;jPerturb()<sp/>received<sp/>num<sp/>=<sp/>%d.<sp/>The<sp/>value<sp/>of<sp/>num<sp/>should<sp/>be<sp/>2<sp/>&lt;=<sp/>num<sp/>&lt;=<sp/>6.&quot;</highlight><highlight class="normal">,<sp/>num);</highlight></codeline>
<codeline lineno="847"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set(NAN,<sp/>NAN,<sp/>NAN,<sp/>ajtot);</highlight></codeline>
<codeline lineno="848"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="849"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="850"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Calculating<sp/>the<sp/>total<sp/>acceleration<sp/>based<sp/>on<sp/>user<sp/>input<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="852"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&gt;=<sp/>2)<sp/>{</highlight></codeline>
<codeline lineno="853"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set((1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0))<sp/>*<sp/>(x<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="854"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0))<sp/>*<sp/>(y<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="855"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0))<sp/>*<sp/>(z<sp/>/<sp/>r),<sp/>ajtot);</highlight></codeline>
<codeline lineno="856"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(-3.0<sp/>/<sp/>2.0<sp/>*<sp/>J2<sp/>*<sp/>(mu<sp/>/<sp/>pow(r,<sp/>2.0))*pow(req<sp/>/<sp/>r,<sp/>2.0),<sp/>ajtot,<sp/>ajtot);</highlight></codeline>
<codeline lineno="857"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="858"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&gt;=<sp/>3)<sp/>{</highlight></codeline>
<codeline lineno="859"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set(5.0<sp/>*<sp/>(7.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>3.0)<sp/>-<sp/>3.0<sp/>*<sp/>(z<sp/>/<sp/>r))<sp/>*<sp/>(x<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="860"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>5.0<sp/>*<sp/>(7.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>3.0)<sp/>-<sp/>3.0<sp/>*<sp/>(z<sp/>/<sp/>r))<sp/>*<sp/>(y<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="861"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-3.0<sp/>*<sp/>(10.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0)<sp/>-<sp/>(35.0<sp/>/<sp/>3.0)*pow(z<sp/>/<sp/>r,<sp/>4.0)<sp/>-<sp/>1.0),<sp/>temp);</highlight></codeline>
<codeline lineno="862"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(1.0<sp/>/<sp/>2.0<sp/>*<sp/>J3<sp/>*<sp/>(mu<sp/>/<sp/>pow(r,<sp/>2.0))*pow(req<sp/>/<sp/>r,<sp/>3.0),<sp/>temp,<sp/>temp2);</highlight></codeline>
<codeline lineno="863"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Add(ajtot,<sp/>temp2,<sp/>ajtot);</highlight></codeline>
<codeline lineno="864"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="865"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&gt;=<sp/>4)<sp/>{</highlight></codeline>
<codeline lineno="866"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set((3.0<sp/>-<sp/>42.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0)<sp/>+<sp/>63.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0))<sp/>*<sp/>(x<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="867"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(3.0<sp/>-<sp/>42.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0)<sp/>+<sp/>63.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0))<sp/>*<sp/>(y<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="868"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(15.0<sp/>-<sp/>70.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2)<sp/>+<sp/>63.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0))<sp/>*<sp/>(z<sp/>/<sp/>r),<sp/>temp);</highlight></codeline>
<codeline lineno="869"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(5.0<sp/>/<sp/>8.0<sp/>*<sp/>J4<sp/>*<sp/>(mu<sp/>/<sp/>pow(r,<sp/>2.0))*pow(req<sp/>/<sp/>r,<sp/>4.0),<sp/>temp,<sp/>temp2);</highlight></codeline>
<codeline lineno="870"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Add(ajtot,<sp/>temp2,<sp/>ajtot);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="872"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&gt;=<sp/>5)<sp/>{</highlight></codeline>
<codeline lineno="873"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set(3.0<sp/>*<sp/>(35.0<sp/>*<sp/>(z<sp/>/<sp/>r)<sp/>-<sp/>210.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>3.0)<sp/>+<sp/>231.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>5.0))<sp/>*<sp/>(x<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="874"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>3.0<sp/>*<sp/>(35.0<sp/>*<sp/>(z<sp/>/<sp/>r)<sp/>-<sp/>210.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>3.0)<sp/>+<sp/>231.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>5.0))<sp/>*<sp/>(y<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="875"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-(15.0<sp/>-<sp/>315.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0)<sp/>+<sp/>945.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0)<sp/>-<sp/>693.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>6.0)),<sp/>temp);</highlight></codeline>
<codeline lineno="876"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(1.0<sp/>/<sp/>8.0<sp/>*<sp/>J5<sp/>*<sp/>(mu<sp/>/<sp/>pow(r,<sp/>2.0))*pow(req<sp/>/<sp/>r,<sp/>5.0),<sp/>temp,<sp/>temp2);</highlight></codeline>
<codeline lineno="877"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Add(ajtot,<sp/>temp2,<sp/>ajtot);</highlight></codeline>
<codeline lineno="878"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="879"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(num<sp/>&gt;=<sp/>6)<sp/>{</highlight></codeline>
<codeline lineno="880"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Set((35.0<sp/>-<sp/>945.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2)<sp/>+<sp/>3465.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0)<sp/>-<sp/>3003.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>6.0))<sp/>*<sp/>(x<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="881"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(35.0<sp/>-<sp/>945.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0)<sp/>+<sp/>3465.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0)<sp/>-<sp/>3003.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>6.0))<sp/>*<sp/>(y<sp/>/<sp/>r),</highlight></codeline>
<codeline lineno="882"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-(3003.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>6.0)<sp/>-<sp/>4851.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>4.0)<sp/>+<sp/>2205.0<sp/>*<sp/>pow(z<sp/>/<sp/>r,<sp/>2.0)<sp/>-<sp/>245.0)<sp/>*<sp/>(z<sp/>/<sp/>r),<sp/>temp);</highlight></codeline>
<codeline lineno="883"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(-1.0<sp/>/<sp/>16.0<sp/>*<sp/>J6<sp/>*<sp/>(mu<sp/>/<sp/>pow(r,<sp/>2.0))*pow(req<sp/>/<sp/>r,<sp/>6.0),<sp/>temp,<sp/>temp2);</highlight></codeline>
<codeline lineno="884"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Add(ajtot,<sp/>temp2,<sp/>ajtot);</highlight></codeline>
<codeline lineno="885"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="886"><highlight class="normal">}</highlight></codeline>
<codeline lineno="887"><highlight class="normal"></highlight></codeline>
<codeline lineno="909"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>solarRad(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>m,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*sunvec,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*arvec)</highlight></codeline>
<codeline lineno="910"><highlight class="normal">{</highlight></codeline>
<codeline lineno="911"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>flux;</highlight></codeline>
<codeline lineno="912"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c;</highlight></codeline>
<codeline lineno="913"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Cr;</highlight></codeline>
<codeline lineno="914"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sundist;</highlight></codeline>
<codeline lineno="915"><highlight class="normal"></highlight></codeline>
<codeline lineno="916"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Solar<sp/>Radiation<sp/>Flux<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="917"><highlight class="normal"><sp/><sp/><sp/><sp/>flux<sp/>=<sp/>1372.5398;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Watts/m^2<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="918"><highlight class="normal"></highlight></codeline>
<codeline lineno="919"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Speed<sp/>of<sp/>light<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="920"><highlight class="normal"><sp/><sp/><sp/><sp/>c<sp/>=<sp/>299792458.;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>m/s<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="921"><highlight class="normal"></highlight></codeline>
<codeline lineno="922"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Radiation<sp/>pressure<sp/>coefficient<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="923"><highlight class="normal"><sp/><sp/><sp/><sp/>Cr<sp/>=<sp/>1.3;</highlight></codeline>
<codeline lineno="924"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Magnitude<sp/>of<sp/>position<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/>sundist<sp/>=<sp/>v3Norm(sunvec);<sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>AU<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="927"><highlight class="normal"></highlight></codeline>
<codeline lineno="928"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Computing<sp/>the<sp/>acceleration<sp/>vector<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="929"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale((-Cr<sp/>*<sp/>A<sp/>*<sp/>flux)<sp/>/<sp/>(m<sp/>*<sp/>c<sp/>*<sp/>pow(sundist,<sp/>3))<sp/>/<sp/>1000.,<sp/>sunvec,<sp/>arvec);</highlight></codeline>
<codeline lineno="930"><highlight class="normal">}</highlight></codeline>
<codeline lineno="931"><highlight class="normal"></highlight></codeline>
<codeline lineno="933"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clMeanOscMap(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>req,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>J2,<sp/>classicElements<sp/>*elements,<sp/>classicElements<sp/>*elements_p,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sgn)<sp/>{</highlight></codeline>
<codeline lineno="934"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Classical<sp/>orbital<sp/>elements<sp/>=<sp/>(a,e,i,Omega,omega,f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="935"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First-order<sp/>J2<sp/>Mapping<sp/>Between<sp/>Mean<sp/>and<sp/>Osculating<sp/>Orbital<sp/>Elements</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="936"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sgn=1:mean2osc,<sp/>sgn=-1:osc2mean</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="937"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Analytical<sp/>Mechanics<sp/>of<sp/>Space<sp/>Systems</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="938"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Hanspeter<sp/>Schaub,<sp/>John<sp/>L.<sp/>Junkins,<sp/>4th<sp/>edition.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="939"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>[m]<sp/>or<sp/>[km]<sp/>should<sp/>be<sp/>the<sp/>same<sp/>both<sp/>for<sp/>req<sp/>and<sp/>elements-&gt;a</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="940"><highlight class="normal"></highlight></codeline>
<codeline lineno="941"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/><sp/><sp/><sp/><sp/>=<sp/>elements-&gt;a;</highlight></codeline>
<codeline lineno="942"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e<sp/><sp/><sp/><sp/><sp/>=<sp/>elements-&gt;e;</highlight></codeline>
<codeline lineno="943"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>i<sp/><sp/><sp/><sp/><sp/>=<sp/>elements-&gt;i;</highlight></codeline>
<codeline lineno="944"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Omega<sp/>=<sp/>elements-&gt;Omega;</highlight></codeline>
<codeline lineno="945"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omega<sp/>=<sp/>elements-&gt;omega;</highlight></codeline>
<codeline lineno="946"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>f<sp/><sp/><sp/><sp/><sp/>=<sp/>elements-&gt;f;</highlight></codeline>
<codeline lineno="947"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E<sp/><sp/><sp/><sp/><sp/>=<sp/>f2E(f,<sp/>e);</highlight></codeline>
<codeline lineno="948"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M<sp/><sp/><sp/><sp/><sp/>=<sp/>E2M(E,<sp/>e);</highlight></codeline>
<codeline lineno="949"><highlight class="normal"></highlight></codeline>
<codeline lineno="950"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma2<sp/>=<sp/>sgn<sp/>*<sp/>J2<sp/>/<sp/>2.0<sp/>*<sp/>pow((req<sp/>/<sp/>a),<sp/>2.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.1),(F.2)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>eta<sp/>=<sp/>sqrt(1.0<sp/>-<sp/>pow(e,<sp/>2.0));</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gamma2p<sp/>=<sp/>gamma2<sp/>/<sp/>pow(eta,<sp/>4.0);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(F.3)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a_r<sp/>=<sp/>(1.0<sp/>+<sp/>e<sp/>*<sp/>cos(f))<sp/>/<sp/>pow(eta,<sp/>2.0);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.6)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="955"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ap<sp/>=<sp/>a<sp/>+<sp/>a<sp/>*<sp/>gamma2<sp/>*<sp/>((3.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>-<sp/>1.0)<sp/>*<sp/>(pow(a_r,<sp/>3.0)<sp/>-<sp/>1.0<sp/>/<sp/>pow(eta,<sp/>3.0))</highlight></codeline>
<codeline lineno="956"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>3.0<sp/>*<sp/>(1.0<sp/>-<sp/>pow(cos(i),<sp/>2.0))<sp/>*<sp/>pow(a_r,<sp/>3.0)<sp/>*<sp/>cos(2.0<sp/>*<sp/>omega<sp/>+<sp/>2.0<sp/>*<sp/>f));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.7)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="957"><highlight class="normal"></highlight></codeline>
<codeline lineno="958"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>de1<sp/>=<sp/>gamma2p<sp/>/<sp/>8.0<sp/>*<sp/>e<sp/>*<sp/>pow(eta,<sp/>2.0)<sp/>*<sp/>(1.0<sp/>-<sp/>11.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>-<sp/>40.0<sp/>*<sp/>pow(cos(i),<sp/>4.0)</highlight></codeline>
<codeline lineno="959"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)))<sp/>*<sp/>cos(2.0<sp/>*<sp/>omega);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.8)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="960"><highlight class="normal"></highlight></codeline>
<codeline lineno="961"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>de<sp/>=<sp/>de1<sp/>+<sp/>pow(eta,<sp/>2.0)<sp/>/<sp/>2.0<sp/>*<sp/>(gamma2<sp/>*<sp/>((3.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>-<sp/>1.0)<sp/>/<sp/>pow(eta,<sp/>6.0)<sp/>*<sp/>(e<sp/>*<sp/>eta<sp/>+<sp/>e<sp/>/<sp/>(1.0<sp/>+<sp/>eta)<sp/>+<sp/>3.0<sp/>*<sp/>cos(f)</highlight></codeline>
<codeline lineno="962"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>3.0<sp/>*<sp/>e<sp/>*<sp/>pow(cos(f),<sp/>2.0)<sp/>+<sp/>pow(e,<sp/>2.0)<sp/>*<sp/>pow(cos(f),<sp/>3.0))<sp/>+<sp/>3.0<sp/>*<sp/>(1.0<sp/>-<sp/>pow(cos(i),<sp/>2.0))<sp/>/<sp/>pow(eta,<sp/>6.0)<sp/>*<sp/>(e<sp/>+<sp/>3.0<sp/>*<sp/>cos(f)</highlight></codeline>
<codeline lineno="963"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>3<sp/>*<sp/>e<sp/>*<sp/>pow(cos(f),<sp/>2)<sp/>+<sp/>pow(e,<sp/>2)<sp/>*<sp/>pow(cos(f),<sp/>3))<sp/>*<sp/>cos(2<sp/>*<sp/>omega<sp/>+<sp/>2<sp/>*<sp/>f))</highlight></codeline>
<codeline lineno="964"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>gamma2p<sp/>*<sp/>(1.0<sp/>-<sp/>pow(cos(i),<sp/>2.0))<sp/>*<sp/>(3.0<sp/>*<sp/>cos(2.0<sp/>*<sp/>omega<sp/>+<sp/>f)<sp/>+<sp/>cos(2.0<sp/>*<sp/>omega<sp/>+<sp/>3.0<sp/>*<sp/>f)));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.9)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="965"><highlight class="normal"></highlight></codeline>
<codeline lineno="966"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>di<sp/>=<sp/>-e<sp/>*<sp/>de1<sp/>/<sp/>pow(eta,<sp/>2.0)<sp/>/<sp/>tan(i)</highlight></codeline>
<codeline lineno="967"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>gamma2p<sp/>/<sp/>2.0<sp/>*<sp/>cos(i)<sp/>*<sp/>sqrt(1.0<sp/>-<sp/>pow(cos(i),<sp/>2.0))<sp/>*<sp/>(3.0<sp/>*<sp/>cos(2.0<sp/>*<sp/>omega<sp/>+<sp/>2.0<sp/>*<sp/>f)<sp/>+<sp/>3.0<sp/>*<sp/>e<sp/>*<sp/>cos(2.0<sp/>*<sp/>omega<sp/>+<sp/>f)</highlight></codeline>
<codeline lineno="968"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>e<sp/>*<sp/>cos(2.0<sp/>*<sp/>omega<sp/>+<sp/>3.0<sp/>*<sp/>f));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.10)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="969"><highlight class="normal"></highlight></codeline>
<codeline lineno="970"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MpopOp<sp/>=<sp/>M<sp/>+<sp/>omega<sp/>+<sp/>Omega<sp/>+<sp/>gamma2p<sp/>/<sp/>8.0<sp/>*<sp/>pow(eta,<sp/>3.0)<sp/>*<sp/>(1.0<sp/>-<sp/>11.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>-<sp/>40.0<sp/>*<sp/>pow(cos(i),<sp/>4.0)</highlight></codeline>
<codeline lineno="971"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>/<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)))<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega)<sp/>-<sp/>gamma2p<sp/>/<sp/>16.0<sp/>*<sp/>(2.0<sp/>+<sp/>pow(e,<sp/>2.0)<sp/>-<sp/>11.0<sp/>*<sp/>(2.0<sp/>+<sp/>3.0<sp/>*<sp/>pow(e,<sp/>2.0))</highlight></codeline>
<codeline lineno="972"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>-<sp/>40.0<sp/>*<sp/>(2.0<sp/>+<sp/>5.0<sp/>*<sp/>pow(e,<sp/>2.0))<sp/>*<sp/>pow(cos(i),<sp/>4.0)<sp/>/<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0))<sp/>-<sp/>400.0<sp/>*<sp/>pow(e,<sp/>2.0)</highlight></codeline>
<codeline lineno="973"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>pow(cos(i),<sp/>6.0)<sp/>/<sp/>pow(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0),<sp/>2.0))<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega)<sp/>+<sp/>gamma2p<sp/>/<sp/>4.0<sp/>*<sp/>(-6.0<sp/>*<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0))</highlight></codeline>
<codeline lineno="974"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(f<sp/>-<sp/>M<sp/>+<sp/>e<sp/>*<sp/>sin(f))<sp/>+<sp/>(3.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0))<sp/>*<sp/>(3.0<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>2.0<sp/>*<sp/>f)<sp/>+<sp/>3.0<sp/>*<sp/>e<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>f)<sp/>+<sp/>e</highlight></codeline>
<codeline lineno="975"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>3.0<sp/>*<sp/>f)))<sp/>-<sp/>gamma2p<sp/>/<sp/>8.0<sp/>*<sp/>pow(e,<sp/>2.0)<sp/>*<sp/>cos(i)<sp/>*<sp/>(11.0<sp/>+<sp/>80.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>/<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0))</highlight></codeline>
<codeline lineno="976"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>200.0<sp/>*<sp/>pow(cos(i),<sp/>4.0)<sp/>/<sp/>pow(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0),<sp/>2.0))<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega)<sp/>-<sp/>gamma2p<sp/>/<sp/>2.0<sp/>*<sp/>cos(i)</highlight></codeline>
<codeline lineno="977"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(6.0<sp/>*<sp/>(f<sp/>-<sp/>M<sp/>+<sp/>e<sp/>*<sp/>sin(f))<sp/>-<sp/>3.0<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>2.0<sp/>*<sp/>f)<sp/>-<sp/>3.0<sp/>*<sp/>e<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>f)<sp/>-<sp/>e<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>3.0<sp/>*<sp/>f));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.11)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="978"><highlight class="normal"></highlight></codeline>
<codeline lineno="979"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>edM<sp/>=<sp/>gamma2p<sp/>/<sp/>8.0<sp/>*<sp/>e<sp/>*<sp/>pow(eta,<sp/>3.0)<sp/>*<sp/>(1.0<sp/>-<sp/>11.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)</highlight></codeline>
<codeline lineno="980"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>40.0<sp/>*<sp/>pow(cos(i),<sp/>4.0)<sp/>/<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)))<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega)</highlight></codeline>
<codeline lineno="981"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-<sp/>gamma2p<sp/>/<sp/>4.0<sp/>*<sp/>pow(eta,<sp/>3.0)<sp/>*<sp/>(2.0<sp/>*<sp/>(3.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>-<sp/>1.0)<sp/>*<sp/>(pow(a_r<sp/>*<sp/>eta,<sp/>2.0)<sp/>+<sp/>a_r<sp/>+<sp/>1.0)<sp/>*<sp/>sin(f)</highlight></codeline>
<codeline lineno="982"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>3.0<sp/>*<sp/>(1.0<sp/>-<sp/>pow(cos(i),<sp/>2.0))<sp/>*<sp/>((-pow(a_r<sp/>*<sp/>eta,<sp/>2.0)<sp/>-<sp/>a_r<sp/>+<sp/>1.0)<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>f)<sp/>+<sp/>(pow(a_r<sp/>*<sp/>eta,<sp/>2.0)<sp/>+<sp/>a_r</highlight></codeline>
<codeline lineno="983"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>1.0<sp/>/<sp/>3.0)<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>3.0<sp/>*<sp/>f)));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.12)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="984"><highlight class="normal"></highlight></codeline>
<codeline lineno="985"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dOmega<sp/>=<sp/>-gamma2p<sp/>/<sp/>8.0<sp/>*<sp/>pow(e,<sp/>2.0)<sp/>*<sp/>cos(i)<sp/>*<sp/>(11.0<sp/>+<sp/>80.0<sp/>*<sp/>pow(cos(i),<sp/>2.0)<sp/>/<sp/>(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0))</highlight></codeline>
<codeline lineno="986"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>200.0<sp/>*<sp/>pow(cos(i),<sp/>4.0)<sp/>/<sp/>pow(1.0<sp/>-<sp/>5.0<sp/>*<sp/>pow(cos(i),<sp/>2.0),<sp/>2.0))<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega)<sp/>-<sp/>gamma2p<sp/>/<sp/>2.0<sp/>*<sp/>cos(i)</highlight></codeline>
<codeline lineno="987"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*<sp/>(6.0<sp/>*<sp/>(f<sp/>-<sp/>M<sp/>+<sp/>e<sp/>*<sp/>sin(f))<sp/>-<sp/>3.0<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>2.0<sp/>*<sp/>f)<sp/>-<sp/>3.0<sp/>*<sp/>e<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>f)<sp/>-<sp/>e<sp/>*<sp/>sin(2.0<sp/>*<sp/>omega<sp/>+<sp/>3.0<sp/>*<sp/>f));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.13)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="988"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d1<sp/>=<sp/>(e<sp/>+<sp/>de)<sp/>*<sp/>sin(M)<sp/>+<sp/>edM<sp/>*<sp/>cos(M);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.14)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="990"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d2<sp/>=<sp/>(e<sp/>+<sp/>de)<sp/>*<sp/>cos(M)<sp/>-<sp/>edM<sp/>*<sp/>sin(M);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.15)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="991"><highlight class="normal"></highlight></codeline>
<codeline lineno="992"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mp<sp/>=<sp/>atan2(d1,<sp/>d2);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(F.16)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="993"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ep<sp/>=<sp/>sqrt(d1<sp/>*<sp/>d1<sp/>+<sp/>d2<sp/>*<sp/>d2);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.17)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="994"><highlight class="normal"></highlight></codeline>
<codeline lineno="995"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d3<sp/>=<sp/>(sin(i<sp/>/<sp/>2.0)<sp/>+<sp/>cos(i<sp/>/<sp/>2.0)<sp/>*<sp/>di<sp/>/<sp/>2.0)<sp/>*<sp/>sin(Omega)<sp/>+<sp/>sin(i<sp/>/<sp/>2.0)<sp/>*<sp/>dOmega<sp/>*<sp/>cos(Omega);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.18)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="996"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d4<sp/>=<sp/>(sin(i<sp/>/<sp/>2.0)<sp/>+<sp/>cos(i<sp/>/<sp/>2.0)<sp/>*<sp/>di<sp/>/<sp/>2.0)<sp/>*<sp/>cos(Omega)<sp/>-<sp/>sin(i<sp/>/<sp/>2.0)<sp/>*<sp/>dOmega<sp/>*<sp/>sin(Omega);<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.19)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="997"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Omegap<sp/>=<sp/>atan2(d3,<sp/>d4);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(F.20)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="999"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>ip<sp/>=<sp/>2.0<sp/>*<sp/>safeAsin(sqrt(d3<sp/>*<sp/>d3<sp/>+<sp/>d4<sp/>*<sp/>d4));<sp/><sp/></highlight><highlight class="comment">//<sp/>(F.21)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1000"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omegap<sp/>=<sp/>MpopOp<sp/>-<sp/>Mp<sp/>-<sp/>Omegap;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>(F.22)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1001"><highlight class="normal"></highlight></codeline>
<codeline lineno="1002"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Ep<sp/>=<sp/>M2E(Mp,<sp/>ep);</highlight></codeline>
<codeline lineno="1003"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>fp<sp/>=<sp/>E2f(Ep,<sp/>ep);</highlight></codeline>
<codeline lineno="1004"><highlight class="normal"></highlight></codeline>
<codeline lineno="1005"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_p-&gt;a<sp/>=<sp/>ap;</highlight></codeline>
<codeline lineno="1006"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_p-&gt;e<sp/>=<sp/>ep;</highlight></codeline>
<codeline lineno="1007"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_p-&gt;i<sp/>=<sp/>ip;</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_p-&gt;Omega<sp/>=<sp/>Omegap;</highlight></codeline>
<codeline lineno="1009"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_p-&gt;omega<sp/>=<sp/>omegap;</highlight></codeline>
<codeline lineno="1010"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_p-&gt;f<sp/>=<sp/>fp;</highlight></codeline>
<codeline lineno="1011"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1012"><highlight class="normal">}</highlight></codeline>
<codeline lineno="1013"><highlight class="normal"></highlight></codeline>
<codeline lineno="1015"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>clElem2eqElem(classicElements<sp/>*elements_cl,<sp/><ref refid="structequinoctial_elements" kindref="compound">equinoctialElements</ref><sp/>*elements_eq)<sp/>{</highlight></codeline>
<codeline lineno="1016"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1017"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>from<sp/>classical<sp/>orbital<sp/>elements<sp/>(a,e,i,Omega,omega,f)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1018"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>to<sp/>equinoctial<sp/>orbital<sp/>elements<sp/>(a,P1,P2,Q1,Q2,l,L)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1019"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1a920a62bff1062b7a1e9608a0f471b01b" kindref="member">a</ref><sp/><sp/>=<sp/>elements_cl-&gt;a;</highlight></codeline>
<codeline lineno="1020"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1a247c912aa5c4ecfa7aeca054f5481384" kindref="member">P1</ref><sp/>=<sp/>elements_cl-&gt;e<sp/>*<sp/>sin(elements_cl-&gt;Omega<sp/>+<sp/>elements_cl-&gt;omega);</highlight></codeline>
<codeline lineno="1021"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1ab94eae0c75b6f7e1bcdb5e61462d8848" kindref="member">P2</ref><sp/>=<sp/>elements_cl-&gt;e<sp/>*<sp/>cos(elements_cl-&gt;Omega<sp/>+<sp/>elements_cl-&gt;omega);</highlight></codeline>
<codeline lineno="1022"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1a5b3d8b84a927e930d9ae9a68d3153033" kindref="member">Q1</ref><sp/>=<sp/>tan(elements_cl-&gt;i<sp/>/<sp/>2.0)<sp/>*<sp/>sin(elements_cl-&gt;Omega);</highlight></codeline>
<codeline lineno="1023"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1a3355a5c52b4923065519acf8e8468882" kindref="member">Q2</ref><sp/>=<sp/>tan(elements_cl-&gt;i<sp/>/<sp/>2.0)<sp/>*<sp/>cos(elements_cl-&gt;Omega);</highlight></codeline>
<codeline lineno="1024"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>E<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>f2E(elements_cl-&gt;f,<sp/>elements_cl-&gt;e);</highlight></codeline>
<codeline lineno="1025"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>M<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>=<sp/>E2M(E,<sp/>elements_cl-&gt;e);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1a18f6d0b81322a11da92ac0d915d6b389" kindref="member">l</ref><sp/><sp/>=<sp/>elements_cl-&gt;Omega<sp/>+<sp/>elements_cl-&gt;omega<sp/>+<sp/>M;</highlight></codeline>
<codeline lineno="1027"><highlight class="normal"><sp/><sp/><sp/><sp/>elements_eq-&gt;<ref refid="structequinoctial_elements_1ae0dbf5ed8452ef2afbba3a3acd09c9d3" kindref="member">L</ref><sp/><sp/>=<sp/>elements_cl-&gt;Omega<sp/>+<sp/>elements_cl-&gt;omega<sp/>+<sp/>elements_cl-&gt;f;</highlight></codeline>
<codeline lineno="1028"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="1029"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/architecture/utilities/orbitalMotion.c"/>
  </compounddef>
</doxygen>
