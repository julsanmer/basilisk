<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="reaction_wheel_state_effector_8cpp" kind="file" language="C++">
    <compoundname>reactionWheelStateEffector.cpp</compoundname>
    <includes refid="reaction_wheel_state_effector_8h" local="yes">reactionWheelStateEffector.h</includes>
    <includes local="yes">architecture/utilities/avsEigenSupport.h</includes>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cmath</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/reactionWheels/reactionWheelStateEffector.cpp</label>
        <link refid="reaction_wheel_state_effector_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>reactionWheelStateEffector.h</label>
        <link refid="reaction_wheel_state_effector_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Eigen/Dense</label>
      </node>
      <node id="9">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="15">
        <label>architecture/messaging/messaging.h</label>
      </node>
      <node id="14">
        <label>architecture/msgPayloadDefC/ArrayMotorTorqueMsgPayload.h</label>
      </node>
      <node id="11">
        <label>architecture/msgPayloadDefC/RWCmdMsgPayload.h</label>
      </node>
      <node id="13">
        <label>architecture/msgPayloadDefC/RWConfigLogMsgPayload.h</label>
      </node>
      <node id="10">
        <label>architecture/msgPayloadDefC/RWSpeedMsgPayload.h</label>
      </node>
      <node id="12">
        <label>architecture/msgPayloadDefCpp/RWConfigMsgPayload.h</label>
      </node>
      <node id="17">
        <label>architecture/utilities/avsEigenMRP.h</label>
      </node>
      <node id="18">
        <label>architecture/utilities/avsEigenSupport.h</label>
      </node>
      <node id="16">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="8">
        <label>architecture/utilities/macroDefinitions.h</label>
      </node>
      <node id="21">
        <label>cmath</label>
      </node>
      <node id="19">
        <label>cstring</label>
      </node>
      <node id="20">
        <label>iostream</label>
      </node>
      <node id="4">
        <label>simulation/dynamics/_GeneralModuleFiles/dynParamManager.h</label>
      </node>
      <node id="5">
        <label>simulation/dynamics/_GeneralModuleFiles/dynamicEffector.h</label>
      </node>
      <node id="6">
        <label>simulation/dynamics/_GeneralModuleFiles/dynamicObject.h</label>
      </node>
      <node id="3">
        <label>simulation/dynamics/_GeneralModuleFiles/stateEffector.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;reactionWheelStateEffector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/avsEigenSupport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/avsEigenSupport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal">ReactionWheelStateEffector::ReactionWheelStateEffector()</highlight></codeline>
<codeline lineno="29"><highlight class="normal">{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/>CallCounts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/>prevCommandTime<sp/>=<sp/>0xFFFFFFFFFFFFFFFF;</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>effProps.mEff<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>effProps.IEffPntB_B.setZero();</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>effProps.rEff_CB_B.setZero();</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>effProps.IEffPrimePntB_B.setZero();</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>effProps.rEffPrime_CB_B.setZero();</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9f2bb45f608d835611fcde6cc398e1bc" kindref="member">nameOfReactionWheelOmegasState</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reactionWheelOmegas&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a803c3b0f442fa78a2d99865487856190" kindref="member">nameOfReactionWheelThetasState</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;reactionWheelThetas&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="43"><highlight class="normal">}</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal">ReactionWheelStateEffector::~ReactionWheelStateEffector()</highlight></codeline>
<codeline lineno="47"><highlight class="normal">{</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=0;<sp/>c&lt;this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae1bbb2a58f34c8acda3f84c336902113" kindref="member">rwOutMsgs</ref>.size();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae1bbb2a58f34c8acda3f84c336902113" kindref="member">rwOutMsgs</ref>.at(c));</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="52"><highlight class="normal">}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a466eb3639dd5962a074c353fa5f1748c" kindref="member">ReactionWheelStateEffector::linkInStates</ref>(DynParamManager&amp;<sp/>statesIn)</highlight></codeline>
<codeline lineno="55"><highlight class="normal">{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;hubSigma<sp/>=<sp/>statesIn.getStateObject(</highlight><highlight class="stringliteral">&quot;hubSigma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;hubOmega<sp/>=<sp/>statesIn.getStateObject(</highlight><highlight class="stringliteral">&quot;hubOmega&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;hubVelocity<sp/>=<sp/>statesIn.getStateObject(</highlight><highlight class="stringliteral">&quot;hubVelocity&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;g_N<sp/>=<sp/>statesIn.getPropertyReference(</highlight><highlight class="stringliteral">&quot;g_N&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1aa277a172359ce3f0d4afc329c4bfd12c" kindref="member">ReactionWheelStateEffector::registerStates</ref>(DynParamManager&amp;<sp/>states)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9f42a0cb3d8be2c4e9db504b59a5064c" kindref="member">numRW</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>RWItp;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*<sp/>RWIt;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>omegasForInit(this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.size(),1);</highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RWItp=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>RWItp!=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>RWItp++)<sp/>{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt<sp/>=<sp/>*RWItp;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple<sp/>||<sp/>RWIt-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled)<sp/>{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref>++;</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omegasForInit(RWItp<sp/>-<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin(),<sp/>0)<sp/>=<sp/>RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9f42a0cb3d8be2c4e9db504b59a5064c" kindref="member">numRW</ref>++;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;OmegasState<sp/>=<sp/>states.registerState((uint32_t)<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9f42a0cb3d8be2c4e9db504b59a5064c" kindref="member">numRW</ref>,<sp/>1,<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9f2bb45f608d835611fcde6cc398e1bc" kindref="member">nameOfReactionWheelOmegasState</ref>);</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;thetasState<sp/>=<sp/>states.registerState((uint32_t)<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref>,<sp/>1,<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a803c3b0f442fa78a2d99865487856190" kindref="member">nameOfReactionWheelThetasState</ref>);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;OmegasState-&gt;setState(omegasForInit);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>thetasForZeroing(this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref>,1);</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetasForZeroing.setZero();</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;thetasState-&gt;setState(thetasForZeroing);</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="98"><highlight class="normal">}</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a396fbd883a6cc91947ca13f9dabbdac6" kindref="member">ReactionWheelStateEffector::updateEffectorMassProps</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime)</highlight></codeline>
<codeline lineno="101"><highlight class="normal">{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Zero<sp/>the<sp/>mass<sp/>props<sp/>information<sp/>because<sp/>these<sp/>will<sp/>be<sp/>accumulated<sp/>during<sp/>this<sp/>call</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.mEff<sp/>=<sp/>0.;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.rEff_CB_B.setZero();</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.IEffPntB_B.setZero();</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.rEffPrime_CB_B.setZero();</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.IEffPrimePntB_B.setZero();</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thetaCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>RWItp;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*RWIt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RWItp=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>RWItp!=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>RWItp++)</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt<sp/>=<sp/>*RWItp;</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;Omega<sp/>=<sp/>this-&gt;OmegasState-&gt;getState()(RWItp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin(),<sp/>0);</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled)<sp/>{</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;theta<sp/>=<sp/>this-&gt;thetasState-&gt;getState()(thetaCount,<sp/>0);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_WW0<sp/>=<sp/>eigenM1(RWIt-&gt;theta);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BW0;</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BW0.col(0)<sp/>=<sp/>RWIt-&gt;gsHat_B;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BW0.col(1)<sp/>=<sp/>RWIt-&gt;w2Hat0_B;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BW0.col(2)<sp/>=<sp/>RWIt-&gt;w3Hat0_B;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BW<sp/>=<sp/>dcm_BW0<sp/>*<sp/>dcm_WW0.transpose();</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;w2Hat_B<sp/>=<sp/>dcm_BW.col(1);</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;w3Hat_B<sp/>=<sp/>dcm_BW.col(2);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>IRWPntWc_W;</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IRWPntWc_W<sp/>&lt;&lt;<sp/>RWIt-&gt;Js,<sp/>0.,<sp/>RWIt-&gt;J13,<sp/>\</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.,<sp/>RWIt-&gt;Jt,<sp/>0.,<sp/>\</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;J13,<sp/>0.,<sp/>RWIt-&gt;Jg;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;IRWPntWc_B<sp/>=<sp/>dcm_BW<sp/>*<sp/>IRWPntWc_W<sp/>*<sp/>dcm_BW.transpose();</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>IPrimeRWPntWc_W;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPrimeRWPntWc_W<sp/>&lt;&lt;<sp/>0.,<sp/>-RWIt-&gt;J13,<sp/>0.,<sp/>\</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-RWIt-&gt;J13,<sp/>0.,<sp/>0.,<sp/>\</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>0.,<sp/>0.,<sp/>0.;</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>IPrimeRWPntWc_W<sp/>*=<sp/>RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;IPrimeRWPntWc_B<sp/>=<sp/>dcm_BW<sp/>*<sp/>IPrimeRWPntWc_W<sp/>*<sp/>dcm_BW.transpose();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;rWcB_B<sp/>=<sp/>RWIt-&gt;rWB_B<sp/>+<sp/>RWIt-&gt;d*RWIt-&gt;w2Hat_B;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;rTildeWcB_B<sp/>=<sp/>eigenTilde(RWIt-&gt;rWcB_B);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;rPrimeWcB_B<sp/>=<sp/>RWIt-&gt;d*RWIt-&gt;Omega*RWIt-&gt;w3Hat_B;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>rPrimeTildeWcB_B<sp/>=<sp/>eigenTilde(RWIt-&gt;rPrimeWcB_B);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.mEff<sp/>+=<sp/>RWIt-&gt;mass;</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.rEff_CB_B<sp/>+=<sp/>RWIt-&gt;mass*RWIt-&gt;rWcB_B;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.IEffPntB_B<sp/>+=<sp/>RWIt-&gt;IRWPntWc_B<sp/>+<sp/>RWIt-&gt;mass*RWIt-&gt;rTildeWcB_B*RWIt-&gt;rTildeWcB_B.transpose();</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.rEffPrime_CB_B<sp/>+=<sp/>RWIt-&gt;mass*RWIt-&gt;rPrimeWcB_B;</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.IEffPrimePntB_B<sp/>+=<sp/>RWIt-&gt;IPrimeRWPntWc_B<sp/>+<sp/>RWIt-&gt;mass*rPrimeTildeWcB_B*RWIt-&gt;rTildeWcB_B.transpose()<sp/>+<sp/>RWIt-&gt;mass*RWIt-&gt;rTildeWcB_B*rPrimeTildeWcB_B.transpose();</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetaCount++;</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple)<sp/>{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;theta<sp/>=<sp/>this-&gt;thetasState-&gt;getState()(thetaCount,<sp/>0);</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_WW0<sp/>=<sp/>eigenM1(RWIt-&gt;theta);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BW0;</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BW0.col(0)<sp/>=<sp/>RWIt-&gt;gsHat_B;</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BW0.col(1)<sp/>=<sp/>RWIt-&gt;w2Hat0_B;</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BW0.col(2)<sp/>=<sp/>RWIt-&gt;w3Hat0_B;</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BW<sp/>=<sp/>dcm_BW0<sp/>*<sp/>dcm_WW0.transpose();</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;w2Hat_B<sp/>=<sp/>dcm_BW.col(1);</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;w3Hat_B<sp/>=<sp/>dcm_BW.col(2);</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetaCount++;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="168"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Need<sp/>to<sp/>divide<sp/>out<sp/>the<sp/>total<sp/>mass<sp/>of<sp/>the<sp/>reaction<sp/>wheels<sp/>from<sp/>rCB_B<sp/>and<sp/>rPrimeCB_B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;effProps.mEff<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.rEff_CB_B<sp/>/=<sp/>this-&gt;effProps.mEff;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;effProps.rEffPrime_CB_B<sp/>/=<sp/>this-&gt;effProps.mEff;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"></highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="176"><highlight class="normal">}</highlight></codeline>
<codeline lineno="177"><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a3e7a46acb25134a8469508e74de585be" kindref="member">ReactionWheelStateEffector::updateContributions</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime,<sp/>BackSubMatrices<sp/>&amp;<sp/>backSubContr,<sp/>Eigen::Vector3d<sp/>sigma_BN,<sp/>Eigen::Vector3d<sp/>omega_BN_B,<sp/>Eigen::Vector3d<sp/>g_N)</highlight></codeline>
<codeline lineno="179"><highlight class="normal">{</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omegaLoc_BN_B;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>tempF;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omegas;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omegaw2;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omegaw3;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dSquared;</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>OmegaSquared;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MRPd<sp/>sigmaBNLocal;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_NB;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>gravityTorquePntW_B;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>gLocal_N;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>g_B;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>gLocal_N<sp/>=<sp/>*this-&gt;g_N;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/>sigmaBNLocal<sp/>=<sp/>(Eigen::Vector3d<sp/>)this-&gt;hubSigma-&gt;getState();</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>dcm_NB<sp/>=<sp/>sigmaBNLocal.toRotationMatrix();</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>dcm_BN<sp/>=<sp/>dcm_NB.transpose();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>g_B<sp/>=<sp/>dcm_BN*gLocal_N;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>omegaLoc_BN_B<sp/>=<sp/>this-&gt;hubOmega-&gt;getState();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>RWItp;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*<sp/>RWIt;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RWItp=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>RWItp!=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>RWItp++)</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt<sp/>=<sp/>*RWItp;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OmegaSquared<sp/>=<sp/>RWIt-&gt;Omega<sp/>*<sp/>RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Determine<sp/>which<sp/>friction<sp/>model<sp/>to<sp/>use<sp/>(if<sp/>starting<sp/>from<sp/>zero<sp/>include<sp/>stribeck)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(RWIt-&gt;Omega)<sp/>&lt;<sp/>0.10*RWIt-&gt;omegaLimitCycle<sp/>&amp;&amp;<sp/>RWIt-&gt;betaStatic<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;frictionStribeck<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>signOfOmega<sp/>=<sp/>((RWIt-&gt;Omega<sp/>&gt;<sp/>0)<sp/>-<sp/>(RWIt-&gt;Omega<sp/>&lt;<sp/>0));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>omegaDot<sp/>=<sp/>RWIt-&gt;Omega<sp/>-<sp/>RWIt-&gt;omegaBefore;</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>signOfOmegaDot<sp/>=<sp/>((omegaDot<sp/>&gt;<sp/>0)<sp/>-<sp/>(omegaDot<sp/>&lt;<sp/>0));</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;frictionStribeck<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>abs(signOfOmega<sp/>-<sp/>signOfOmegaDot)<sp/>&lt;<sp/>2<sp/>&amp;&amp;<sp/>RWIt-&gt;betaStatic<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;frictionStribeck<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;frictionStribeck<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frictionForce;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>frictionForceAtLimitCycle;</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Friction<sp/>model<sp/>which<sp/>uses<sp/>static,<sp/>stribeck,<sp/>coulomb,<sp/>and<sp/>viscous<sp/>friction<sp/>models</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;frictionStribeck<sp/>==<sp/>1)<sp/>{</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frictionForce<sp/>=<sp/>sqrt(2.0*exp(1.0))*(RWIt-&gt;fStatic<sp/>-<sp/>RWIt-&gt;fCoulomb)*exp(-(RWIt-&gt;Omega/RWIt-&gt;betaStatic)*(RWIt-&gt;Omega/RWIt-&gt;betaStatic)/2.0)*RWIt-&gt;Omega/(RWIt-&gt;betaStatic*sqrt(2.0))<sp/>+<sp/>RWIt-&gt;fCoulomb*tanh(RWIt-&gt;Omega*10.0/RWIt-&gt;betaStatic)<sp/>+<sp/>RWIt-&gt;cViscous*RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frictionForceAtLimitCycle<sp/>=<sp/>sqrt(2.0*exp(1.0))*(RWIt-&gt;fStatic<sp/>-<sp/>RWIt-&gt;fCoulomb)*exp(-(RWIt-&gt;omegaLimitCycle/RWIt-&gt;betaStatic)*(RWIt-&gt;omegaLimitCycle/RWIt-&gt;betaStatic)/2.0)*RWIt-&gt;omegaLimitCycle/(RWIt-&gt;betaStatic*sqrt(2.0))<sp/>+<sp/>RWIt-&gt;fCoulomb*tanh(RWIt-&gt;omegaLimitCycle*10.0/RWIt-&gt;betaStatic)<sp/>+<sp/>RWIt-&gt;cViscous*RWIt-&gt;omegaLimitCycle;</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frictionForce<sp/>=<sp/>signOfOmega*RWIt-&gt;fCoulomb<sp/>+<sp/>RWIt-&gt;cViscous*RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frictionForceAtLimitCycle<sp/>=<sp/>RWIt-&gt;fCoulomb<sp/>+<sp/>RWIt-&gt;cViscous*RWIt-&gt;omegaLimitCycle;</highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>line<sp/>avoids<sp/>the<sp/>limit<sp/>cycle<sp/>that<sp/>can<sp/>occur<sp/>with<sp/>friction</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(RWIt-&gt;Omega)<sp/>&lt;<sp/>RWIt-&gt;omegaLimitCycle)<sp/>{</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frictionForce<sp/>=<sp/>frictionForceAtLimitCycle/RWIt-&gt;omegaLimitCycle*RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>friction<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;frictionTorque<sp/>=<sp/>-frictionForce;</highlight></codeline>
<codeline lineno="242"><highlight class="normal"></highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>BalancedWheels<sp/>||<sp/>RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple)<sp/>{</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.matrixD<sp/>-=<sp/>RWIt-&gt;Js<sp/>*<sp/>RWIt-&gt;gsHat_B<sp/>*<sp/>RWIt-&gt;gsHat_B.transpose();</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.vecRot<sp/>-=<sp/>RWIt-&gt;gsHat_B<sp/>*<sp/>(RWIt-&gt;u_current<sp/>+<sp/>RWIt-&gt;frictionTorque)<sp/>+<sp/>RWIt-&gt;Js*RWIt-&gt;Omega*omegaLoc_BN_B.cross(RWIt-&gt;gsHat_B);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"></highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Fs<sp/>=<sp/>Us<sp/>*<sp/>Omega^2<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>static<sp/>imbalance<sp/>force</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tempF<sp/>=<sp/>RWIt-&gt;U_s<sp/>*<sp/>OmegaSquared<sp/>*<sp/>RWIt-&gt;w2Hat_B;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.vecTrans<sp/>+=<sp/>tempF;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tau_s<sp/>=<sp/>cross(r_B,Fs)<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>static<sp/>imbalance<sp/>torque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>tau_d<sp/>=<sp/>Ud<sp/>*<sp/>Omega^2<sp/>*/</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">//<sp/>dynamic<sp/>imbalance<sp/>torque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.vecRot<sp/>+=<sp/>(<sp/>RWIt-&gt;rWB_B.cross(tempF)<sp/>)<sp/>+<sp/>(<sp/>RWIt-&gt;U_d*OmegaSquared<sp/>*<sp/>RWIt-&gt;w2Hat_B<sp/>);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled)<sp/>{</highlight></codeline>
<codeline lineno="259"><highlight class="normal"></highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omegas<sp/>=<sp/>RWIt-&gt;gsHat_B.transpose()*omegaLoc_BN_B;</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omegaw2<sp/>=<sp/>RWIt-&gt;w2Hat_B.transpose()*omegaLoc_BN_B;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omegaw3<sp/>=<sp/>RWIt-&gt;w3Hat_B.transpose()*omegaLoc_BN_B;</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>gravityTorquePntW_B<sp/>=<sp/>RWIt-&gt;d*RWIt-&gt;w2Hat_B.cross(RWIt-&gt;mass*g_B);</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dSquared<sp/>=<sp/>RWIt-&gt;d<sp/>*<sp/>RWIt-&gt;d;</highlight></codeline>
<codeline lineno="267"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;aOmega<sp/>=<sp/>-RWIt-&gt;mass*RWIt-&gt;d/(RWIt-&gt;Js<sp/>+<sp/>RWIt-&gt;mass*dSquared)<sp/>*<sp/>RWIt-&gt;w3Hat_B;</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;bOmega<sp/>=<sp/>-1.0/(RWIt-&gt;Js<sp/>+<sp/>RWIt-&gt;mass*dSquared)*((RWIt-&gt;Js+RWIt-&gt;mass*dSquared)*RWIt-&gt;gsHat_B<sp/>+<sp/>RWIt-&gt;J13*RWIt-&gt;w3Hat_B<sp/>+<sp/>RWIt-&gt;mass*RWIt-&gt;d*RWIt-&gt;rWB_B.cross(RWIt-&gt;w3Hat_B));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt-&gt;cOmega<sp/>=<sp/>1.0/(RWIt-&gt;Js<sp/>+<sp/>RWIt-&gt;mass*dSquared)*(omegaw2*omegaw3*(-RWIt-&gt;mass*dSquared)-RWIt-&gt;J13*omegaw2*omegas-RWIt-&gt;mass*RWIt-&gt;d*RWIt-&gt;w3Hat_B.transpose()*omegaLoc_BN_B.cross(omegaLoc_BN_B.cross(RWIt-&gt;rWB_B))+(RWIt-&gt;u_current<sp/>+<sp/>RWIt-&gt;frictionTorque)<sp/>+<sp/>RWIt-&gt;gsHat_B.dot(gravityTorquePntW_B));</highlight></codeline>
<codeline lineno="271"><highlight class="normal"></highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.matrixA<sp/>+=<sp/>RWIt-&gt;mass<sp/>*<sp/>RWIt-&gt;d<sp/>*<sp/>RWIt-&gt;w3Hat_B<sp/>*<sp/>RWIt-&gt;aOmega.transpose();</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.matrixB<sp/>+=<sp/>RWIt-&gt;mass<sp/>*<sp/>RWIt-&gt;d<sp/>*<sp/>RWIt-&gt;w3Hat_B<sp/>*<sp/>RWIt-&gt;bOmega.transpose();</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.matrixC<sp/>+=<sp/>(RWIt-&gt;IRWPntWc_B*RWIt-&gt;gsHat_B<sp/>+<sp/>RWIt-&gt;mass*RWIt-&gt;d*RWIt-&gt;rWcB_B.cross(RWIt-&gt;w3Hat_B))*RWIt-&gt;aOmega.transpose();</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.matrixD<sp/>+=<sp/>(RWIt-&gt;IRWPntWc_B*RWIt-&gt;gsHat_B<sp/>+<sp/>RWIt-&gt;mass*RWIt-&gt;d*RWIt-&gt;rWcB_B.cross(RWIt-&gt;w3Hat_B))*RWIt-&gt;bOmega.transpose();</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.vecTrans<sp/>+=<sp/>RWIt-&gt;mass*RWIt-&gt;d*(OmegaSquared*RWIt-&gt;w2Hat_B<sp/>-<sp/>RWIt-&gt;cOmega*RWIt-&gt;w3Hat_B);</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>backSubContr.vecRot<sp/>+=<sp/>RWIt-&gt;mass*RWIt-&gt;d*OmegaSquared*RWIt-&gt;rWcB_B.cross(RWIt-&gt;w2Hat_B)<sp/>-<sp/>RWIt-&gt;IPrimeRWPntWc_B*RWIt-&gt;Omega*RWIt-&gt;gsHat_B<sp/>-<sp/>omegaLoc_BN_B.cross(RWIt-&gt;IRWPntWc_B*RWIt-&gt;Omega*RWIt-&gt;gsHat_B+RWIt-&gt;mass*RWIt-&gt;rWcB_B.cross(RWIt-&gt;rPrimeWcB_B))<sp/>-<sp/>(RWIt-&gt;IRWPntWc_B*RWIt-&gt;gsHat_B+RWIt-&gt;mass*RWIt-&gt;d*RWIt-&gt;rWcB_B.cross(RWIt-&gt;w3Hat_B))*RWIt-&gt;cOmega;</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="281"><highlight class="normal">}</highlight></codeline>
<codeline lineno="282"><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a9a0392ddec84f91a0adf92761889ee17" kindref="member">ReactionWheelStateEffector::computeDerivatives</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime,<sp/>Eigen::Vector3d<sp/>rDDot_BN_N,<sp/>Eigen::Vector3d<sp/>omegaDot_BN_B,<sp/>Eigen::Vector3d<sp/>sigma_BN)</highlight></codeline>
<codeline lineno="284"><highlight class="normal">{</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>OmegasDot(this-&gt;numRW,1);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>thetasDot(this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref>,1);</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omegaDotBNLoc_B;</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MRPd<sp/>sigmaBNLocal;</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_NB;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>rDDotBNLoc_N;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>rDDotBNLoc_B;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>RWi<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>thetaCount<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>RWItp;</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*RWIt;</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>omegaDotBNLoc_B<sp/>=<sp/>this-&gt;hubOmega-&gt;getStateDeriv();</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>rDDotBNLoc_N<sp/>=<sp/>this-&gt;hubVelocity-&gt;getStateDeriv();</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>sigmaBNLocal<sp/>=<sp/>(Eigen::Vector3d<sp/>)this-&gt;hubSigma-&gt;getState();</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>dcm_NB<sp/>=<sp/>sigmaBNLocal.toRotationMatrix();</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/>dcm_BN<sp/>=<sp/>dcm_NB.transpose();</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/>rDDotBNLoc_B<sp/>=<sp/>dcm_BN*rDDotBNLoc_N;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"></highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RWItp=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>RWItp!=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>RWItp++)</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt<sp/>=<sp/>*RWItp;</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RWIt-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled<sp/>||<sp/>RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Set<sp/>trivial<sp/>kinemetic<sp/>derivative</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetasDot(thetaCount,0)<sp/>=<sp/>RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetaCount++;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>BalancedWheels<sp/>||<sp/>RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple)<sp/>{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OmegasDot(RWi,0)<sp/>=<sp/>(RWIt-&gt;u_current<sp/>+<sp/>RWIt-&gt;frictionTorque)/RWIt-&gt;Js<sp/>-<sp/>RWIt-&gt;gsHat_B.transpose()*omegaDotBNLoc_B;</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(RWIt-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled)<sp/>{</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>OmegasDot(RWi,0)<sp/>=<sp/>RWIt-&gt;aOmega.dot(rDDotBNLoc_B)<sp/>+<sp/>RWIt-&gt;bOmega.dot(omegaDotBNLoc_B)<sp/>+<sp/>RWIt-&gt;cOmega;</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWi++;</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="322"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/>OmegasState-&gt;setDerivative(OmegasDot);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thetasState-&gt;setDerivative(thetasDot);</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="327"><highlight class="normal">}</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a660df9ebccea88336d05722c2ac89ac1" kindref="member">ReactionWheelStateEffector::updateEnergyMomContributions</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime,<sp/>Eigen::Vector3d<sp/>&amp;<sp/>rotAngMomPntCContr_B,</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>&amp;<sp/>rotEnergyContr,<sp/>Eigen::Vector3d<sp/>omega_BN_B)</highlight></codeline>
<codeline lineno="331"><highlight class="normal">{</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MRPd<sp/>sigmaBNLocal;</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BN;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_NB;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omegaLoc_BN_B<sp/>=<sp/>hubOmega-&gt;getState();</highlight></codeline>
<codeline lineno="336"><highlight class="normal"></highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>rotAngMomPntCContr_B.setZero();</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>RWItp;</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*RWIt;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(RWItp=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>RWItp!=<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>RWItp++)</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIt<sp/>=<sp/>*RWItp;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>BalancedWheels<sp/>||<sp/>RWIt-&gt;RWModel<sp/>==<sp/>JitterSimple)<sp/>{</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotAngMomPntCContr_B<sp/>+=<sp/>RWIt-&gt;Js*RWIt-&gt;gsHat_B*RWIt-&gt;Omega;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotEnergyContr<sp/>+=<sp/>1.0/2.0*RWIt-&gt;Js*RWIt-&gt;Omega*RWIt-&gt;Omega<sp/>+<sp/>RWIt-&gt;Js*RWIt-&gt;Omega*RWIt-&gt;gsHat_B.dot(omegaLoc_BN_B);</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWIt-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled)<sp/>{</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omega_WN_B<sp/>=<sp/>omegaLoc_BN_B<sp/>+<sp/>RWIt-&gt;Omega*RWIt-&gt;gsHat_B;</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>r_WcB_B<sp/>=<sp/>RWIt-&gt;rWcB_B;</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>rDot_WcB_B<sp/>=<sp/>RWIt-&gt;d*RWIt-&gt;Omega*RWIt-&gt;w3Hat_B<sp/>+<sp/>omegaLoc_BN_B.cross(RWIt-&gt;rWcB_B);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotEnergyContr<sp/>+=<sp/>0.5*omega_WN_B.transpose()*RWIt-&gt;IRWPntWc_B*omega_WN_B<sp/>+<sp/>0.5*RWIt-&gt;mass*rDot_WcB_B.dot(rDot_WcB_B);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rotAngMomPntCContr_B<sp/>+=<sp/>RWIt-&gt;IRWPntWc_B*omega_WN_B<sp/>+<sp/>RWIt-&gt;mass*r_WcB_B.cross(rDot_WcB_B);</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="358"><highlight class="normal">}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1aae3cd7942e8a3dbc81a6d4916c62b3fe" kindref="member">ReactionWheelStateEffector::addReactionWheel</ref>(RWConfigMsgPayload<sp/>*NewRW)</highlight></codeline>
<codeline lineno="363"><highlight class="normal">{</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>store<sp/>the<sp/>RW<sp/>information<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.push_back(NewRW);</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>add<sp/>a<sp/>RW<sp/>state<sp/>log<sp/>output<sp/>message<sp/>for<sp/>this<sp/>wheel<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>Message&lt;RWConfigLogMsgPayload&gt;<sp/>*msg;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message&lt;RWConfigLogMsgPayload&gt;;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae1bbb2a58f34c8acda3f84c336902113" kindref="member">rwOutMsgs</ref>.push_back(msg);</highlight></codeline>
<codeline lineno="371"><highlight class="normal">}</highlight></codeline>
<codeline lineno="372"><highlight class="normal"></highlight></codeline>
<codeline lineno="373"><highlight class="normal"></highlight></codeline>
<codeline lineno="377"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1aa3589d73c91ede618c782bdb44fe9261" kindref="member">ReactionWheelStateEffector::Reset</ref>(uint64_t<sp/>CurrenSimNanos)</highlight></codeline>
<codeline lineno="378"><highlight class="normal">{</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>RWCmdMsgPayload<sp/>RWCmdInitializer;</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>RWCmdInitializer.u_cmd<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="381"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9208b9572b7172132ae2d56d0ade78fb" kindref="member">NewRWCmds</ref>.clear();</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a9208b9572b7172132ae2d56d0ade78fb" kindref="member">NewRWCmds</ref>.push_back(RWCmdInitializer);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="387"><highlight class="normal"></highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>itp;</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*it;</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itp<sp/>=<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>itp<sp/>!=<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>itp++)</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>*itp;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;betaStatic<sp/>==<sp/>0.0)</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_reaction_wheel_state_effector_1a96b2f0ab29e09d7827f426c50f427d62" kindref="member">bskLogger</ref>.bskLog(BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;Stribeck<sp/>coefficent<sp/>currently<sp/>zero<sp/>and<sp/>should<sp/>be<sp/>positive<sp/>to<sp/>active<sp/>this<sp/>friction<sp/>model,<sp/>or<sp/>negative<sp/>to<sp/>turn<sp/>it<sp/>off!&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;RWModel<sp/>==<sp/>JitterFullyCoupled)<sp/>{</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;d<sp/>=<sp/>it-&gt;U_s/it-&gt;mass;<sp/></highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;J13<sp/>=<sp/>it-&gt;U_d;<sp/></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>the<sp/>RW<sp/>wheel<sp/>output<sp/>message<sp/>buffer<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1afd8c0db652725dcf5ba55ede6b139216" kindref="member">rwSpeedMsgBuffer</ref><sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae540fffcaaf2b99ed6cfcff239a24687" kindref="member">rwSpeedOutMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="406"><highlight class="normal">}</highlight></codeline>
<codeline lineno="407"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a45248de105ba573fa0abbe1fca34246b" kindref="member">ReactionWheelStateEffector::WriteOutputMessages</ref>(uint64_t<sp/>CurrentClock)</highlight></codeline>
<codeline lineno="414"><highlight class="normal">{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>test;</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigLogMsgPayload<sp/>tmpRW;</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>itp;</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*it;</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itp<sp/>=<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>itp<sp/>!=<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>itp++)</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>*itp;</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;theta<sp/>=<sp/>this-&gt;thetasState-&gt;getState()(itp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin(),<sp/>0);</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;Omega<sp/>=<sp/>this-&gt;OmegasState-&gt;getState()(itp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin(),<sp/>0);</highlight></codeline>
<codeline lineno="427"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW<sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae1bbb2a58f34c8acda3f84c336902113" kindref="member">rwOutMsgs</ref>[c]-&gt;zeroMsgPayload;</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.theta<sp/>=<sp/>it-&gt;theta;</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.u_current<sp/>=<sp/>it-&gt;u_current;</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.frictionTorque<sp/>=<sp/>it-&gt;frictionTorque;</highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.u_max<sp/>=<sp/>it-&gt;u_max;</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.u_min<sp/>=<sp/>it-&gt;u_min;</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.u_f<sp/>=<sp/>it-&gt;fCoulomb;</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.Omega<sp/>=<sp/>it-&gt;Omega;</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.Omega_max<sp/>=<sp/>it-&gt;Omega_max;</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.Js<sp/>=<sp/>it-&gt;Js;</highlight></codeline>
<codeline lineno="438"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.U_s<sp/>=<sp/>it-&gt;U_s;</highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.U_d<sp/>=<sp/>it-&gt;U_d;</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.RWModel<sp/>=<sp/>it-&gt;RWModel;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpRW.P_max<sp/>=<sp/>it-&gt;P_max;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenVector3d2CArray(it-&gt;gsHat_B,<sp/>tmpRW.gsHat_B);</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenVector3d2CArray(it-&gt;rWB_B,<sp/>tmpRW.rWB_B);</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>out<sp/>config<sp/>data<sp/>for<sp/>eachreaction<sp/>wheel</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae1bbb2a58f34c8acda3f84c336902113" kindref="member">rwOutMsgs</ref>[c]-&gt;write(&amp;tmpRW,<sp/>this-&gt;moduleID,<sp/>CurrentClock);</highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>c++;</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="450"><highlight class="normal">}</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="457"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a0e0253a53880d9316eed5bf434651e82" kindref="member">ReactionWheelStateEffector::writeOutputStateMessages</ref>(uint64_t<sp/>integTimeNanos)</highlight></codeline>
<codeline lineno="458"><highlight class="normal">{</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWConfigMsgPayload<sp/>*&gt;::iterator<sp/>itp;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/>RWConfigMsgPayload<sp/>*it;</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(itp<sp/>=<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin();<sp/>itp<sp/>!=<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.end();<sp/>itp++)</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>=<sp/>*itp;</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_reaction_wheel_state_effector_1afad7e10e41400676c354e773e17f34e6" kindref="member">numRWJitter</ref><sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;theta<sp/>=<sp/>this-&gt;thetasState-&gt;getState()(itp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin(),<sp/>0);</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1afd8c0db652725dcf5ba55ede6b139216" kindref="member">rwSpeedMsgBuffer</ref>.wheelThetas[itp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin()]<sp/>=<sp/>it-&gt;theta;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;Omega<sp/>=<sp/>this-&gt;OmegasState-&gt;getState()(itp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin(),<sp/>0);</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1afd8c0db652725dcf5ba55ede6b139216" kindref="member">rwSpeedMsgBuffer</ref>.wheelSpeeds[itp<sp/>-<sp/><ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.begin()]<sp/>=<sp/>it-&gt;Omega;</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>this<sp/>message<sp/>once<sp/>for<sp/>all<sp/>reaction<sp/>wheels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1ae540fffcaaf2b99ed6cfcff239a24687" kindref="member">rwSpeedOutMsg</ref>.write(&amp;this-&gt;<ref refid="class_reaction_wheel_state_effector_1afd8c0db652725dcf5ba55ede6b139216" kindref="member">rwSpeedMsgBuffer</ref>,<sp/>this-&gt;moduleID,<sp/>integTimeNanos);</highlight></codeline>
<codeline lineno="474"><highlight class="normal">}</highlight></codeline>
<codeline lineno="475"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1aeee23c8bcb4d5efbf1d174417d5f7425" kindref="member">ReactionWheelStateEffector::ReadInputs</ref>()</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="482"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_reaction_wheel_state_effector_1af52820aa1c4acaaf915cb64cc2b35025" kindref="member">rwMotorCmdInMsg</ref>.isLinked())<sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;incomingCmdBuffer<sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1af52820aa1c4acaaf915cb64cc2b35025" kindref="member">rwMotorCmdInMsg</ref>();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;prevCommandTime<sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1af52820aa1c4acaaf915cb64cc2b35025" kindref="member">rwMotorCmdInMsg</ref>.timeWritten();</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;incomingCmdBuffer<sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1af52820aa1c4acaaf915cb64cc2b35025" kindref="member">rwMotorCmdInMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/>RWCmdMsgPayload<sp/>*CmdPtr;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>i;</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0,<sp/>CmdPtr<sp/>=<sp/><ref refid="class_reaction_wheel_state_effector_1a9208b9572b7172132ae2d56d0ade78fb" kindref="member">NewRWCmds</ref>.data();<sp/>i&lt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>.size();<sp/>CmdPtr++,<sp/>i++)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdPtr-&gt;u_cmd<sp/>=<sp/>this-&gt;incomingCmdBuffer.motorTorque[i];</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal">}</highlight></codeline>
<codeline lineno="499"><highlight class="normal"></highlight></codeline>
<codeline lineno="506"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1ae74c17bf17d25d38f60632ed8564f10c" kindref="member">ReactionWheelStateEffector::ConfigureRWRequests</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>CurrentTime)</highlight></codeline>
<codeline lineno="507"><highlight class="normal">{</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;RWCmdMsgPayload&gt;::iterator<sp/>CmdIt;</highlight></codeline>
<codeline lineno="509"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>RWIter<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="510"><highlight class="normal"></highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>loop<sp/>through<sp/>commands</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(CmdIt<sp/>=<sp/><ref refid="class_reaction_wheel_state_effector_1a9208b9572b7172132ae2d56d0ade78fb" kindref="member">NewRWCmds</ref>.begin();<sp/>CmdIt<sp/>!=<sp/><ref refid="class_reaction_wheel_state_effector_1a9208b9572b7172132ae2d56d0ade78fb" kindref="member">NewRWCmds</ref>.end();<sp/>CmdIt++)</highlight></codeline>
<codeline lineno="513"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="514"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Torque<sp/>saturation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;u_max<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CmdIt-&gt;u_cmd<sp/>&gt;<sp/>this-&gt;ReactionWheelData[RWIter]-&gt;u_max)<sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdIt-&gt;u_cmd<sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;u_max;</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(CmdIt-&gt;u_cmd<sp/>&lt;<sp/>-this-&gt;ReactionWheelData[RWIter]-&gt;u_max)<sp/>{</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdIt-&gt;u_cmd<sp/>=<sp/>-this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;u_max;</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="522"><highlight class="normal"></highlight></codeline>
<codeline lineno="523"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>minimum<sp/>torque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(CmdIt-&gt;u_cmd)<sp/>&lt;<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;u_min)<sp/>{</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdIt-&gt;u_cmd<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="526"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="528"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Power<sp/>saturation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;P_max<sp/>&gt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(CmdIt-&gt;u_cmd<sp/>*<sp/>this-&gt;ReactionWheelData[RWIter]-&gt;Omega)<sp/>&gt;=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;P_max)<sp/>{</highlight></codeline>
<codeline lineno="531"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdIt-&gt;u_cmd<sp/>=<sp/>std::copysign(this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;P_max<sp/>/<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;Omega,<sp/>CmdIt-&gt;u_cmd);</highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="535"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Speed<sp/>saturation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(std::abs(this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;Omega)<sp/>&gt;=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;Omega_max</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;Omega_max<sp/>&gt;<sp/>0.0<sp/></highlight><highlight class="comment">/*<sp/>negative<sp/>Omega_max<sp/>turns<sp/>of<sp/>wheel<sp/>saturation<sp/>modeling<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&amp;&amp;<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;Omega<sp/>*<sp/>CmdIt-&gt;u_cmd<sp/>&gt;=<sp/>0.0<sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>torque<sp/>would<sp/>accelerate<sp/>wheel<sp/>speed<sp/>beyond<sp/>Omega_max</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>)<sp/>{</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdIt-&gt;u_cmd<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="542"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;u_current<sp/>=<sp/>CmdIt-&gt;u_cmd;<sp/></highlight><highlight class="comment">//<sp/>save<sp/>actual<sp/>torque<sp/>for<sp/>reaction<sp/>wheel<sp/>motor</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>previous<sp/>omega<sp/>for<sp/>next<sp/>time</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;omegaBefore<sp/>=<sp/>this-&gt;<ref refid="class_reaction_wheel_state_effector_1a8c5924df74be82fcf163bc0cbdf701aa" kindref="member">ReactionWheelData</ref>[RWIter]-&gt;Omega;</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>RWIter++;</highlight></codeline>
<codeline lineno="549"><highlight class="normal"></highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="551"><highlight class="normal">}</highlight></codeline>
<codeline lineno="552"><highlight class="normal"></highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_reaction_wheel_state_effector_1a36aa215de12d330d123da74b04c4453e" kindref="member">ReactionWheelStateEffector::UpdateState</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="562"><highlight class="normal">{</highlight></codeline>
<codeline lineno="564"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_reaction_wheel_state_effector_1aeee23c8bcb4d5efbf1d174417d5f7425" kindref="member">ReadInputs</ref>();</highlight></codeline>
<codeline lineno="565"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_reaction_wheel_state_effector_1ae74c17bf17d25d38f60632ed8564f10c" kindref="member">ConfigureRWRequests</ref>(CurrentSimNanos*NANO2SEC);</highlight></codeline>
<codeline lineno="566"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_reaction_wheel_state_effector_1a45248de105ba573fa0abbe1fca34246b" kindref="member">WriteOutputMessages</ref>(CurrentSimNanos);</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="568"><highlight class="normal">}</highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/simulation/dynamics/reactionWheels/reactionWheelStateEffector.cpp"/>
  </compounddef>
</doxygen>
