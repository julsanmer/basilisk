<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="camera_8cpp" kind="file" language="C++">
    <compoundname>camera.cpp</compoundname>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">string.h</includes>
    <includes refid="camera_8h" local="yes">camera.h</includes>
    <includes local="yes">architecture/utilities/rigidBodyKinematics.h</includes>
    <includes local="yes">architecture/utilities/linearAlgebra.h</includes>
    <includes local="yes">architecture/utilities/astroConstants.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/sensors/camera/camera.cpp</label>
        <link refid="camera_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
      </node>
      <node id="4">
        <label>camera.h</label>
        <link refid="camera_8h_source"/>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>Eigen/Dense</label>
      </node>
      <node id="14">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="13">
        <label>architecture/messaging/messaging.h</label>
      </node>
      <node id="12">
        <label>architecture/msgPayloadDefC/CameraConfigMsgPayload.h</label>
      </node>
      <node id="11">
        <label>architecture/msgPayloadDefC/CameraImageMsgPayload.h</label>
      </node>
      <node id="19">
        <label>architecture/utilities/astroConstants.h</label>
      </node>
      <node id="15">
        <label>architecture/utilities/avsEigenMRP.h</label>
      </node>
      <node id="16">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="18">
        <label>architecture/utilities/linearAlgebra.h</label>
      </node>
      <node id="17">
        <label>architecture/utilities/rigidBodyKinematics.h</label>
      </node>
      <node id="6">
        <label>math.h</label>
      </node>
      <node id="9">
        <label>opencv2/core/mat.hpp</label>
      </node>
      <node id="8">
        <label>opencv2/highgui.hpp</label>
      </node>
      <node id="10">
        <label>opencv2/imgcodecs.hpp</label>
      </node>
      <node id="7">
        <label>opencv2/opencv.hpp</label>
      </node>
      <node id="5">
        <label>stdint.h</label>
      </node>
      <node id="3">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2016,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/><sp/><sp/><sp/>Camera<sp/>Module</highlight></codeline>
<codeline lineno="21"><highlight class="comment"></highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/><sp/><sp/><sp/>Note:<sp/><sp/><sp/>This<sp/>module<sp/>simulates<sp/>a<sp/>camera.<sp/>It<sp/>writes<sp/>a<sp/>camera<sp/>message<sp/>with<sp/>it&apos;s<sp/>specs<sp/>and<sp/>image<sp/>requests,<sp/>as<sp/>well<sp/>as<sp/>provides<sp/>a<sp/>template<sp/>for<sp/>image<sp/>coruption</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/><sp/><sp/><sp/>Author:<sp/>Thibaud<sp/>Teil</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/><sp/><sp/><sp/>Date:<sp/><sp/><sp/>October<sp/>03,<sp/>2019</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/></highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/*<sp/>modify<sp/>the<sp/>path<sp/>to<sp/>reflect<sp/>the<sp/>new<sp/>module<sp/>names<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;camera.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/rigidBodyKinematics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/astroConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><ref refid="class_camera_1a01f94c3543f56ede7af49dc778f19331" kindref="member">Camera::Camera</ref>()</highlight></codeline>
<codeline lineno="38"><highlight class="normal">{</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;pointImageOut<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1ac98a0e4b34543baf7087d8726caab00f" kindref="member">cameraID</ref><sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1af733dc29717b6a857c653faadb2f4207" kindref="member">resolution</ref>[0]<sp/>=<sp/>512;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1af733dc29717b6a857c653faadb2f4207" kindref="member">resolution</ref>[1]<sp/>=<sp/>512;</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1adc5c8a97b8be7040a0858296327f0536" kindref="member">renderRate</ref><sp/>=<sp/>(uint64_t)<sp/>(60*1E9);</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>v3SetZero(this-&gt;<ref refid="class_camera_1a8cb7cc4cbbc1fd1226fa3e3a93768104" kindref="member">cameraPos_B</ref>);</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>v3SetZero(this-&gt;<ref refid="class_camera_1ad203ad6b5dd0deea9b843bd70436e3fa" kindref="member">sigma_CB</ref>);</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a6e555dcd324da77b0e539dbd3a6b2a9f" kindref="member">cameraIsOn</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1ac1203d5a943e34d2dbe4fc3454cf115f" kindref="member">filename</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a29eda16acfc0ef5450b91c70783f7220" kindref="member">fieldOfView</ref><sp/>=<sp/>0.7;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(this-&gt;<ref refid="class_camera_1ab496a20f3915951767580f7a3fcbd441" kindref="member">skyBox</ref>,<sp/></highlight><highlight class="stringliteral">&quot;black&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1aefb71d0008ca7d243df712c775e88e78" kindref="member">saveImages</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a5c4f779091d7dc941e08fd48b36b7f4e" kindref="member">saveDir</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a484685fbadc3869dd91916da34460dac" kindref="member">postProcessingOn</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a63e84890328d06ad4078c3d2a778541e" kindref="member">ppAperture</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a0fb9601100d8a0880bc03439f2130bcb" kindref="member">ppFocalLength</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a1826a29808086a5db60aeb6c8476af14" kindref="member">ppFocusDistance</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a8ea2703b0444fb445904dd29dd1ad07f" kindref="member">ppMaxBlurSize</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1aa71a5aeac5490f0ff936ae02fc1281ee" kindref="member">gaussian</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a1797f5df303499ca09ed9c793284d672" kindref="member">darkCurrent</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a2f1d2d193581e45fd9c69fd812ff105b" kindref="member">saltPepper</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a986bf915f97942830f30960dea3e17c0" kindref="member">cosmicRays</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a69ae4c8ba7b9c7d1582eac3c5a2b8c3b" kindref="member">blurParam</ref><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref><sp/>=<sp/>std::vector&lt;double&gt;{0.,<sp/>0.,<sp/>0.};</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a41d08cf5cc5bf60a452621c112b38c6f" kindref="member">bgrPercent</ref><sp/>=<sp/>std::vector&lt;int&gt;{0,<sp/>0,<sp/>0};</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal">}</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><ref refid="class_camera_1ad1897942d0ccf91052386388a497349f" kindref="member">Camera::~Camera</ref>()</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="77"><highlight class="normal">}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1a4ca4690ae3ed505bef8d2c764e048734" kindref="member">Camera::Reset</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="85"><highlight class="normal">{</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1ac9a2ccfffeaca1e1dca7dfe18ea8af1f" kindref="member">Camera::HSVAdjust</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>mSrc,<sp/>cv::Mat<sp/>&amp;mDst){</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/><ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtColor(mSrc,<sp/><ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>,<sp/>cv::COLOR_BGR2HSV);</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mSrc.rows;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mSrc.cols;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Saturation<sp/>is<sp/>hsv.at&lt;Vec3b&gt;(j,<sp/>i)[1]<sp/>range:<sp/>[0-255]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Value<sp/>is<sp/>hsv.at&lt;Vec3b&gt;(j,<sp/>i)[2]<sp/>range:<sp/>[0-255]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>convert<sp/>radians<sp/>to<sp/>degrees<sp/>and<sp/>multiply<sp/>by<sp/>2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>user<sp/>assumes<sp/>range<sp/>hue<sp/>range<sp/>is<sp/>0-2pi<sp/>and<sp/>not<sp/>0-180</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>input_degrees<sp/>=<sp/>(int)<sp/>(this-&gt;hsv[0]<sp/>*<sp/>R2D);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>h_360<sp/>=<sp/>(<ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>.at&lt;cv::Vec3b&gt;(j,<sp/>i)[0]<sp/>*<sp/>2)<sp/>+<sp/>input_degrees;</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_360<sp/>=<sp/>(int)<sp/>(h_360<sp/>-<sp/><sp/>360<sp/>*<sp/>std::floor(h_360<sp/>*<sp/>(1.<sp/>/<sp/>360.)));</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>h_360<sp/>=<sp/>h_360/2;</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(h_360<sp/>==<sp/>180){<sp/>h_360<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>.at&lt;cv::Vec3b&gt;(j,<sp/>i)[0]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>h_360;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[3];</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>1;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[k]<sp/>=<sp/>(int)<sp/>(<ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>.at&lt;cv::Vec3b&gt;(j,<sp/>i)[k]<sp/>*<sp/>(this-&gt;hsv[k]/100.<sp/>+<sp/>1.));</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>saturate<sp/>S<sp/>and<sp/>V<sp/>values<sp/>to<sp/>[0,255]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(values[k]<sp/>&lt;<sp/>0){<sp/>values[k]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(values[k]<sp/>&gt;<sp/>255){<sp/>values[k]<sp/>=<sp/>255;<sp/>}</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>.at&lt;cv::Vec3b&gt;(j,<sp/>i)[k]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>values[k];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>cvtColor(<ref refid="class_camera_1ac113451de668df75c032363af080d88f" kindref="member">hsv</ref>,<sp/>mDst,<sp/>cv::COLOR_HSV2BGR);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">}</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1a2b51dc87cfbed06b53cbbf91d051e232" kindref="member">Camera::BGRAdjustPercent</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>mSrc,<sp/>cv::Mat<sp/>&amp;mDst){</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>mBGR<sp/>=<sp/>cv::Mat(mSrc.size(),<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>mSrc.convertTo(mBGR,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BGR<sp/>values<sp/>range<sp/>[0,<sp/>255]</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>value<sp/>after<sp/>adjustment<sp/>is<sp/>&lt;<sp/>0<sp/>take<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>value<sp/>after<sp/>is<sp/>&gt;<sp/>255<sp/>take<sp/>255</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>j<sp/>=<sp/>0;<sp/>j<sp/>&lt;<sp/>mSrc.rows;<sp/>j++)<sp/>{</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>mSrc.cols;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>values[3];</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>k<sp/>=<sp/>0;<sp/>k<sp/>&lt;<sp/>3;<sp/>k++){</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>values[k]<sp/>=<sp/>(int)<sp/>(mBGR.at&lt;cv::Vec3b&gt;(j,i)[k]<sp/>*<sp/>(this-&gt;<ref refid="class_camera_1a41d08cf5cc5bf60a452621c112b38c6f" kindref="member">bgrPercent</ref>[k]/100.<sp/>+<sp/>1.));</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>deal<sp/>with<sp/>overflow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(values[k]<sp/>&lt;<sp/>0){<sp/>values[k]<sp/>=<sp/>0;<sp/>}</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(values[k]<sp/>&gt;<sp/>255){<sp/>values[k]<sp/>=<sp/>255;<sp/>}</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mBGR.at&lt;cv::Vec3b&gt;(j,i)[k]<sp/>=<sp/>(</highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">)<sp/>values[k];</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>mBGR.convertTo(mDst,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="154"><highlight class="normal">}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1aa6fe85698740f93f5c13ae8e1d6389c0" kindref="member">Camera::AddGaussianNoise</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>mSrc,<sp/>cv::Mat<sp/>&amp;mDst,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Mean,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>StdDev)</highlight></codeline>
<codeline lineno="166"><highlight class="normal">{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>mSrc_16SC;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//CV_16SC3<sp/>means<sp/>signed<sp/>16<sp/>bit<sp/>shorts<sp/>three<sp/>channels</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>mGaussian_noise<sp/>=<sp/>cv::Mat(mSrc.size(),<sp/>CV_16SC3);</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/>randn(mGaussian_noise,<sp/>cv::Scalar::all(Mean),<sp/>cv::Scalar::all(StdDev));</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/>mSrc.convertTo(mSrc_16SC,<sp/>CV_16SC3);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>addWeighted(mSrc_16SC,<sp/>1.0,<sp/>mGaussian_noise,<sp/>1.0,<sp/>0.0,<sp/>mSrc_16SC);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>mSrc_16SC.convertTo(mDst,mSrc.type());</highlight></codeline>
<codeline lineno="177"><highlight class="normal">}</highlight></codeline>
<codeline lineno="178"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1a8547437f1b265c7ccd0eb64f1f657c46" kindref="member">Camera::AddSaltPepper</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>mSrc,<sp/>cv::Mat<sp/>&amp;mDst,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pa,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>pb){</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>uint64<sp/>initValue<sp/>=<sp/>time(0);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>RNG<sp/>rng(initValue);</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::RNG<sp/>rng;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amount1<sp/>=<sp/>(int)<sp/>(mSrc.rows<sp/>*<sp/>mSrc.cols<sp/>*<sp/>pa);</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>amount2<sp/>=<sp/>(int)<sp/>(mSrc.rows<sp/>*<sp/>mSrc.cols<sp/>*<sp/>pb);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>mSaltPepper<sp/>=<sp/>cv::Mat(mSrc.size(),<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>mSrc.convertTo(mSaltPepper,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Vec3b<sp/>black;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>black.val[0]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/>black.val[1]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>black.val[2]<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Vec3b<sp/>white;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>white.val[0]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/>white.val[1]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/>white.val[2]<sp/>=<sp/>255;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;<sp/>counter<sp/>&lt;<sp/>amount1;<sp/>counter++){</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSaltPepper.at&lt;cv::Vec3b&gt;(rng.uniform(0,<sp/>mSaltPepper.rows),<sp/>rng.uniform(0,<sp/>mSaltPepper.cols))<sp/>=<sp/>black;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>counter<sp/>=<sp/>0;<sp/>counter<sp/>&lt;<sp/>amount2;<sp/>counter++){</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSaltPepper.at&lt;cv::Vec3b&gt;(rng.uniform(0,<sp/>mSaltPepper.rows),<sp/>rng.uniform(0,<sp/>mSaltPepper.cols))<sp/>=<sp/>white;</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/>mSaltPepper.convertTo(mDst,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="222"><highlight class="normal">}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1af13c2dc0496079f2d6ffbc6ba1197db8" kindref="member">Camera::AddCosmicRay</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>mSrc,<sp/>cv::Mat<sp/>&amp;mDst,<sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>probThreshhold,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>randOffset,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>maxSize){</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64<sp/>initValue<sp/>=<sp/>CurrentSimNanos;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::RNG<sp/>rng((uint64)<sp/>(initValue<sp/>+<sp/>time(0)<sp/>+<sp/>randOffset));</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>prob<sp/>=<sp/>(float)<sp/>(rng.uniform(0.0,<sp/>1.0));</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(prob<sp/>&gt;<sp/>probThreshhold)<sp/>{</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Mat<sp/>mCosmic<sp/>=<sp/>cv::Mat(mSrc.size(),<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mSrc.convertTo(mCosmic,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>x<sp/>=<sp/>rng.uniform(0,<sp/>mCosmic.rows);</highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>y<sp/>=<sp/>rng.uniform(0,<sp/>mCosmic.cols);</highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltax<sp/>=<sp/>rng.uniform(-maxSize/2,<sp/>maxSize/2);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>deltay<sp/>=<sp/>rng.uniform(-maxSize/2,<sp/>maxSize/2);</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point<sp/>p1<sp/>=<sp/>cv::Point(x,<sp/>y);</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::Point<sp/>p2<sp/>=<sp/>cv::Point(x<sp/>+<sp/>deltax,<sp/>y<sp/>+<sp/>deltay);</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>line(mCosmic,<sp/>p1,<sp/>p2,<sp/>cv::Scalar(255,<sp/>255,<sp/>255),<sp/>1,<sp/>cv::LINE_8);</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mCosmic.convertTo(mDst,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="255"><highlight class="normal">}</highlight></codeline>
<codeline lineno="256"><highlight class="normal"></highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1ac154634a12c1a982f3fdf857effae4a4" kindref="member">Camera::AddCosmicRayBurst</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>cv::Mat<sp/>mSrc,<sp/>cv::Mat<sp/>&amp;mDst,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>num){</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>mCosmic<sp/>=<sp/>cv::Mat(mSrc.size(),<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/>mSrc.convertTo(mCosmic,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>std::round(num);<sp/>i++){</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1af13c2dc0496079f2d6ffbc6ba1197db8" kindref="member">AddCosmicRay</ref>(mCosmic,<sp/>mCosmic,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(1/(std::pow(num,2))),<sp/>i+1,<sp/>50);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>mCosmic.convertTo(mDst,<sp/>mSrc.type());</highlight></codeline>
<codeline lineno="274"><highlight class="normal">}</highlight></codeline>
<codeline lineno="275"><highlight class="normal"></highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1a71f3900a3a0b4b2cb8e92ef4ef329608" kindref="member">Camera::ApplyFilters</ref>(cv::Mat<sp/>mSource,<sp/>cv::Mat<sp/>&amp;mDst,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>gaussian,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>darkCurrent,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>saltPepper,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosmicRays,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>blurparam){</highlight></codeline>
<codeline lineno="289"><highlight class="normal"></highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>mFilters(mSource.size(),<sp/>mSource.type());</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/>mSource.convertTo(mFilters,<sp/>mSource.type());</highlight></codeline>
<codeline lineno="292"><highlight class="normal"></highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_camera_1aa71a5aeac5490f0ff936ae02fc1281ee" kindref="member">gaussian</ref><sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>2;</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1aa6fe85698740f93f5c13ae8e1d6389c0" kindref="member">AddGaussianNoise</ref>(mFilters,<sp/>mFilters,<sp/>0,<sp/><ref refid="class_camera_1aa71a5aeac5490f0ff936ae02fc1281ee" kindref="member">gaussian</ref><sp/>*<sp/>scale);</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::threshold(mFilters,<sp/>mFilters,<sp/><ref refid="class_camera_1aa71a5aeac5490f0ff936ae02fc1281ee" kindref="member">gaussian</ref>*6,<sp/>255,<sp/>cv::THRESH_TOZERO);</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(blurparam<sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blurSize<sp/>=<sp/>(int)<sp/>std::round(blurparam);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(blurSize%2<sp/>==<sp/>0){blurSize+=1;}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>blur(mFilters,<sp/>mFilters,<sp/>cv::Size(blurSize,<sp/>blurSize),<sp/>cv::Point(-1<sp/>,<sp/>-1));</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_camera_1a1797f5df303499ca09ed9c793284d672" kindref="member">darkCurrent</ref><sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>15;</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1aa6fe85698740f93f5c13ae8e1d6389c0" kindref="member">AddGaussianNoise</ref>(mFilters,<sp/>mFilters,<sp/><ref refid="class_camera_1a1797f5df303499ca09ed9c793284d672" kindref="member">darkCurrent</ref><sp/>*<sp/>scale,<sp/>0.0);</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(this-&gt;hsv[0])+abs(this-&gt;hsv[1])+abs(this-&gt;hsv[2])<sp/>&gt;<sp/>0.00001)<sp/>{</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1ac9a2ccfffeaca1e1dca7dfe18ea8af1f" kindref="member">HSVAdjust</ref>(mFilters,<sp/>mFilters);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(abs(this-&gt;<ref refid="class_camera_1a41d08cf5cc5bf60a452621c112b38c6f" kindref="member">bgrPercent</ref>[0])+abs(this-&gt;<ref refid="class_camera_1a41d08cf5cc5bf60a452621c112b38c6f" kindref="member">bgrPercent</ref>[1])+abs(this-&gt;<ref refid="class_camera_1a41d08cf5cc5bf60a452621c112b38c6f" kindref="member">bgrPercent</ref>[2])<sp/>!=<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1a2b51dc87cfbed06b53cbbf91d051e232" kindref="member">BGRAdjustPercent</ref>(mFilters,<sp/>mFilters);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(<ref refid="class_camera_1a2f1d2d193581e45fd9c69fd812ff105b" kindref="member">saltPepper</ref><sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">float</highlight><highlight class="normal"><sp/>scale<sp/>=<sp/>0.00002f;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1a8547437f1b265c7ccd0eb64f1f657c46" kindref="member">AddSaltPepper</ref>(mFilters,<sp/>mFilters,<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(<ref refid="class_camera_1a2f1d2d193581e45fd9c69fd812ff105b" kindref="member">saltPepper</ref><sp/>*<sp/>scale),<sp/>(</highlight><highlight class="keywordtype">float</highlight><highlight class="normal">)<sp/>(<ref refid="class_camera_1a2f1d2d193581e45fd9c69fd812ff105b" kindref="member">saltPepper</ref><sp/>*<sp/>scale));</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<ref refid="class_camera_1a986bf915f97942830f30960dea3e17c0" kindref="member">cosmicRays</ref><sp/>&gt;<sp/>0){</highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1ac154634a12c1a982f3fdf857effae4a4" kindref="member">AddCosmicRayBurst</ref>(mFilters,<sp/>mFilters,<sp/>std::round(<ref refid="class_camera_1a986bf915f97942830f30960dea3e17c0" kindref="member">cosmicRays</ref>));</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/>mFilters.convertTo(mDst,<sp/>mSource.type());</highlight></codeline>
<codeline lineno="322"><highlight class="normal">}</highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_camera_1af4bf89b6085db7818472fa5e8beabd7b" kindref="member">Camera::UpdateState</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="329"><highlight class="normal">{</highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;CurrentSimNanos<sp/>=<sp/>CurrentSimNanos;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>std::string<sp/>localPath;</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>CameraImageMsgPayload<sp/>imageBuffer<sp/>=<sp/>{};</highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/>CameraImageMsgPayload<sp/>imageOut;</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>CameraConfigMsgPayload<sp/>cameraMsg;</highlight></codeline>
<codeline lineno="335"><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>zero<sp/>output<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>imageOut<sp/>=<sp/>this-&gt;<ref refid="class_camera_1ac89653fb6abfb9372d1e0a041bca16c6" kindref="member">imageOutMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg<sp/>=<sp/>this-&gt;<ref refid="class_camera_1ac1467792c8022371b3c58a63f6d2d872" kindref="member">cameraConfigOutMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.cameraID<sp/>=<sp/>this-&gt;<ref refid="class_camera_1ac98a0e4b34543baf7087d8726caab00f" kindref="member">cameraID</ref>;</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(cameraMsg.parentName,<sp/>this-&gt;parentName);</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.resolution[0]<sp/>=<sp/>this-&gt;<ref refid="class_camera_1af733dc29717b6a857c653faadb2f4207" kindref="member">resolution</ref>[0];</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.resolution[1]<sp/>=<sp/>this-&gt;<ref refid="class_camera_1af733dc29717b6a857c653faadb2f4207" kindref="member">resolution</ref>[1];</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.renderRate<sp/>=<sp/>this-&gt;<ref refid="class_camera_1adc5c8a97b8be7040a0858296327f0536" kindref="member">renderRate</ref>;</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.fieldOfView<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a29eda16acfc0ef5450b91c70783f7220" kindref="member">fieldOfView</ref>;</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.isOn<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a6e555dcd324da77b0e539dbd3a6b2a9f" kindref="member">cameraIsOn</ref>;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(this-&gt;<ref refid="class_camera_1a8cb7cc4cbbc1fd1226fa3e3a93768104" kindref="member">cameraPos_B</ref>,<sp/>cameraMsg.cameraPos_B);</highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(this-&gt;<ref refid="class_camera_1ad203ad6b5dd0deea9b843bd70436e3fa" kindref="member">sigma_CB</ref>,<sp/>cameraMsg.sigma_CB);</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/>strcpy(cameraMsg.skyBox,<sp/>this-&gt;skyBox);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.postProcessingOn<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a484685fbadc3869dd91916da34460dac" kindref="member">postProcessingOn</ref>;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.ppAperture<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a63e84890328d06ad4078c3d2a778541e" kindref="member">ppAperture</ref>;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.ppFocalLength<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a0fb9601100d8a0880bc03439f2130bcb" kindref="member">ppFocalLength</ref>;</highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.ppFocusDistance<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a1826a29808086a5db60aeb6c8476af14" kindref="member">ppFocusDistance</ref>;</highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/>cameraMsg.ppMaxBlurSize<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a8ea2703b0444fb445904dd29dd1ad07f" kindref="member">ppMaxBlurSize</ref>;</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1ac1467792c8022371b3c58a63f6d2d872" kindref="member">cameraConfigOutMsg</ref>.write(&amp;cameraMsg,<sp/>this-&gt;moduleID,<sp/>CurrentSimNanos);</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>cv::Mat<sp/>imageCV,<sp/>blurred;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_camera_1a5c4f779091d7dc941e08fd48b36b7f4e" kindref="member">saveDir</ref><sp/>!=</highlight><highlight class="stringliteral">&quot;&quot;</highlight><highlight class="normal">){</highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>localPath<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a5c4f779091d7dc941e08fd48b36b7f4e" kindref="member">saveDir</ref><sp/>+<sp/>std::to_string(CurrentSimNanos*1E-9)<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="class_camera_1a15aa5e59fc1e6916debbad5f18c694e4" kindref="member">imageInMsg</ref>.isLinked())</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageBuffer<sp/>=<sp/>this-&gt;<ref refid="class_camera_1a15aa5e59fc1e6916debbad5f18c694e4" kindref="member">imageInMsg</ref>();</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1a06ab4e9ab796dfeb6e48d9196d915a38" kindref="member">sensorTimeTag</ref><sp/>=<sp/>this-&gt;<ref refid="class_camera_1a15aa5e59fc1e6916debbad5f18c694e4" kindref="member">imageInMsg</ref>.timeWritten();</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Added<sp/>for<sp/>debugging<sp/>purposes*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="class_camera_1ac1203d5a943e34d2dbe4fc3454cf115f" kindref="member">filename</ref>.empty()){</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageCV<sp/>=<sp/>imread(this-&gt;<ref refid="class_camera_1ac1203d5a943e34d2dbe4fc3454cf115f" kindref="member">filename</ref>,<sp/>cv::IMREAD_COLOR);</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1a71f3900a3a0b4b2cb8e92ef4ef329608" kindref="member">ApplyFilters</ref>(imageCV,<sp/>blurred,<sp/>this-&gt;gaussian,<sp/>this-&gt;darkCurrent,<sp/>this-&gt;saltPepper,<sp/>this-&gt;cosmicRays,<sp/>this-&gt;<ref refid="class_camera_1a69ae4c8ba7b9c7d1582eac3c5a2b8c3b" kindref="member">blurParam</ref>);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_camera_1aefb71d0008ca7d243df712c775e88e78" kindref="member">saveImages</ref><sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cv::imwrite(localPath,<sp/>blurred))<sp/>{</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1a8e3435a274687f1d656ef1eea11c877d" kindref="member">bskLogger</ref>.bskLog(BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;camera:<sp/>wasn&apos;t<sp/>able<sp/>to<sp/>save<sp/>the<sp/>camera<sp/>module<sp/>image&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(imageBuffer.valid<sp/>==<sp/>1<sp/>&amp;&amp;<sp/>imageBuffer.timeTag<sp/>&gt;=<sp/>CurrentSimNanos){</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>vectorBuffer((</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)imageBuffer.imagePointer,<sp/>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)imageBuffer.imagePointer<sp/>+<sp/>imageBuffer.imageBufferLength);</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageCV<sp/>=<sp/>cv::imdecode(vectorBuffer,<sp/>cv::IMREAD_COLOR);</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1a71f3900a3a0b4b2cb8e92ef4ef329608" kindref="member">ApplyFilters</ref>(imageCV,<sp/>blurred,<sp/>this-&gt;gaussian,<sp/>this-&gt;darkCurrent,<sp/>this-&gt;saltPepper,<sp/>this-&gt;cosmicRays,<sp/>this-&gt;<ref refid="class_camera_1a69ae4c8ba7b9c7d1582eac3c5a2b8c3b" kindref="member">blurParam</ref>);</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_camera_1aefb71d0008ca7d243df712c775e88e78" kindref="member">saveImages</ref><sp/>==<sp/>1){</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!cv::imwrite(localPath,<sp/>blurred))<sp/>{</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_camera_1a8e3435a274687f1d656ef1eea11c877d" kindref="member">bskLogger</ref>.bskLog(BSK_WARNING,<sp/></highlight><highlight class="stringliteral">&quot;camera:<sp/>wasn&apos;t<sp/>able<sp/>to<sp/>save<sp/>the<sp/>camera<sp/>module<sp/>image&quot;</highlight><highlight class="normal"><sp/>);</highlight></codeline>
<codeline lineno="389"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;pointImageOut<sp/>!=<sp/>NULL)<sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(this-&gt;pointImageOut);</highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;pointImageOut<sp/>=<sp/>NULL;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;unsigned<sp/>char&gt;<sp/>buf;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;int&gt;<sp/>compression;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>compression.push_back(0);</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>cv::imencode(</highlight><highlight class="stringliteral">&quot;.png&quot;</highlight><highlight class="normal">,<sp/>blurred,<sp/>buf,<sp/>compression);</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageOut.valid<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageOut.timeTag<sp/>=<sp/>imageBuffer.timeTag;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageOut.cameraID<sp/>=<sp/>imageBuffer.cameraID;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageOut.imageType<sp/>=<sp/>imageBuffer.imageType;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageOut.imageBufferLength<sp/>=<sp/>(int32_t)buf.size();</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;pointImageOut<sp/>=<sp/>malloc(imageOut.imageBufferLength*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>memcpy(this-&gt;pointImageOut,<sp/>&amp;buf[0],<sp/>imageOut.imageBufferLength*</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal">));</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>imageOut.imagePointer<sp/>=<sp/>this-&gt;pointImageOut;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1ac89653fb6abfb9372d1e0a041bca16c6" kindref="member">imageOutMsg</ref>.write(&amp;imageOut,<sp/>this-&gt;moduleID,<sp/>CurrentSimNanos);</highlight></codeline>
<codeline lineno="412"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_camera_1ac89653fb6abfb9372d1e0a041bca16c6" kindref="member">imageOutMsg</ref>.write(&amp;imageOut,<sp/>this-&gt;moduleID,<sp/>CurrentSimNanos);</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;}</highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/></highlight></codeline>
<codeline lineno="420"><highlight class="normal">}</highlight></codeline>
<codeline lineno="421"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/simulation/sensors/camera/camera.cpp"/>
  </compounddef>
</doxygen>
