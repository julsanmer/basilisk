<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="extended_state_vector_8cpp" kind="file" language="C++">
    <compoundname>extendedStateVector.cpp</compoundname>
    <includes refid="extended_state_vector_8h" local="yes">extendedStateVector.h</includes>
    <incdepgraph>
      <node id="8">
        <label>dynParamManager.h</label>
        <link refid="dyn_param_manager_8h_source"/>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>dynamicEffector.h</label>
        <link refid="dynamic_effector_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>../_GeneralModuleFiles/dynamicObject.h</label>
        <link refid="dynamic_object_8h_source"/>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.cpp</label>
        <link refid="extended_state_vector_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>extendedStateVector.h</label>
        <link refid="extended_state_vector_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stateData.h</label>
        <link refid="state_data_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="13">
        <label>stateEffector.h</label>
        <link refid="state_effector_8h_source"/>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>stateVecIntegrator.h</label>
        <link refid="state_vec_integrator_8h_source"/>
        <childnode refid="11" relation="include">
        </childnode>
      </node>
      <node id="7">
        <label>Eigen/Dense</label>
      </node>
      <node id="4">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="14">
        <label>architecture/utilities/avsEigenMRP.h</label>
      </node>
      <node id="5">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="16">
        <label>functional</label>
      </node>
      <node id="10">
        <label>map</label>
      </node>
      <node id="9">
        <label>stdint.h</label>
      </node>
      <node id="17">
        <label>unordered_map</label>
      </node>
      <node id="11">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2023,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;extendedStateVector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1ade96a207c9dd26eab2714b6abc36e04f" kindref="member">ExtendedStateVector::fromStates</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs)</highlight></codeline>
<codeline lineno="23"><highlight class="normal">{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fromStateData(dynPtrs,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_state_data" kindref="compound">StateData</ref>&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">data</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">data</ref>.getState();<sp/>});</highlight></codeline>
<codeline lineno="25"><highlight class="normal">}</highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a1f9ff2051c9ba398c5293d93d59e8638" kindref="member">ExtendedStateVector::fromStateDerivs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs)</highlight></codeline>
<codeline lineno="28"><highlight class="normal">{</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>fromStateData(dynPtrs,<sp/>[](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_state_data" kindref="compound">StateData</ref>&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">data</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">data</ref>.getStateDeriv();<sp/>});</highlight></codeline>
<codeline lineno="30"><highlight class="normal">}</highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">ExtendedStateVector::map</ref>(</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;Eigen::MatrixXd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd&amp;)&gt;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>functor)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="35"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>.reserve(this-&gt;<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">size</ref>());</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>[<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateMatrix</ref>]<sp/>:<sp/>*<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">this</ref>)<sp/>{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName]<sp/>=<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>.emplace(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateMatrix</ref>));</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="45"><highlight class="normal">}</highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1adcf63d1503aec1940c312896948b8a4c" kindref="member">ExtendedStateVector::apply</ref>(</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd&amp;)&gt;<sp/>functor)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="49"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>[<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateMatrix</ref>]<sp/>:<sp/>*<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">this</ref>)<sp/>{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName]<sp/>=<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>;</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateMatrix</ref>);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="54"><highlight class="normal">}</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a01a050cbaf03b6ecaac6dac86b2a1d4f" kindref="member">ExtendedStateVector::modify</ref>(</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/>Eigen::MatrixXd&amp;)&gt;<sp/>functor)</highlight></codeline>
<codeline lineno="58"><highlight class="normal">{</highlight></codeline>
<codeline lineno="59"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>[<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateMatrix</ref>]<sp/>:<sp/>*<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">this</ref>)<sp/>{</highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;<sp/>[<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName]<sp/>=<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">extendedStateId</ref>;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateMatrix</ref>);</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="63"><highlight class="normal">}</highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a0023fb1d3a0bc38f2944c7487311e550" kindref="member">ExtendedStateVector::operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref>&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="66"><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_extended_state_vector_1a01a050cbaf03b6ecaac6dac86b2a1d4f" kindref="member">modify</ref>([&amp;rhs](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>stateName,</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Eigen::MatrixXd&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">thisState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">thisState</ref><sp/>+=<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">rhs</ref>.at({<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,<sp/>stateName});</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="74"><highlight class="normal">}</highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a69226a43e8356d1b590bd309717f45a5" kindref="member">ExtendedStateVector::operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rhs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="77"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">map</ref>([rhs](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>stateName,</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">thisState</ref>)<sp/>{<sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">thisState</ref><sp/>*<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">rhs</ref>;<sp/>});</highlight></codeline>
<codeline lineno="81"><highlight class="normal">}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a4c85ff51b5ec2be545d8658fb07d46ce" kindref="member">ExtendedStateVector::setStates</ref>(std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_extended_state_vector_1adcf63d1503aec1940c312896948b8a4c" kindref="member">apply</ref>([</highlight><highlight class="keyword">this</highlight><highlight class="normal">,<sp/>&amp;dynPtrs](</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>,</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;<sp/>stateName,</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">thisState</ref>)<sp/>{</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_state_data" kindref="compound">StateData</ref>&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateData</ref><sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynPtrs.at(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynObjIndex</ref>)-&gt;dynManager.stateContainer.stateMap.at(stateName);</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateData</ref>.setState(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">thisState</ref>);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="92"><highlight class="normal">}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref></highlight></codeline>
<codeline lineno="95"><highlight class="normal">ExtendedStateVector::fromStateData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs,</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;Eigen::MatrixXd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_state_data" kindref="compound">StateData</ref>&amp;)&gt;<sp/>functor)</highlight></codeline>
<codeline lineno="97"><highlight class="normal">{</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynIndex</ref><sp/>=<sp/>0;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynIndex</ref><sp/>&lt;<sp/>dynPtrs.size();<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynIndex</ref>++)<sp/>{</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal">&amp;&amp;<sp/>[stateName,<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateData</ref>]<sp/>:</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dynPtrs.<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">at</ref>(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynIndex</ref>)-&gt;dynManager.stateContainer.stateMap)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>.emplace(std::make_pair(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">dynIndex</ref>,<sp/>stateName),<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>(<ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">stateData</ref>));</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="108"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.cpp"/>
  </compounddef>
</doxygen>
