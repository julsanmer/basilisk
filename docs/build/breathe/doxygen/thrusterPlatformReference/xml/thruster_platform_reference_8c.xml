<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="thruster_platform_reference_8c" kind="file" language="C++">
    <compoundname>thrusterPlatformReference.c</compoundname>
    <includes refid="thruster_platform_reference_8h" local="yes">thrusterPlatformReference.h</includes>
    <includes local="yes">string.h</includes>
    <includes local="no">math.h</includes>
    <includes local="yes">architecture/utilities/linearAlgebra.h</includes>
    <includes local="yes">architecture/utilities/rigidBodyKinematics.h</includes>
    <includes local="yes">architecture/utilities/astroConstants.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c</label>
        <link refid="thruster_platform_reference_8c"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>thrusterPlatformReference.h</label>
        <link refid="thruster_platform_reference_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="15">
        <label>architecture/utilities/astroConstants.h</label>
      </node>
      <node id="4">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="13">
        <label>architecture/utilities/linearAlgebra.h</label>
      </node>
      <node id="14">
        <label>architecture/utilities/rigidBodyKinematics.h</label>
      </node>
      <node id="10">
        <label>cMsgCInterface/BodyHeadingMsg_C.h</label>
      </node>
      <node id="8">
        <label>cMsgCInterface/CmdTorqueBodyMsg_C.h</label>
      </node>
      <node id="9">
        <label>cMsgCInterface/HingedRigidBodyMsg_C.h</label>
      </node>
      <node id="6">
        <label>cMsgCInterface/RWArrayConfigMsg_C.h</label>
      </node>
      <node id="7">
        <label>cMsgCInterface/RWSpeedMsg_C.h</label>
      </node>
      <node id="5">
        <label>cMsgCInterface/VehicleConfigMsg_C.h</label>
      </node>
      <node id="12">
        <label>math.h</label>
      </node>
      <node id="3">
        <label>stdint.h</label>
      </node>
      <node id="11">
        <label>string.h</label>
      </node>
    </incdepgraph>
    <sectiondef kind="var">
      <memberdef kind="variable" id="thruster_platform_reference_8c_1ac29df3dcbefa1ce189e5990bde994025" prot="public" static="no" mutable="no">
        <type>const double</type>
        <definition>const double epsilon</definition>
        <argsstring></argsstring>
        <name>epsilon</name>
        <initializer>= 1e-12</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="28" column="14" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="28" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <sectiondef kind="func">
      <memberdef kind="function" id="thruster_platform_reference_8c_1a8244c6e4cb265f6dedffaab9aafad85c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void SelfInit_thrusterPlatformReference</definition>
        <argsstring>(ThrusterPlatformReferenceConfig *configData, int64_t moduleID)</argsstring>
        <name>SelfInit_thrusterPlatformReference</name>
        <param>
          <type><ref refid="struct_thruster_platform_reference_config" kindref="compound">ThrusterPlatformReferenceConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method initializes the output messages for this module. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with this module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="35" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="35" bodyend="41"/>
      </memberdef>
      <memberdef kind="function" id="thruster_platform_reference_8c_1a19bcbe9fa9c177a830ce70f08186ed47" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Reset_thrusterPlatformReference</definition>
        <argsstring>(ThrusterPlatformReferenceConfig *configData, uint64_t callTime, int64_t moduleID)</argsstring>
        <name>Reset_thrusterPlatformReference</name>
        <param>
          <type><ref refid="struct_thruster_platform_reference_config" kindref="compound">ThrusterPlatformReferenceConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>callTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method performs a complete reset of the module. Local module variables that retain time varying states between function calls are reset to their default values. <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callTime</parametername>
</parameternamelist>
<parameterdescription>
<para>[ns] time the method is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>read in the RW configuration message</para>
</listitem></itemizedlist>
</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="51" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="51" bodyend="65"/>
      </memberdef>
      <memberdef kind="function" id="thruster_platform_reference_8c_1aeddd426bd47a89d5046d433f3433f646" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void Update_thrusterPlatformReference</definition>
        <argsstring>(ThrusterPlatformReferenceConfig *configData, uint64_t callTime, int64_t moduleID)</argsstring>
        <name>Update_thrusterPlatformReference</name>
        <param>
          <type><ref refid="struct_thruster_platform_reference_config" kindref="compound">ThrusterPlatformReferenceConfig</ref> *</type>
          <declname>configData</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>callTime</declname>
        </param>
        <param>
          <type>int64_t</type>
          <declname>moduleID</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This method updates the platformAngles message based on the updated information about the system center of mass <simplesect kind="return"><para>void </para>
</simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>configData</parametername>
</parameternamelist>
<parameterdescription>
<para>The configuration data associated with the module </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>callTime</parametername>
</parameternamelist>
<parameterdescription>
<para>The clock time at which the function was called (nanoseconds) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>moduleID</parametername>
</parameternamelist>
<parameterdescription>
<para>The module identifier </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
<para><itemizedlist>
<listitem><para>Create and assign message buffers</para>
</listitem></itemizedlist>
</para>
<para>compute CM position w.r.t. M frame origin, in M coordinates</para>
<para>compute net RW momentum</para>
<para>compute offset vector</para>
<para>recompute thrust direction and FM matrix based on offset</para>
<para>extract theta1 and theta2 angles</para>
<para>write output spinning body messages</para>
<para>define mapping between final platform frame and body frame FB</para>
<para>compute thruster direction in body frame coordinates</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="74" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="74" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="thruster_platform_reference_8c_1a986b40f1757bcd918a83fecd6615476a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tprComputeFirstRotation</definition>
        <argsstring>(double THat_F[3], double rHat_CM_F[3], double F1M[3][3])</argsstring>
        <name>tprComputeFirstRotation</name>
        <param>
          <type>double</type>
          <declname>THat_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>rHat_CM_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>F1M</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="154" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="154" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="thruster_platform_reference_8c_1a835bf3903099b92af99497179bb1781d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tprComputeSecondRotation</definition>
        <argsstring>(double r_CM_F[3], double r_TM_F[3], double r_CT_F[3], double THat_F[3], double F2F1[3][3])</argsstring>
        <name>tprComputeSecondRotation</name>
        <param>
          <type>double</type>
          <declname>r_CM_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>r_TM_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>r_CT_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>THat_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>F2F1</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="193" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="193" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="thruster_platform_reference_8c_1ab20cf41e7f89d7ba5efcefad3ebc542e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tprComputeThirdRotation</definition>
        <argsstring>(double e_theta[3], double F2M[3][3], double F3F2[3][3])</argsstring>
        <name>tprComputeThirdRotation</name>
        <param>
          <type>double</type>
          <declname>e_theta</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>F2M</declname>
          <array>[3][3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>F3F2</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="234" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="234" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="thruster_platform_reference_8c_1a2b1160220ce1285da1434b8841b67cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void tprComputeFinalRotation</definition>
        <argsstring>(double r_CM_M[3], double r_TM_F[3], double T_F[3], double FM[3][3])</argsstring>
        <name>tprComputeFinalRotation</name>
        <param>
          <type>double</type>
          <declname>r_CM_M</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>r_TM_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>T_F</declname>
          <array>[3]</array>
        </param>
        <param>
          <type>double</type>
          <declname>FM</declname>
          <array>[3][3]</array>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
<para>define unit vectors of CM direction in M coordinates and thrust direction in F coordinates</para>
<para>compute first rotation to make T_F parallel to r_CM</para>
<para>rotate r_CM_F</para>
<para>compute position of CM w.r.t. thrust application point T</para>
<para>compute second rotation to zero the offset between T_F and r_CT_F</para>
<para>define intermediate platform rotation F2M</para>
<para>compute third rotation to make the frame compliant with the platform constraint</para>
<para>define final platform rotation FM</para>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" line="304" column="6" bodyfile="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c" bodystart="304" bodyend="343"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2023,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;thrusterPlatformReference.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;string.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/rigidBodyKinematics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/astroConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>epsilon<sp/>=<sp/>1e-12;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>module<sp/>tolerance<sp/>for<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>SelfInit_thrusterPlatformReference(<ref refid="struct_thruster_platform_reference_config" kindref="compound">ThrusterPlatformReferenceConfig</ref><sp/>*configData,<sp/>int64_t<sp/>moduleID)</highlight></codeline>
<codeline lineno="36"><highlight class="normal">{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>HingedRigidBodyMsg_C_init(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a422b1dea58318409aba1012cefd682ab" kindref="member">hingedRigidBodyRef1OutMsg</ref>);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>HingedRigidBodyMsg_C_init(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1aa8b4980e9dd1fdfbb2fd65c82783dec0" kindref="member">hingedRigidBodyRef2OutMsg</ref>);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/>BodyHeadingMsg_C_init(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a7b81453e5701157636c1efe558cd02b6" kindref="member">bodyHeadingOutMsg</ref>);</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>CmdTorqueBodyMsg_C_init(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a84d82a1c521ee0cae4fec82c0f287852" kindref="member">thrusterTorqueOutMsg</ref>);</highlight></codeline>
<codeline lineno="41"><highlight class="normal">}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Reset_thrusterPlatformReference(<ref refid="struct_thruster_platform_reference_config" kindref="compound">ThrusterPlatformReferenceConfig</ref><sp/>*configData,<sp/>uint64_t<sp/>callTime,<sp/>int64_t<sp/>moduleID)</highlight></codeline>
<codeline lineno="52"><highlight class="normal">{</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!VehicleConfigMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1ae5be8785ad14f033bd65765e4cb7631b" kindref="member">vehConfigInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_bskLog(configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a056303f9ce004076d0058fd4a56f6fc8" kindref="member">bskLogger</ref>,<sp/>BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;<sp/>thrusterPlatformReference.vehConfigInMsg<sp/>wasn&apos;t<sp/>connected.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(RWArrayConfigMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a85fd73541fec32e859c137522306bce0" kindref="member">rwConfigDataInMsg</ref>)<sp/>&amp;&amp;<sp/>RWSpeedMsg_C_isLinked(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a8474a6ea0dd759932ffb45565f91bf8a" kindref="member">rwSpeedsInMsg</ref>))<sp/>{</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a13f4cad83b120f2b2688f09177a3805a" kindref="member">momentumDumping</ref><sp/>=<sp/>Yes;</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1aa9649017daeb81c78212cfc75d96716c" kindref="member">rwConfigParams</ref><sp/>=<sp/>RWArrayConfigMsg_C_read(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a85fd73541fec32e859c137522306bce0" kindref="member">rwConfigDataInMsg</ref>);</highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a13f4cad83b120f2b2688f09177a3805a" kindref="member">momentumDumping</ref><sp/>=<sp/>No;</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="65"><highlight class="normal">}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>Update_thrusterPlatformReference(<ref refid="struct_thruster_platform_reference_config" kindref="compound">ThrusterPlatformReferenceConfig</ref><sp/>*configData,<sp/>uint64_t<sp/>callTime,<sp/>int64_t<sp/>moduleID)</highlight></codeline>
<codeline lineno="75"><highlight class="normal">{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/>VehicleConfigMsgPayload<sp/><sp/><sp/><sp/>vehConfigMsgIn<sp/>=<sp/>VehicleConfigMsg_C_read(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1ae5be8785ad14f033bd65765e4cb7631b" kindref="member">vehConfigInMsg</ref>);</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>RWSpeedMsgPayload<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rwSpeedMsgIn<sp/>=<sp/>RWSpeedMsg_C_read(&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a8474a6ea0dd759932ffb45565f91bf8a" kindref="member">rwSpeedsInMsg</ref>);</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>HingedRigidBodyMsgPayload<sp/><sp/>hingedRigidBodyRef1Out<sp/>=<sp/>HingedRigidBodyMsg_C_zeroMsgPayload();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>HingedRigidBodyMsgPayload<sp/><sp/>hingedRigidBodyRef2Out<sp/>=<sp/>HingedRigidBodyMsg_C_zeroMsgPayload();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>BodyHeadingMsgPayload<sp/><sp/><sp/><sp/><sp/><sp/>bodyHeadingOut<sp/>=<sp/>BodyHeadingMsg_C_zeroMsgPayload();</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>CmdTorqueBodyMsgPayload<sp/><sp/><sp/><sp/>thrusterTorqueOut<sp/>=<sp/>CmdTorqueBodyMsg_C_zeroMsgPayload();</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>MB[3][3];</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/>MRP2C(configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a081eca033a3839a2670e8eae2e5b5115" kindref="member">sigma_MB</ref>,<sp/>MB);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>B<sp/>to<sp/>M<sp/>DCM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CB_B[3];</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(vehConfigMsgIn.CoM_B,<sp/>r_CB_B);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>of<sp/>C<sp/>w.r.t.<sp/>B<sp/>in<sp/>B-frame<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CB_M[3];</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(MB,<sp/>r_CB_B,<sp/>r_CB_M);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>of<sp/>C<sp/>w.r.t.<sp/>B<sp/>in<sp/>M-frame<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CM_M[3];</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(r_CB_M,<sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a57637d3208e799dd9f4194c900a2f6d8" kindref="member">r_BM_M</ref>,<sp/>r_CM_M);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>of<sp/>C<sp/>w.r.t.<sp/>M<sp/>in<sp/>M-frame<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_TM_F[3];</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(configData-&gt;<ref refid="struct_thruster_platform_reference_config_1ab9d730a3537953da4d81b0bf86dacf0e" kindref="member">r_FM_F</ref>,<sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1af88d9ad51a3bc32c9ef1210fd294be79" kindref="member">r_TF_F</ref>,<sp/>r_TM_F);<sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>position<sp/>of<sp/>T<sp/>w.r.t.<sp/>M<sp/>in<sp/>F-frame<sp/>coordinates</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FM[3][3];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/>tprComputeFinalRotation(r_CM_M,<sp/>r_TM_F,<sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a5f392e2d1f1bfff2f88181f4a5de9513" kindref="member">T_F</ref>,<sp/>FM);</highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>vec3[3],<sp/>hs_B[3],<sp/>hs_M[3];</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/>v3SetZero(hs_B);</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i=0;<sp/>i&lt;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1aa9649017daeb81c78212cfc75d96716c" kindref="member">rwConfigParams</ref>.numRW;<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Scale(configData-&gt;<ref refid="struct_thruster_platform_reference_config_1aa9649017daeb81c78212cfc75d96716c" kindref="member">rwConfigParams</ref>.JsList[i]*rwSpeedMsgIn.wheelSpeeds[i],<sp/>&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1aa9649017daeb81c78212cfc75d96716c" kindref="member">rwConfigParams</ref>.GsMatrix_B[i*3],<sp/>vec3);</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Add(hs_B,<sp/>vec3,<sp/>hs_B);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/>m33tMultV3(MB,<sp/>hs_B,<sp/>hs_M);</highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T_M[3];</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>m33tMultV3(FM,<sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a5f392e2d1f1bfff2f88181f4a5de9513" kindref="member">T_F</ref>,<sp/>T_M);</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>d_M[3];</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(T_M,<sp/>hs_M,<sp/>d_M);</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(-configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a721db37bd6c73db68b095ed6397c5f32" kindref="member">K</ref>/v3Dot(T_M,<sp/>T_M),<sp/>d_M,<sp/>d_M);</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CMd_M[3];</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Add(r_CM_M,<sp/>d_M,<sp/>r_CMd_M);</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>tprComputeFinalRotation(r_CMd_M,<sp/>r_TM_F,<sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a5f392e2d1f1bfff2f88181f4a5de9513" kindref="member">T_F</ref>,<sp/>FM);</highlight></codeline>
<codeline lineno="119"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>hingedRigidBodyRef1Out.theta<sp/>=<sp/>atan2(FM[1][2],<sp/>FM[1][1]);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>hingedRigidBodyRef1Out.thetaDot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/>hingedRigidBodyRef2Out.theta<sp/>=<sp/>atan2(FM[2][0],<sp/>FM[0][0]);</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>hingedRigidBodyRef2Out.thetaDot<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/>HingedRigidBodyMsg_C_write(&amp;hingedRigidBodyRef1Out,<sp/>&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a422b1dea58318409aba1012cefd682ab" kindref="member">hingedRigidBodyRef1OutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/>HingedRigidBodyMsg_C_write(&amp;hingedRigidBodyRef2Out,<sp/>&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1aa8b4980e9dd1fdfbb2fd65c82783dec0" kindref="member">hingedRigidBodyRef2OutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FB[3][3];</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultM33(FM,<sp/>MB,<sp/>FB);</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>m33tMultV3(FB,<sp/>configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a5f392e2d1f1bfff2f88181f4a5de9513" kindref="member">T_F</ref>,<sp/>bodyHeadingOut.rHat_XB_B);</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(bodyHeadingOut.rHat_XB_B,<sp/>bodyHeadingOut.rHat_XB_B);</highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>output<sp/>body<sp/>heading<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/>BodyHeadingMsg_C_write(&amp;bodyHeadingOut,<sp/>&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a7b81453e5701157636c1efe558cd02b6" kindref="member">bodyHeadingOutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="140"><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>thruster<sp/>torque<sp/>on<sp/>the<sp/>system<sp/>in<sp/>body<sp/>frame<sp/>coordinates<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CM_F[3];</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(FM,<sp/>r_CM_M,<sp/>r_CM_F);</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_TC_F[3];</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Subtract(r_TM_F,<sp/>r_CM_F,<sp/>r_TC_F);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Torque_F[3];</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a5f392e2d1f1bfff2f88181f4a5de9513" kindref="member">T_F</ref>,<sp/>r_TC_F,<sp/>Torque_F);<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>the<sp/>opposite<sp/>of<sp/>torque<sp/>to<sp/>compensate<sp/>with<sp/>the<sp/>RWs</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>m33tMultV3(FB,<sp/>Torque_F,<sp/>thrusterTorqueOut.torqueRequestBody);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>write<sp/>output<sp/>commanded<sp/>torque<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>CmdTorqueBodyMsg_C_write(&amp;thrusterTorqueOut,<sp/>&amp;configData-&gt;<ref refid="struct_thruster_platform_reference_config_1a84d82a1c521ee0cae4fec82c0f287852" kindref="member">thrusterTorqueOutMsg</ref>,<sp/>moduleID,<sp/>callTime);</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tprComputeFirstRotation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>THat_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rHat_CM_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F1M[3][3])</highlight></codeline>
<codeline lineno="155"><highlight class="normal">{</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>principal<sp/>rotation<sp/>angle<sp/>phi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>phi<sp/>=<sp/>acos(<sp/>fmin(<sp/>fmax(<sp/>v3Dot(THat_F,<sp/>rHat_CM_F),<sp/>-1<sp/>),<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>principal<sp/>rotation<sp/>vector<sp/>e_phi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_phi[3];</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(THat_F,<sp/>rHat_CM_F,<sp/>e_phi);</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>If<sp/>phi<sp/>=<sp/>PI,<sp/>e_phi<sp/>can<sp/>be<sp/>any<sp/>vector<sp/>perpendicular<sp/>to<sp/>F_current_B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(phi-MPI)<sp/>&lt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi<sp/>=<sp/>MPI;</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(THat_F[0])<sp/>&gt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[0]<sp/>=<sp/>-(THat_F[1]+THat_F[2])<sp/>/<sp/>THat_F[0];</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(THat_F[1])<sp/>&gt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[1]<sp/>=<sp/>-(THat_F[0]+THat_F[2])<sp/>/<sp/>THat_F[1];</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_phi[2]<sp/>=<sp/>-(THat_F[0]+THat_F[1])<sp/>/<sp/>THat_F[2];</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(phi)<sp/>&lt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>phi<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>normalize<sp/>e_phi</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(e_phi,<sp/>e_phi);</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>intermediate<sp/>rotation<sp/>F1M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PRV_phi[3];</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(phi,<sp/>e_phi,<sp/>PRV_phi);</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/>PRV2C(PRV_phi,<sp/>F1M);</highlight></codeline>
<codeline lineno="191"><highlight class="normal">}</highlight></codeline>
<codeline lineno="192"><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tprComputeSecondRotation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CM_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_TM_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CT_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>THat_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F2F1[3][3])</highlight></codeline>
<codeline lineno="194"><highlight class="normal">{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>offset<sp/>vector<sp/>aVec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>aVec[3];</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(r_TM_F,<sp/>aVec);</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>a<sp/>=<sp/>v3Norm(aVec);</highlight></codeline>
<codeline lineno="199"><highlight class="normal"></highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>offset<sp/>vector<sp/>aVec</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>bVec[3];</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(r_CM_F,<sp/>bVec);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>b<sp/>=<sp/>v3Norm(bVec);</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c1<sp/>=<sp/>v3Norm(r_CT_F);</highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>psi;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(a)<sp/>&lt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>if<sp/>offset<sp/>a<sp/>=<sp/>0,<sp/>second<sp/>rotation<sp/>is<sp/>null</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psi<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>beta<sp/>=<sp/>acos(<sp/>-fmin(<sp/>fmax(<sp/>v3Dot(aVec,<sp/>THat_F)<sp/>/<sp/>a,<sp/>-1<sp/>),<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>nu<sp/>=<sp/>acos(<sp/>-fmin(<sp/>fmax(<sp/>v3Dot(aVec,<sp/>r_CT_F)<sp/>/<sp/>(a*c1),<sp/>-1<sp/>),<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>c2<sp/>=<sp/>a*cos(beta)<sp/>+<sp/>sqrt(b*b<sp/>-<sp/>a*a*sin(beta)*sin(beta));</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosGamma1<sp/>=<sp/>(a*a<sp/>+<sp/>b*b<sp/>-<sp/>c1*c1)<sp/>/<sp/>(2*a*b);</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cosGamma2<sp/>=<sp/>(a*a<sp/>+<sp/>b*b<sp/>-<sp/>c2*c2)<sp/>/<sp/>(2*a*b);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>psi<sp/>=<sp/>asin(<sp/>fmin(<sp/>fmax(<sp/>(c1*sin(nu)*cosGamma2<sp/>-<sp/>c2*sin(beta)*cosGamma1)/b,<sp/>-1<sp/>),<sp/>1<sp/>)<sp/>);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_psi[3];</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Cross(THat_F,<sp/>r_CT_F,<sp/>e_psi);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(e_psi,<sp/>e_psi);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"></highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>intermediate<sp/>rotation<sp/>F2F1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PRV_psi[3];</highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(psi,<sp/>e_psi,<sp/>PRV_psi);</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/>PRV2C(PRV_psi,<sp/>F2F1);</highlight></codeline>
<codeline lineno="232"><highlight class="normal">}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tprComputeThirdRotation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_theta[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F2M[3][3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F3F2[3][3])</highlight></codeline>
<codeline lineno="235"><highlight class="normal">{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e1<sp/>=<sp/>e_theta[0];<sp/><sp/></highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e2<sp/>=<sp/>e_theta[1];<sp/><sp/></highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e3<sp/>=<sp/>e_theta[2];</highlight></codeline>
<codeline lineno="239"><highlight class="normal"></highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>A<sp/>=<sp/>2<sp/>*<sp/>(F2M[1][0]*e2*e2<sp/>+<sp/>F2M[0][0]*e1*e2<sp/>+<sp/>F2M[2][0]*e2*e3)<sp/>-<sp/>F2M[1][0];</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>B<sp/>=<sp/>2<sp/>*<sp/>(F2M[2][0]*e1<sp/>-<sp/>F2M[0][0]*e3);</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>C<sp/>=<sp/>F2M[1][0];</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>Delta<sp/>=<sp/>B*B<sp/>-<sp/>4*A*C;</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>compute<sp/>exact<sp/>solution<sp/>or<sp/>best<sp/>solution<sp/>depending<sp/>on<sp/>Delta<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>t,<sp/>t1,<sp/>t2,<sp/>y,<sp/>y1,<sp/>y2,<sp/>theta;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(A)<sp/>&lt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(B)<sp/>&lt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>zero-th<sp/>order<sp/>equation<sp/>has<sp/>no<sp/>solution<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>solution<sp/>of<sp/>the<sp/>minimum<sp/>problem<sp/>is<sp/>theta<sp/>=<sp/>MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>MPI;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>first<sp/>order<sp/>equation</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>-<sp/>C<sp/>/<sp/>B;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>2*atan(t);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(Delta<sp/>&lt;<sp/>0)<sp/>{</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>second<sp/>order<sp/>equation<sp/>has<sp/>no<sp/>solution<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>solution<sp/>of<sp/>the<sp/>minimum<sp/>problem<sp/>is<sp/>found</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(B)<sp/>&lt;<sp/>epsilon)<sp/>{</highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="266"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="267"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>q<sp/>=<sp/>(A-C)<sp/>/<sp/>B;</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>(q<sp/>+<sp/>sqrt(q*q<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>(q<sp/>-<sp/>sqrt(q*q<sp/>+<sp/>1));</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y1<sp/>=<sp/>(A*t1*t1<sp/>+<sp/>B*t1<sp/>+<sp/>C)<sp/>/<sp/>(1<sp/>+<sp/>t1*t1);</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y2<sp/>=<sp/>(A*t2*t2<sp/>+<sp/>B*t2<sp/>+<sp/>C)<sp/>/<sp/>(1<sp/>+<sp/>t2*t2);</highlight></codeline>
<codeline lineno="272"><highlight class="normal"></highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>choose<sp/>which<sp/>returns<sp/>a<sp/>smaller<sp/>fcn<sp/>value<sp/>between<sp/>t1<sp/>and<sp/>t2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(y2)<sp/>&lt;<sp/>fabs(y1))<sp/>{</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>2*atan(t);</highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>y<sp/>=<sp/>(A*t*t<sp/>+<sp/>B*t<sp/>+<sp/>C)<sp/>/<sp/>(1<sp/>+<sp/>t*t);</highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>if<sp/>the<sp/>absolute<sp/>fcn<sp/>minimum<sp/>is<sp/>for<sp/>theta<sp/>=<sp/>MPI</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(A)<sp/>&lt;<sp/>fabs(y))<sp/>{</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>MPI;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t1<sp/>=<sp/>(-B<sp/>+<sp/>sqrt(Delta))<sp/>/<sp/>(2*A);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t2<sp/>=<sp/>(-B<sp/>-<sp/>sqrt(Delta))<sp/>/<sp/>(2*A);</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t1;</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(fabs(t2)<sp/>&lt;<sp/>fabs(t1))<sp/>{</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>t<sp/>=<sp/>t2;</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>theta<sp/>=<sp/>2*atan(t);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="297"><highlight class="normal"></highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>compute<sp/>intermediate<sp/>rotation<sp/>F3F2</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>PRV_theta[3];</highlight></codeline>
<codeline lineno="300"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Scale(theta,<sp/>e_theta,<sp/>PRV_theta);</highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/>PRV2C(PRV_theta,<sp/>F3F2);</highlight></codeline>
<codeline lineno="302"><highlight class="normal">}</highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight></codeline>
<codeline lineno="304"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>tprComputeFinalRotation(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CM_M[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_TM_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>T_F[3],<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>FM[3][3])</highlight></codeline>
<codeline lineno="305"><highlight class="normal">{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rHat_CM_M[3];</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(r_CM_M,<sp/>rHat_CM_M);</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>THat_F[3];</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(T_F,<sp/>THat_F);</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>rHat_CM_F[3];</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Copy(rHat_CM_M,<sp/>rHat_CM_F);<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>assume<sp/>zero<sp/>initial<sp/>rotation<sp/>between<sp/>F<sp/>and<sp/>M</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F1M[3][3];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>tprComputeFirstRotation(THat_F,<sp/>rHat_CM_F,<sp/>F1M);</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CM_F[3];</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(F1M,<sp/>r_CM_M,<sp/>r_CM_F);</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>r_CT_F[3];</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Subtract(r_CM_F,<sp/>r_TM_F,<sp/>r_CT_F);</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F2F1[3][3];</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/>tprComputeSecondRotation(r_CM_F,<sp/>r_TM_F,<sp/>r_CT_F,<sp/>THat_F,<sp/>F2F1);</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F2M[3][3];</highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultM33(F2F1,<sp/>F1M,<sp/>F2M);</highlight></codeline>
<codeline lineno="333"><highlight class="normal"></highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>e_theta[3];</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultV3(F2M,<sp/>r_CM_M,<sp/>e_theta);</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/>v3Normalize(e_theta,<sp/>e_theta);</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>F3F2[3][3];</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/>tprComputeThirdRotation(e_theta,<sp/>F2M,<sp/>F3F2);</highlight></codeline>
<codeline lineno="340"><highlight class="normal"></highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/>m33MultM33(F3F2,<sp/>F2M,<sp/>FM);</highlight></codeline>
<codeline lineno="343"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/fswAlgorithms/effectorInterfaces/thrusterPlatformReference/thrusterPlatformReference.c"/>
  </compounddef>
</doxygen>
