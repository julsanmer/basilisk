<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="thruster_state_effector_8cpp" kind="file" language="C++">
    <compoundname>thrusterStateEffector.cpp</compoundname>
    <includes local="no">cstring</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cmath</includes>
    <includes refid="thruster_state_effector_8h" local="yes">thrusterStateEffector.h</includes>
    <includes local="yes">architecture/utilities/linearAlgebra.h</includes>
    <includes local="yes">architecture/utilities/astroConstants.h</includes>
    <includes local="yes">architecture/utilities/macroDefinitions.h</includes>
    <includes local="yes">architecture/utilities/avsEigenSupport.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/Thrusters/thrusterStateEffector/thrusterStateEffector.cpp</label>
        <link refid="thruster_state_effector_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
        <childnode refid="21" relation="include">
        </childnode>
        <childnode refid="22" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>thrusterStateEffector.h</label>
        <link refid="thruster_state_effector_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
      </node>
      <node id="17">
        <label>Eigen/Dense</label>
      </node>
      <node id="11">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="15">
        <label>architecture/messaging/messaging.h</label>
      </node>
      <node id="14">
        <label>architecture/msgPayloadDefC/SCStatesMsgPayload.h</label>
      </node>
      <node id="13">
        <label>architecture/msgPayloadDefC/THRArrayOnTimeCmdMsgPayload.h</label>
      </node>
      <node id="12">
        <label>architecture/msgPayloadDefCpp/THROutputMsgPayload.h</label>
      </node>
      <node id="20">
        <label>architecture/utilities/astroConstants.h</label>
      </node>
      <node id="22">
        <label>architecture/utilities/avsEigenSupport.h</label>
      </node>
      <node id="16">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="19">
        <label>architecture/utilities/linearAlgebra.h</label>
      </node>
      <node id="21">
        <label>architecture/utilities/macroDefinitions.h</label>
      </node>
      <node id="4">
        <label>cmath</label>
      </node>
      <node id="2">
        <label>cstring</label>
      </node>
      <node id="3">
        <label>iostream</label>
      </node>
      <node id="10">
        <label>simulation/dynamics/_GeneralModuleFiles/BodyToHubInfo.h</label>
      </node>
      <node id="9">
        <label>simulation/dynamics/_GeneralModuleFiles/THROperation.h</label>
      </node>
      <node id="8">
        <label>simulation/dynamics/_GeneralModuleFiles/THRSimConfig.h</label>
      </node>
      <node id="7">
        <label>simulation/dynamics/_GeneralModuleFiles/stateData.h</label>
      </node>
      <node id="6">
        <label>simulation/dynamics/_GeneralModuleFiles/stateEffector.h</label>
      </node>
      <node id="18">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2022,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cmath&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;thrusterStateEffector.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/astroConstants.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/macroDefinitions.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/avsEigenSupport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="class_thruster_state_effector_1a8720fa1a022d4c407497ef93a891746d" kindref="member">ThrusterStateEffector::ThrusterStateEffector</ref>()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>zero<sp/>the<sp/>mass<sp/>props<sp/>and<sp/>mass<sp/>prop<sp/>rates<sp/>contributions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.mEff<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.rEff_CB_B.fill(0.0);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.IEffPntB_B.fill(0.0);</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.rEffPrime_CB_B.fill(0.0);</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effProps.IEffPrimePntB_B.fill(0.0);</highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>the<sp/>state<sp/>derivative<sp/>contribution<sp/>for<sp/>mass<sp/>rate</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;stateDerivContribution.resize(1);</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;stateDerivContribution.setZero();</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>internal<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>CallCounts<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;prevCommandTime<sp/>=<sp/>-1.0;<sp/><sp/></highlight><highlight class="comment">//<sp/>initialize<sp/>to<sp/>a<sp/>negative<sp/>number<sp/>to<sp/>allow<sp/>an<sp/>onTime<sp/>command<sp/>at<sp/>t=0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1ac8a2b6956a99be519a1657f76c2fd1e3" kindref="member">mDotTotal</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a928e885647c7a5e37dc2cbdf750656b7" kindref="member">nameOfKappaState</ref><sp/>=<sp/></highlight><highlight class="stringliteral">&quot;kappaState&quot;</highlight><highlight class="normal"><sp/>+<sp/>std::to_string(this-&gt;effectorID);</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effectorID++;</highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clear<sp/>all<sp/>vectors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.clear();</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>.clear();</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a22a84e537ef921d8d299350b4682c323" kindref="member">NewThrustCmds</ref>.clear();</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal">}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal">uint64_t<sp/>ThrusterStateEffector::effectorID<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"><ref refid="class_thruster_state_effector_1a0053e424af73bb482c5f570b6c2a1d01" kindref="member">ThrusterStateEffector::~ThrusterStateEffector</ref>()</highlight></codeline>
<codeline lineno="63"><highlight class="normal">{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Free<sp/>memory<sp/>to<sp/>avoid<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=0;<sp/>c&lt;this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>.size();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>free(this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>.at(c));</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;effectorID<sp/>=<sp/>1;<sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>reset<sp/>the<sp/>panel<sp/>ID*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="72"><highlight class="normal">}</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a8ab3a1d7a9479d22c68fdaee495c10be" kindref="member">ThrusterStateEffector::Reset</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Clear<sp/>out<sp/>any<sp/>currently<sp/>firing<sp/>thrusters<sp/>and<sp/>re-init<sp/>cmd<sp/>array</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a22a84e537ef921d8d299350b4682c323" kindref="member">NewThrustCmds</ref>.clear();</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a22a84e537ef921d8d299350b4682c323" kindref="member">NewThrustCmds</ref>.insert(this-&gt;<ref refid="class_thruster_state_effector_1a22a84e537ef921d8d299350b4682c323" kindref="member">NewThrustCmds</ref>.begin(),<sp/>this-&gt;thrusterData.size(),<sp/>0.0);</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Reset<sp/>the<sp/>mas<sp/>flow<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1ac8a2b6956a99be519a1657f76c2fd1e3" kindref="member">mDotTotal</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="87"><highlight class="normal">}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1afdf1d44f6eaf6695bf150259a82b01ad" kindref="member">ThrusterStateEffector::ReadInputs</ref>()</highlight></codeline>
<codeline lineno="94"><highlight class="normal">{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Initialize<sp/>local<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>i;</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>dataGood;</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>message<sp/>has<sp/>been<sp/>linked</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_thruster_state_effector_1ae6f5f1138443d218701b2d45d354bcf6" kindref="member">cmdsInMsg</ref>.isLinked())<sp/>{</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;incomingCmdBuffer<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1ae6f5f1138443d218701b2d45d354bcf6" kindref="member">cmdsInMsg</ref>();</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dataGood<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1ae6f5f1138443d218701b2d45d354bcf6" kindref="member">cmdsInMsg</ref>.isWritten();</highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(abs(this-&gt;prevCommandTime<sp/>-<sp/>this-&gt;<ref refid="class_thruster_state_effector_1ae6f5f1138443d218701b2d45d354bcf6" kindref="member">cmdsInMsg</ref>.timeWritten()<sp/>*<sp/>NANO2SEC)<sp/>&lt;<sp/>1E-9<sp/>||<sp/>!dataGood)<sp/>{</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">false</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;prevCommandTime<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1ae6f5f1138443d218701b2d45d354bcf6" kindref="member">cmdsInMsg</ref>.timeWritten()<sp/>*<sp/>NANO2SEC;</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;incomingCmdBuffer<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1ae6f5f1138443d218701b2d45d354bcf6" kindref="member">cmdsInMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;prevCommandTime<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>NewThrustCmds<sp/>vector.<sp/><sp/>Using<sp/>the<sp/>data()<sp/>method<sp/>for<sp/>raw<sp/>speed</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>*CmdPtr;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal">(i=0,<sp/>CmdPtr<sp/>=<sp/><ref refid="class_thruster_state_effector_1a22a84e537ef921d8d299350b4682c323" kindref="member">NewThrustCmds</ref>.data();<sp/>i<sp/>&lt;<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.size();</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>CmdPtr++,<sp/>i++)</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*CmdPtr<sp/>=<sp/>this-&gt;incomingCmdBuffer.OnTimeRequest[i];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">(</highlight><highlight class="keyword">true</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="124"><highlight class="normal">}</highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a63ab3def0bc3622b49aff6ed6da6b7b0" kindref="member">ThrusterStateEffector::writeOutputStateMessages</ref>(uint64_t<sp/>CurrentClock)</highlight></codeline>
<codeline lineno="132"><highlight class="normal">{</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>idx<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;THRSimConfig&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>THROutputMsgPayload<sp/>tmpThruster;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.end();<sp/>++it)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpThruster<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>[idx]-&gt;zeroMsgPayload;</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenVector3d2CArray(it-&gt;thrLoc_B,<sp/>tmpThruster.thrusterLocation);</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenVector3d2CArray(it-&gt;thrDir_B,<sp/>tmpThruster.thrusterDirection);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpThruster.maxThrust<sp/>=<sp/>it-&gt;MaxThrust;</highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpThruster.thrustFactor<sp/>=<sp/>it-&gt;ThrustOps.ThrustFactor;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpThruster.thrustForce<sp/>=<sp/>v3Norm(it-&gt;ThrustOps.opThrustForce_B);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(it-&gt;ThrustOps.opThrustForce_B,<sp/>tmpThruster.thrustForce_B);</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>v3Copy(it-&gt;ThrustOps.opThrustTorquePntB_B,<sp/>tmpThruster.thrustTorquePntB_B);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>[idx]-&gt;write(&amp;tmpThruster,<sp/>this-&gt;moduleID,<sp/>CurrentClock);</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>idx++;</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="152"><highlight class="normal">}</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a9665558063ba537c47268b9e7c82ee05" kindref="member">ThrusterStateEffector::ConfigureThrustRequests</ref>()</highlight></codeline>
<codeline lineno="162"><highlight class="normal">{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;THRSimConfig&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;double&gt;::iterator<sp/>CmdIt;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(CmdIt<sp/>=<sp/><ref refid="class_thruster_state_effector_1a22a84e537ef921d8d299350b4682c323" kindref="member">NewThrustCmds</ref>.begin(),<sp/>it<sp/>=<sp/>this-&gt;thrusterData.begin();</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.end();<sp/>it++,<sp/>CmdIt++)</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*CmdIt<sp/>&gt;=<sp/>it-&gt;MinOnTime)<sp/></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;ThrustOps.ThrustOnCmd<sp/>=<sp/>*CmdIt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;ThrustOps.fireCounter<sp/>+=<sp/>it-&gt;ThrustOps.ThrustFactor<sp/>&gt;<sp/>0.0</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>0<sp/>:<sp/>1;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;ThrustOps.ThrustOnCmd<sp/>=<sp/>it-&gt;ThrustOps.ThrustFactor<sp/>&gt;<sp/>1E-5</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>?<sp/>*CmdIt<sp/>:<sp/>0.0;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>it-&gt;ThrustOps.ThrusterEndTime<sp/>=<sp/>this-&gt;prevCommandTime<sp/>+<sp/>it-&gt;ThrustOps.ThrustOnCmd;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*CmdIt<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal">}</highlight></codeline>
<codeline lineno="189"><highlight class="normal"></highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1add85d2ae34d07db942599f2c11c43624" kindref="member">ThrusterStateEffector::UpdateThrusterProperties</ref>()</highlight></codeline>
<codeline lineno="196"><highlight class="normal">{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>hub<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>r_BN_N<sp/>=<sp/>(Eigen::Vector3d)*this-&gt;<ref refid="class_thruster_state_effector_1a807debc4839eec0c5fc85ccc42218ebe" kindref="member">inertialPositionProperty</ref>;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omega_BN_B<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1aad91ae03e308d4d4ffe4a7e7dc01e5db" kindref="member">hubOmega</ref>-&gt;getState();</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MRPd<sp/>sigma_BN;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/>sigma_BN<sp/>=<sp/>(Eigen::Vector3d)<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a3e37afa1dfb92a8c6881336d1b2e9cba" kindref="member">hubSigma</ref>-&gt;getState();</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BN<sp/>=<sp/>(sigma_BN.toRotationMatrix()).transpose();</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>variables<sp/>related<sp/>to<sp/>which<sp/>body<sp/>the<sp/>thruster<sp/>is<sp/>attached<sp/>to.<sp/>The<sp/>F<sp/>frame<sp/>represents<sp/>the<sp/>platform<sp/>body<sp/>where<sp/>the<sp/>thruster<sp/>attaches<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MRPd<sp/>sigma_FN;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_FN;</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omega_FN_F;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>r_FN_N;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>relative<sp/>variables<sp/>between<sp/>the<sp/>attached<sp/>body<sp/>and<sp/>the<sp/>hub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>dcm_BF;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>thrusters</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;ReadFunctor&lt;SCStatesMsgPayload&gt;&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>this-&gt;attachedBodyInMsgs.begin(),<sp/>index<sp/>=<sp/>0;<sp/>it<sp/>!=<sp/>this-&gt;attachedBodyInMsgs.end();<sp/>it++,<sp/>index++)</highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Check<sp/>if<sp/>the<sp/>message<sp/>is<sp/>linked,<sp/>and<sp/>if<sp/>so<sp/>do<sp/>the<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;isLinked()<sp/>&amp;&amp;<sp/>it-&gt;isWritten())</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>to<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;attachedBodyBuffer<sp/>=<sp/>this-&gt;attachedBodyInMsgs.at(index)();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>attached<sp/>body<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>sigma_FN<sp/>=<sp/>cArray2EigenMRPd(attachedBodyBuffer.sigma_BN);</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>omega_FN_F<sp/>=<sp/>cArray2EigenVector3d(attachedBodyBuffer.omega_BN_B);</highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>r_FN_N<sp/>=<sp/>cArray2EigenVector3d(attachedBodyBuffer.r_BN_N);</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>DCM<sp/>between<sp/>the<sp/>attached<sp/>body<sp/>and<sp/>the<sp/>hub</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_FN<sp/>=<sp/>(sigma_FN.toRotationMatrix()).transpose();</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>dcm_BF<sp/>=<sp/>dcm_BN<sp/>*<sp/>dcm_FN.transpose();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Populate<sp/>the<sp/>relative<sp/>state<sp/>structure</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bodyToHubInfo.at(index).r_FB_B<sp/>=<sp/>dcm_BN<sp/>*<sp/>(r_FN_N<sp/>-<sp/>r_BN_N);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bodyToHubInfo.at(index).dcm_BF<sp/>=<sp/>dcm_BF;</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;bodyToHubInfo.at(index).omega_FB_B<sp/>=<sp/>dcm_BF<sp/>*<sp/>omega_FN_F<sp/>-<sp/>omega_BN_B;</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="239"><highlight class="normal">}</highlight></codeline>
<codeline lineno="240"><highlight class="normal"></highlight></codeline>
<codeline lineno="241"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a874c2ac4f42ffb27e2c6aff0f1fdf46e" kindref="member">ThrusterStateEffector::addThruster</ref>(THRSimConfig*<sp/>newThruster)</highlight></codeline>
<codeline lineno="242"><highlight class="normal">{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.push_back(*newThruster);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"></highlight></codeline>
<codeline lineno="245"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>corresponding<sp/>output<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/>Message&lt;THROutputMsgPayload&gt;*<sp/>msg;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message&lt;THROutputMsgPayload&gt;;</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>.push_back(msg);</highlight></codeline>
<codeline lineno="249"><highlight class="normal"></highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>initial<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="252"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a36ec399f236d4297cae4279fae5e1e79" kindref="member">kappaInit</ref>.push_back(state);</highlight></codeline>
<codeline lineno="253"><highlight class="normal"></highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Push<sp/>back<sp/>an<sp/>empty<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/>ReadFunctor&lt;SCStatesMsgPayload&gt;<sp/>emptyReadFunctor;</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;attachedBodyInMsgs.push_back(emptyReadFunctor);</highlight></codeline>
<codeline lineno="257"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>space<sp/>for<sp/>the<sp/>conversion<sp/>from<sp/>body<sp/>to<sp/>hub<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/>BodyToHubInfo<sp/>attachedBodyToHub;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/>attachedBodyToHub.dcm_BF.setIdentity();</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/>attachedBodyToHub.r_FB_B.setZero();</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/>attachedBodyToHub.omega_FB_B.setZero();</highlight></codeline>
<codeline lineno="263"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bodyToHubInfo.push_back(attachedBodyToHub);</highlight></codeline>
<codeline lineno="264"><highlight class="normal">}</highlight></codeline>
<codeline lineno="265"><highlight class="normal"></highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a874c2ac4f42ffb27e2c6aff0f1fdf46e" kindref="member">ThrusterStateEffector::addThruster</ref>(THRSimConfig*<sp/>newThruster,<sp/>Message&lt;SCStatesMsgPayload&gt;*<sp/>bodyStateMsg)</highlight></codeline>
<codeline lineno="267"><highlight class="normal">{</highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.push_back(*newThruster);</highlight></codeline>
<codeline lineno="269"><highlight class="normal"></highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Create<sp/>corresponding<sp/>output<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/>Message&lt;THROutputMsgPayload&gt;*<sp/>msg;</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message&lt;THROutputMsgPayload&gt;;</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a65dd74a5ae489102b6354247628227cb" kindref="member">thrusterOutMsgs</ref>.push_back(msg);</highlight></codeline>
<codeline lineno="274"><highlight class="normal"></highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>initial<sp/>condition</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>state<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a36ec399f236d4297cae4279fae5e1e79" kindref="member">kappaInit</ref>.push_back(state);</highlight></codeline>
<codeline lineno="278"><highlight class="normal"></highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>incoming<sp/>body<sp/>message</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="280"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;attachedBodyInMsgs.push_back(bodyStateMsg-&gt;addSubscriber());</highlight></codeline>
<codeline lineno="281"><highlight class="normal"></highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Add<sp/>space<sp/>for<sp/>the<sp/>conversion<sp/>from<sp/>body<sp/>to<sp/>hub<sp/>and<sp/>populate<sp/>it<sp/>with<sp/>default<sp/>values</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>BodyToHubInfo<sp/>attachedBodyToHub;</highlight></codeline>
<codeline lineno="284"><highlight class="normal"><sp/><sp/><sp/><sp/>attachedBodyToHub.dcm_BF.setIdentity();</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/>attachedBodyToHub.r_FB_B.setZero();</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>attachedBodyToHub.omega_FB_B.setZero();</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;bodyToHubInfo.push_back(attachedBodyToHub);</highlight></codeline>
<codeline lineno="288"><highlight class="normal"></highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="290"><highlight class="normal">}</highlight></codeline>
<codeline lineno="291"><highlight class="normal"></highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a91eb86adb2c8c9cf8a002d4af3a6a863" kindref="member">ThrusterStateEffector::linkInStates</ref>(DynParamManager&amp;<sp/>states){</highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a3e37afa1dfb92a8c6881336d1b2e9cba" kindref="member">hubSigma</ref><sp/>=<sp/>states.getStateObject(</highlight><highlight class="stringliteral">&quot;hubSigma&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1aad91ae03e308d4d4ffe4a7e7dc01e5db" kindref="member">hubOmega</ref><sp/>=<sp/>states.getStateObject(</highlight><highlight class="stringliteral">&quot;hubOmega&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="299"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a807debc4839eec0c5fc85ccc42218ebe" kindref="member">inertialPositionProperty</ref><sp/>=<sp/>states.getPropertyReference(this-&gt;nameOfSpacecraftAttachedTo<sp/>+<sp/></highlight><highlight class="stringliteral">&quot;r_BN_N&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="300"><highlight class="normal">}</highlight></codeline>
<codeline lineno="301"><highlight class="normal"></highlight></codeline>
<codeline lineno="303"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a802c763ec7387367e5efacf78596fd5e" kindref="member">ThrusterStateEffector::registerStates</ref>(DynParamManager&amp;<sp/>states)</highlight></codeline>
<codeline lineno="304"><highlight class="normal">{</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Register<sp/>the<sp/>states<sp/>associated<sp/>with<sp/>thruster<sp/>-<sp/>kappa</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a8981de619b122fa774bcd2d0189b3843" kindref="member">kappaState</ref><sp/>=<sp/>states.registerState((uint32_t)<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.size(),<sp/>1,<sp/>this-&gt;nameOfKappaState);</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>kappaInitMatrix(this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.size(),<sp/>1);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>thrusters<sp/>to<sp/>initialize<sp/>each<sp/>state<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(uint64_t<sp/>i<sp/>=<sp/>0;<sp/>i<sp/>&lt;<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.size();<sp/>i++)<sp/>{</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Make<sp/>sure<sp/>that<sp/>the<sp/>thruster<sp/>state<sp/>is<sp/>between<sp/>0<sp/>and<sp/>1</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_thruster_state_effector_1a36ec399f236d4297cae4279fae5e1e79" kindref="member">kappaInit</ref>[i]<sp/>&lt;<sp/>0.0<sp/>||<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a36ec399f236d4297cae4279fae5e1e79" kindref="member">kappaInit</ref>[i]<sp/>&gt;<sp/>1.0)<sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_thruster_state_effector_1aaac224ccd419d989ef7e516a9d6a8480" kindref="member">bskLogger</ref>.bskLog(BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;thrusterStateEffector:<sp/>the<sp/>initial<sp/>condition<sp/>for<sp/>the<sp/>thrust<sp/>factor<sp/>must<sp/>be<sp/>between<sp/>0<sp/>and<sp/>1.<sp/>Setting<sp/>it<sp/>to<sp/>0.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="313"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a36ec399f236d4297cae4279fae5e1e79" kindref="member">kappaInit</ref>[i]<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kappaInitMatrix(i,<sp/>0)<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a36ec399f236d4297cae4279fae5e1e79" kindref="member">kappaInit</ref>[i];</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/></highlight></codeline>
<codeline lineno="317"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a8981de619b122fa774bcd2d0189b3843" kindref="member">kappaState</ref>-&gt;setState(kappaInitMatrix);</highlight></codeline>
<codeline lineno="318"><highlight class="normal"></highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="320"><highlight class="normal">}</highlight></codeline>
<codeline lineno="321"><highlight class="normal"></highlight></codeline>
<codeline lineno="323"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a25ff3b94c60df9aac63e50463af0b5aa" kindref="member">ThrusterStateEffector::computeDerivatives</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime,<sp/>Eigen::Vector3d<sp/>rDDot_BN_N,<sp/>Eigen::Vector3d<sp/>omegaDot_BN_B,<sp/>Eigen::Vector3d<sp/>sigma_BN)</highlight></codeline>
<codeline lineno="324"><highlight class="normal">{</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;THRSimConfig&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/>THROperation*<sp/>ops;</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>i;</highlight></codeline>
<codeline lineno="328"><highlight class="normal"></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Compute<sp/>Derivatives</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::MatrixXd<sp/>kappaDot(this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.size(),<sp/>1);</highlight></codeline>
<codeline lineno="331"><highlight class="normal"></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>all<sp/>thrusters<sp/>to<sp/>initialize<sp/>each<sp/>state<sp/>variable</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="333"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.begin(),<sp/>i<sp/>=<sp/>0;<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.end();<sp/>it++,<sp/>i++)</highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Grab<sp/>the<sp/>thruster<sp/>operations<sp/>payload</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ops<sp/>=<sp/>&amp;it-&gt;ThrustOps;</highlight></codeline>
<codeline lineno="337"><highlight class="normal"></highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((ops-&gt;ThrusterEndTime<sp/>-<sp/>integTime)<sp/>&gt;=<sp/>0.0<sp/>&amp;&amp;<sp/>ops-&gt;ThrustOnCmd<sp/>&gt;<sp/>0.0)<sp/>{</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kappaDot(i,<sp/>0)<sp/>=<sp/>(1.0<sp/>-<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a8981de619b122fa774bcd2d0189b3843" kindref="member">kappaState</ref>-&gt;state(i,<sp/>0))<sp/>*<sp/>it-&gt;cutoffFrequency;</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>kappaDot(i,<sp/>0)<sp/>=<sp/>-this-&gt;<ref refid="class_thruster_state_effector_1a8981de619b122fa774bcd2d0189b3843" kindref="member">kappaState</ref>-&gt;state(i,<sp/>0)<sp/>*<sp/>it-&gt;cutoffFrequency;</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="345"><highlight class="normal"></highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Set<sp/>the<sp/>IspFactor<sp/>to<sp/>1<sp/>to<sp/>check<sp/>that<sp/>there<sp/>is<sp/>mass<sp/>flow</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ops-&gt;IspFactor<sp/>=<sp/>1.0;</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>state<sp/>to<sp/>thruster<sp/>ops</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ops-&gt;ThrustFactor<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a8981de619b122fa774bcd2d0189b3843" kindref="member">kappaState</ref>-&gt;state(i,<sp/>0);</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a8981de619b122fa774bcd2d0189b3843" kindref="member">kappaState</ref>-&gt;setDerivative(kappaDot);</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="354"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="355"><highlight class="normal">}</highlight></codeline>
<codeline lineno="356"><highlight class="normal"></highlight></codeline>
<codeline lineno="357"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a32ea6d313bdd8c644336bf4b66fedf2f" kindref="member">ThrusterStateEffector::calcForceTorqueOnBody</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime,<sp/>Eigen::Vector3d<sp/>omega_BN_B)</highlight></codeline>
<codeline lineno="358"><highlight class="normal">{</highlight></codeline>
<codeline lineno="359"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>omega_BN_B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>omegaLocal_BN_B<sp/>=<sp/>omega_BN_B;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"></highlight></codeline>
<codeline lineno="362"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Force<sp/>and<sp/>torque<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="363"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>SingleThrusterForce;</highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>SingleThrusterTorque;</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>tmpThrustMag<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="366"><highlight class="normal"></highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Auxiliary<sp/>variables<sp/>to<sp/>convert<sp/>direction<sp/>and<sp/>location<sp/>from<sp/>F<sp/>to<sp/>B</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>thrustDirection_B;</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>thrustLocation_B;</highlight></codeline>
<codeline lineno="370"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Expelled<sp/>momentum<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>BMj;</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>axesWeightMatrix;</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>BM1,<sp/>BM2,<sp/>BM3;</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mDotNozzle;</highlight></codeline>
<codeline lineno="376"><highlight class="normal"></highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>MassProps<sp/>are<sp/>missing,<sp/>so<sp/>setting<sp/>CoM<sp/>to<sp/>zero<sp/>momentarily</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;forceOnBody_B.setZero();</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;torqueOnBodyPntB_B.setZero();</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;torqueOnBodyPntC_B.setZero();</highlight></codeline>
<codeline lineno="382"><highlight class="normal"></highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/>axesWeightMatrix<sp/>&lt;&lt;<sp/>2,<sp/>0,<sp/>0,<sp/>0,<sp/>1,<sp/>0,<sp/>0,<sp/>0,<sp/>1;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"></highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>variables</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;THRSimConfig&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/>THROperation*<sp/>ops;</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>index;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.begin(),<sp/>index<sp/>=<sp/>0;<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.end();<sp/>it++,<sp/>index++)</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Save<sp/>the<sp/>thruster<sp/>ops<sp/>information</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="394"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ops<sp/>=<sp/>&amp;it-&gt;ThrustOps;</highlight></codeline>
<codeline lineno="395"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>thruster<sp/>properties<sp/>wrt<sp/>the<sp/>hub<sp/>(note<sp/>that<sp/>B<sp/>refers<sp/>to<sp/>the<sp/>F<sp/>frame<sp/>when<sp/>extracting<sp/>from<sp/>the<sp/>thruster<sp/>info)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrustDirection_B<sp/>=<sp/>this-&gt;bodyToHubInfo.at(index).dcm_BF<sp/>*<sp/>it-&gt;thrDir_B;</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thrustLocation_B<sp/>=<sp/>this-&gt;bodyToHubInfo.at(index).r_FB_B<sp/>+<sp/>this-&gt;bodyToHubInfo.at(index).dcm_BF<sp/>*<sp/>it-&gt;thrLoc_B;</highlight></codeline>
<codeline lineno="399"><highlight class="normal"></highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpThrustMag<sp/>=<sp/>it-&gt;MaxThrust<sp/>*<sp/>ops-&gt;ThrustFactor;</highlight></codeline>
<codeline lineno="402"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Apply<sp/>dispersion<sp/>to<sp/>magnitude</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>tmpThrustMag<sp/>*=<sp/>(1.<sp/>+<sp/>it-&gt;thrusterMagDisp);</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SingleThrusterForce<sp/>=<sp/>tmpThrustMag<sp/>*<sp/>thrustDirection_B;</highlight></codeline>
<codeline lineno="405"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;forceOnBody_B<sp/>+=<sp/>SingleThrusterForce;</highlight></codeline>
<codeline lineno="406"><highlight class="normal"></highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>SingleThrusterTorque<sp/>=<sp/>thrustLocation_B.cross(SingleThrusterForce)<sp/>+<sp/>ops-&gt;ThrustFactor<sp/>*<sp/>it-&gt;MaxSwirlTorque<sp/>*<sp/>thrustDirection_B;</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;torqueOnBodyPntB_B<sp/>+=<sp/>SingleThrusterTorque;</highlight></codeline>
<codeline lineno="410"><highlight class="normal"></highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!it-&gt;updateOnly)<sp/>{</highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDotNozzle<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;steadyIsp<sp/>*<sp/>ops-&gt;IspFactor<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDotNozzle<sp/>=<sp/>it-&gt;MaxThrust<sp/>/<sp/>(EARTH_GRAV<sp/>*<sp/>it-&gt;steadyIsp);</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;forceOnBody_B<sp/>+=<sp/>2<sp/>*<sp/>mDotNozzle<sp/>*<sp/>(this-&gt;bodyToHubInfo.at(index).omega_FB_B<sp/>+<sp/>omegaLocal_BN_B).cross(thrustLocation_B);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BM1<sp/>=<sp/>thrustDirection_B;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BM2<sp/>&lt;&lt;<sp/>-BM1(1),<sp/>BM1(0),<sp/>BM1(2);</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BM3<sp/>=<sp/>BM1.cross(BM2);</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMj.col(0)<sp/>=<sp/>BM1;</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMj.col(1)<sp/>=<sp/>BM2;</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>BMj.col(2)<sp/>=<sp/>BM3;</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;torqueOnBodyPntB_B<sp/>+=<sp/>mDotNozzle<sp/>*<sp/>(eigenTilde(thrustDirection_B)<sp/>*<sp/>eigenTilde(thrustDirection_B).transpose()</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>+<sp/>it-&gt;areaNozzle<sp/>/<sp/>(4<sp/>*<sp/>M_PI)<sp/>*<sp/>BMj<sp/>*<sp/>axesWeightMatrix<sp/>*<sp/>BMj.transpose())<sp/>*<sp/>(this-&gt;bodyToHubInfo.at(index).omega_FB_B<sp/>+<sp/>omegaLocal_BN_B);</highlight></codeline>
<codeline lineno="429"><highlight class="normal"></highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>-<sp/>Save<sp/>force<sp/>and<sp/>torque<sp/>values<sp/>for<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="432"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenVector3d2CArray(SingleThrusterForce,<sp/>it-&gt;ThrustOps.opThrustForce_B);</highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>eigenVector3d2CArray(SingleThrusterTorque,<sp/>it-&gt;ThrustOps.opThrustTorquePntB_B);</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="435"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="437"><highlight class="normal">}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a9db6692f54f945b8f9bffee00997f707" kindref="member">ThrusterStateEffector::updateContributions</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime,<sp/>BackSubMatrices&amp;<sp/>backSubContr,<sp/>Eigen::Vector3d<sp/>sigma_BN,<sp/>Eigen::Vector3d<sp/>omega_BN_B,<sp/>Eigen::Vector3d<sp/>g_N)</highlight></codeline>
<codeline lineno="440"><highlight class="normal">{</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Define<sp/>the<sp/>translational<sp/>and<sp/>rotational<sp/>contributions<sp/>from<sp/>the<sp/>computed<sp/>force<sp/>and<sp/>torque</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/>backSubContr.vecTrans<sp/>=<sp/>this-&gt;forceOnBody_B;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/>backSubContr.vecRot<sp/>=<sp/>this-&gt;torqueOnBodyPntB_B;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"></highlight></codeline>
<codeline lineno="445"><highlight class="normal">}</highlight></codeline>
<codeline lineno="446"><highlight class="normal"></highlight></codeline>
<codeline lineno="448"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1ac70d7acd14e72e67272dce8e81461b3f" kindref="member">ThrusterStateEffector::updateEffectorMassProps</ref>(</highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>integTime)<sp/>{</highlight></codeline>
<codeline lineno="449"><highlight class="normal"></highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/>std::vector&lt;THRSimConfig&gt;::iterator<sp/>it;</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/>THROperation*<sp/>ops;</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>mDotSingle<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1ac8a2b6956a99be519a1657f76c2fd1e3" kindref="member">mDotTotal</ref><sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="454"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;stateDerivContribution.setZero();</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(it<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.begin();<sp/>it<sp/>!=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1a73da5bc2cc8df82bb48cf102dfa5c143" kindref="member">thrusterData</ref>.end();<sp/>it++)</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ops<sp/>=<sp/>&amp;it-&gt;ThrustOps;</highlight></codeline>
<codeline lineno="459"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDotSingle<sp/>=<sp/>0.0;</highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(it-&gt;steadyIsp<sp/>*<sp/>ops-&gt;IspFactor<sp/>&gt;<sp/>0.0)</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mDotSingle<sp/>=<sp/>it-&gt;MaxThrust<sp/>/<sp/>(EARTH_GRAV<sp/>*<sp/>it-&gt;steadyIsp);</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="464"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1ac8a2b6956a99be519a1657f76c2fd1e3" kindref="member">mDotTotal</ref><sp/>+=<sp/>mDotSingle;</highlight></codeline>
<codeline lineno="465"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;stateDerivContribution(0)<sp/>=<sp/>this-&gt;<ref refid="class_thruster_state_effector_1ac8a2b6956a99be519a1657f76c2fd1e3" kindref="member">mDotTotal</ref>;</highlight></codeline>
<codeline lineno="467"><highlight class="normal"></highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="469"><highlight class="normal"></highlight></codeline>
<codeline lineno="470"><highlight class="normal">}</highlight></codeline>
<codeline lineno="471"><highlight class="normal"></highlight></codeline>
<codeline lineno="480"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_thruster_state_effector_1a885243358bddc800552339857b91185c" kindref="member">ThrusterStateEffector::UpdateState</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="481"><highlight class="normal">{</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_thruster_state_effector_1afdf1d44f6eaf6695bf150259a82b01ad" kindref="member">ReadInputs</ref>())</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a9665558063ba537c47268b9e7c82ee05" kindref="member">ConfigureThrustRequests</ref>();</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1add85d2ae34d07db942599f2c11c43624" kindref="member">UpdateThrusterProperties</ref>();</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_thruster_state_effector_1a63ab3def0bc3622b49aff6ed6da6b7b0" kindref="member">writeOutputStateMessages</ref>(CurrentSimNanos);</highlight></codeline>
<codeline lineno="489"><highlight class="normal">}</highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/simulation/dynamics/Thrusters/thrusterStateEffector/thrusterStateEffector.cpp"/>
  </compounddef>
</doxygen>
