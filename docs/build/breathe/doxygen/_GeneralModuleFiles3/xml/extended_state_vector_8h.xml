<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="extended_state_vector_8h" kind="file" language="C++">
    <compoundname>extendedStateVector.h</compoundname>
    <includes refid="dynamic_object_8h" local="yes">../_GeneralModuleFiles/dynamicObject.h</includes>
    <includes refid="dyn_param_manager_8h" local="yes">../_GeneralModuleFiles/dynParamManager.h</includes>
    <includes local="no">Eigen/Dense</includes>
    <includes local="no">functional</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">unordered_map</includes>
    <includedby refid="extended_state_vector_8cpp" local="yes">/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.cpp</includedby>
    <includedby refid="sv_integrator_runge_kutta_8h" local="yes">/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/svIntegratorRungeKutta.h</includedby>
    <incdepgraph>
      <node id="7">
        <label>dynParamManager.h</label>
        <link refid="dyn_param_manager_8h_source"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="5">
        <label>dynamicEffector.h</label>
        <link refid="dynamic_effector_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>../_GeneralModuleFiles/dynamicObject.h</label>
        <link refid="dynamic_object_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.h</label>
        <link refid="extended_state_vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
      </node>
      <node id="11">
        <label>stateData.h</label>
        <link refid="state_data_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>stateEffector.h</label>
        <link refid="state_effector_8h_source"/>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
      <node id="14">
        <label>stateVecIntegrator.h</label>
        <link refid="state_vec_integrator_8h_source"/>
        <childnode refid="10" relation="include">
        </childnode>
      </node>
      <node id="6">
        <label>Eigen/Dense</label>
      </node>
      <node id="3">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="13">
        <label>architecture/utilities/avsEigenMRP.h</label>
      </node>
      <node id="4">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="15">
        <label>functional</label>
      </node>
      <node id="9">
        <label>map</label>
      </node>
      <node id="8">
        <label>stdint.h</label>
      </node>
      <node id="16">
        <label>unordered_map</label>
      </node>
      <node id="10">
        <label>vector</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.h</label>
        <link refid="extended_state_vector_8h"/>
        <childnode refid="2" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/svIntegratorAdaptiveRungeKutta.h</label>
        <link refid="sv_integrator_adaptive_runge_kutta_8h_source"/>
      </node>
      <node id="4">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/svIntegratorRK4.h</label>
        <link refid="sv_integrator_r_k4_8h_source"/>
      </node>
      <node id="2">
        <label>/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/svIntegratorRungeKutta.h</label>
        <link refid="sv_integrator_runge_kutta_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="struct_extended_state_id_hash" prot="public">ExtendedStateIdHash</innerclass>
    <innerclass refid="class_extended_state_vector" prot="public">ExtendedStateVector</innerclass>
    <sectiondef kind="typedef">
      <memberdef kind="typedef" id="extended_state_vector_8h_1af65894a901c61e0e72d940b2e6dcf6df" prot="public" static="no">
        <type>std::pair&lt; size_t, std::string &gt;</type>
        <definition>using ExtendedStateId =  std::pair&lt;size_t, std::string&gt;</definition>
        <argsstring></argsstring>
        <name>ExtendedStateId</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Because two different DynamicObjects can have states with the same name, ExtendedStateId is used to give a unique identifier to every state. The first item is the index of the <ref refid="class_dynamic_object" kindref="compound">DynamicObject</ref> in the integrator&apos;s dynPtrs vector. The second item in the pair is the name of the state. </para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.h" line="60" column="1" bodyfile="/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.h" bodystart="60" bodyend="-1"/>
      </memberdef>
    </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2023,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>at<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>extendedStateVector_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>extendedStateVector_h</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../_GeneralModuleFiles/dynamicObject.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;../_GeneralModuleFiles/dynParamManager.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;Eigen/Dense&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;functional&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;unordered_map&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="32"><highlight class="comment">Each<sp/>DynamicObject<sp/>has<sp/>a<sp/>series<sp/>of<sp/>states<sp/>associated<sp/>to<sp/>them.<sp/>Each<sp/>state</highlight></codeline>
<codeline lineno="33"><highlight class="comment">is<sp/>associated<sp/>with<sp/>a<sp/>unique<sp/>std::string<sp/>(i.e.<sp/>&quot;hubPosition&quot;),<sp/>and<sp/>their</highlight></codeline>
<codeline lineno="34"><highlight class="comment">value<sp/>is<sp/>stored<sp/>as<sp/>Eigen::MatrixXd.<sp/>Each<sp/>of<sp/>these<sp/>states<sp/>is<sp/>integrated</highlight></codeline>
<codeline lineno="35"><highlight class="comment">in<sp/>parallel:<sp/>each<sp/>have<sp/>their<sp/>own<sp/>derivative,<sp/>which<sp/>are<sp/>all<sp/>calculated</highlight></codeline>
<codeline lineno="36"><highlight class="comment">in<sp/>DynamicObject::equationsOfMotion.</highlight></codeline>
<codeline lineno="37"><highlight class="comment"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">Basilisk<sp/>also<sp/>supports<sp/>the<sp/>parallel<sp/>integration<sp/>of<sp/>multiple<sp/>DynamicObjects,</highlight></codeline>
<codeline lineno="39"><highlight class="comment">which<sp/>in<sp/>practice<sp/>means<sp/>that<sp/>all<sp/>states<sp/>of<sp/>all<sp/>DynamicObjects<sp/>need<sp/>to</highlight></codeline>
<codeline lineno="40"><highlight class="comment">be<sp/>integrated<sp/>in<sp/>parallel.</highlight></codeline>
<codeline lineno="41"><highlight class="comment"></highlight></codeline>
<codeline lineno="42"><highlight class="comment">In<sp/>order<sp/>to<sp/>facilitate<sp/>this<sp/>task,<sp/>the<sp/>ExtendedStateVector<sp/>was<sp/>created.</highlight></codeline>
<codeline lineno="43"><highlight class="comment">This<sp/>class<sp/>is<sp/>a<sp/>map<sp/>that<sp/>can<sp/>hold<sp/>an<sp/>Eigen::MatrixXd<sp/>for<sp/>every<sp/>state</highlight></codeline>
<codeline lineno="44"><highlight class="comment">of<sp/>every<sp/>DynamicObject<sp/>that<sp/>we<sp/>want<sp/>to<sp/>integrate.<sp/>Thus,<sp/>it<sp/>can<sp/>be</highlight></codeline>
<codeline lineno="45"><highlight class="comment">used<sp/>to<sp/>store<sp/>the<sp/>value<sp/>of<sp/>the<sp/>states,<sp/>their<sp/>derivatives,<sp/>errors...</highlight></codeline>
<codeline lineno="46"><highlight class="comment">in<sp/>a<sp/>single,<sp/>flat<sp/>object.<sp/>This<sp/>is<sp/>similar<sp/>to<sp/>the<sp/>behaviour<sp/>of<sp/>StateVector,</highlight></codeline>
<codeline lineno="47"><highlight class="comment">except<sp/>that<sp/>this<sp/>supports<sp/>multiple<sp/>DynamicObjects.</highlight></codeline>
<codeline lineno="48"><highlight class="comment"></highlight></codeline>
<codeline lineno="49"><highlight class="comment">ExtendedStateVector<sp/>supports<sp/>a<sp/>series<sp/>of<sp/>utility<sp/>functions<sp/>that</highlight></codeline>
<codeline lineno="50"><highlight class="comment">makes<sp/>performing<sp/>state-wise<sp/>operations<sp/>easier.</highlight></codeline>
<codeline lineno="51"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keyword">using<sp/></highlight><highlight class="normal">ExtendedStateId<sp/>=<sp/>std::pair&lt;size_t,<sp/>std::string&gt;;</highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight></codeline>
<codeline lineno="63" refid="struct_extended_state_id_hash" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="struct_extended_state_id_hash" kindref="compound">ExtendedStateIdHash</ref><sp/>{</highlight></codeline>
<codeline lineno="65" refid="struct_extended_state_id_hash_1afe0d033f117bddd3ff9ccae7361c212d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/>std::size_t<sp/><ref refid="struct_extended_state_id_hash_1afe0d033f117bddd3ff9ccae7361c212d" kindref="member">operator()</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>ExtendedStateId&amp;<sp/>p)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="66"><highlight class="keyword"><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>seed<sp/>=<sp/>std::hash&lt;size_t&gt;{}(p.first);</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Algorithm<sp/>from<sp/>boost::hash_combine</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>seed<sp/>^=<sp/>std::hash&lt;std::string&gt;{}(p.second)<sp/>+<sp/>0x9e3779b9<sp/>+<sp/>(seed<sp/>&lt;&lt;<sp/>6)<sp/>+<sp/>(seed<sp/>&gt;&gt;<sp/>2);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>seed;</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal">};</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="80" refid="class_extended_state_vector" refkind="compound"><highlight class="normal"></highlight><highlight class="keyword">class<sp/></highlight><highlight class="normal"><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref></highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>:<sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal"><sp/>std::unordered_map&lt;ExtendedStateId,<sp/>Eigen::MatrixXd,<sp/>ExtendedStateIdHash&gt;<sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">public</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1ade96a207c9dd26eab2714b6abc36e04f" kindref="member">fromStates</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs);</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a1f9ff2051c9ba398c5293d93d59e8638" kindref="member">fromStateDerivs</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs);</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">map</ref>(std::function&lt;Eigen::MatrixXd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd&amp;)&gt;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1adcf63d1503aec1940c312896948b8a4c" kindref="member">apply</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>Eigen::MatrixXd&amp;)&gt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a01a050cbaf03b6ecaac6dac86b2a1d4f" kindref="member">modify</ref>(std::function&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::string&amp;,<sp/>Eigen::MatrixXd&amp;)&gt;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">functor</ref>);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a0023fb1d3a0bc38f2944c7487311e550" kindref="member">operator+=</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref>&amp;<sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">rhs</ref>);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/><ref refid="class_extended_state_vector_1a69226a43e8356d1b590bd309717f45a5" kindref="member">operator*</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a740442ebfb8c8ad84fd18a9f340a0a83" kindref="member">rhs</ref>)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector_1a4c85ff51b5ec2be545d8658fb07d46ce" kindref="member">setStates</ref>(std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/><ref refid="class_extended_state_vector" kindref="compound">ExtendedStateVector</ref><sp/>fromStateData(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>std::vector&lt;DynamicObject*&gt;&amp;<sp/>dynPtrs,</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::function&lt;Eigen::MatrixXd(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="class_state_data" kindref="compound">StateData</ref>&amp;)&gt;);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">};</highlight></codeline>
<codeline lineno="138"><highlight class="normal"></highlight></codeline>
<codeline lineno="139"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>extendedStateVector_h<sp/>*/</highlight><highlight class="preprocessor"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/simulation/dynamics/_GeneralModuleFiles/extendedStateVector.h"/>
  </compounddef>
</doxygen>
