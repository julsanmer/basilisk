<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.9.8" xml:lang="en-US">
  <compounddef id="ground_mapping_8cpp" kind="file" language="C++">
    <compoundname>groundMapping.cpp</compoundname>
    <includes refid="ground_mapping_8h" local="yes">simulation/environment//groundMapping/groundMapping.h</includes>
    <includes local="yes">architecture/utilities/avsEigenSupport.h</includes>
    <includes local="yes">architecture/utilities/linearAlgebra.h</includes>
    <includes local="yes">architecture/utilities/rigidBodyKinematics.h</includes>
    <includes local="no">iostream</includes>
    <includes local="no">cstring</includes>
    <includes local="no">math.h</includes>
    <incdepgraph>
      <node id="1">
        <label>/Users/julio/Desktop/basilisk/src/simulation/environment/groundMapping/groundMapping.cpp</label>
        <link refid="ground_mapping_8cpp"/>
        <childnode refid="2" relation="include">
        </childnode>
        <childnode refid="15" relation="include">
        </childnode>
        <childnode refid="16" relation="include">
        </childnode>
        <childnode refid="17" relation="include">
        </childnode>
        <childnode refid="18" relation="include">
        </childnode>
        <childnode refid="19" relation="include">
        </childnode>
        <childnode refid="20" relation="include">
        </childnode>
      </node>
      <node id="2">
        <label>simulation/environment//groundMapping/groundMapping.h</label>
        <link refid="ground_mapping_8h_source"/>
        <childnode refid="3" relation="include">
        </childnode>
        <childnode refid="4" relation="include">
        </childnode>
        <childnode refid="5" relation="include">
        </childnode>
        <childnode refid="6" relation="include">
        </childnode>
        <childnode refid="7" relation="include">
        </childnode>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
        <childnode refid="13" relation="include">
        </childnode>
        <childnode refid="14" relation="include">
        </childnode>
      </node>
      <node id="3">
        <label>Eigen/Dense</label>
      </node>
      <node id="6">
        <label>architecture/_GeneralModuleFiles/sys_model.h</label>
      </node>
      <node id="12">
        <label>architecture/messaging/messaging.h</label>
      </node>
      <node id="9">
        <label>architecture/msgPayloadDefC/AccessMsgPayload.h</label>
      </node>
      <node id="10">
        <label>architecture/msgPayloadDefC/GroundStateMsgPayload.h</label>
      </node>
      <node id="8">
        <label>architecture/msgPayloadDefC/SCStatesMsgPayload.h</label>
      </node>
      <node id="7">
        <label>architecture/msgPayloadDefC/SpicePlanetStateMsgPayload.h</label>
      </node>
      <node id="14">
        <label>architecture/utilities/astroConstants.h</label>
      </node>
      <node id="15">
        <label>architecture/utilities/avsEigenSupport.h</label>
      </node>
      <node id="11">
        <label>architecture/utilities/bskLogging.h</label>
      </node>
      <node id="13">
        <label>architecture/utilities/geodeticConversion.h</label>
      </node>
      <node id="16">
        <label>architecture/utilities/linearAlgebra.h</label>
      </node>
      <node id="17">
        <label>architecture/utilities/rigidBodyKinematics.h</label>
      </node>
      <node id="19">
        <label>cstring</label>
      </node>
      <node id="18">
        <label>iostream</label>
      </node>
      <node id="20">
        <label>math.h</label>
      </node>
      <node id="5">
        <label>string</label>
      </node>
      <node id="4">
        <label>vector</label>
      </node>
    </incdepgraph>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>ISC<sp/>License</highlight></codeline>
<codeline lineno="3"><highlight class="comment"></highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>Copyright<sp/>(c)<sp/>2022,<sp/>Autonomous<sp/>Vehicle<sp/>Systems<sp/>Lab,<sp/>University<sp/>of<sp/>Colorado<sp/>Boulder</highlight></codeline>
<codeline lineno="5"><highlight class="comment"></highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>Permission<sp/>to<sp/>use,<sp/>copy,<sp/>modify,<sp/>and/or<sp/>distribute<sp/>this<sp/>software<sp/>for<sp/>any</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>purpose<sp/>with<sp/>or<sp/>without<sp/>fee<sp/>is<sp/>hereby<sp/>granted,<sp/>provided<sp/>that<sp/>the<sp/>above</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>copyright<sp/>notice<sp/>and<sp/>this<sp/>permission<sp/>notice<sp/>appear<sp/>in<sp/>all<sp/>copies.</highlight></codeline>
<codeline lineno="9"><highlight class="comment"></highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>THE<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>&quot;AS<sp/>IS&quot;<sp/>AND<sp/>THE<sp/>AUTHOR<sp/>DISCLAIMS<sp/>ALL<sp/>WARRANTIES</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>WITH<sp/>REGARD<sp/>TO<sp/>THIS<sp/>SOFTWARE<sp/>INCLUDING<sp/>ALL<sp/>IMPLIED<sp/>WARRANTIES<sp/>OF</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>BE<sp/>LIABLE<sp/>FOR</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>ANY<sp/>SPECIAL,<sp/>DIRECT,<sp/>INDIRECT,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES<sp/>OR<sp/>ANY<sp/>DAMAGES</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>WHATSOEVER<sp/>RESULTING<sp/>FROM<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA<sp/>OR<sp/>PROFITS,<sp/>WHETHER<sp/>IN<sp/>AN</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>ACTION<sp/>OF<sp/>CONTRACT,<sp/>NEGLIGENCE<sp/>OR<sp/>OTHER<sp/>TORTIOUS<sp/>ACTION,<sp/>ARISING<sp/>OUT<sp/>OF</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>OR<sp/>IN<sp/>CONNECTION<sp/>WITH<sp/>THE<sp/>USE<sp/>OR<sp/>PERFORMANCE<sp/>OF<sp/>THIS<sp/>SOFTWARE.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"></highlight></codeline>
<codeline lineno="18"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;simulation/environment//groundMapping/groundMapping.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/avsEigenSupport.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/linearAlgebra.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;architecture/utilities/rigidBodyKinematics.h&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;math.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"><ref refid="class_ground_mapping_1a234e54d25f259decd95bd10ed5d8bdcc" kindref="member">GroundMapping::GroundMapping</ref>()</highlight></codeline>
<codeline lineno="32"><highlight class="normal">{</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1a28f62759058b9aeb446ef7c9a3662588" kindref="member">minimumElevation</ref><sp/>=<sp/>0.*D2R;<sp/></highlight><highlight class="comment">//<sp/>[rad]<sp/>minimum<sp/>elevation<sp/>above<sp/>the<sp/>local<sp/>horizon<sp/>needed<sp/>to<sp/>see<sp/>a<sp/>spacecraft;<sp/>defaults<sp/>to<sp/>0<sp/>degrees</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1ad29f2483241cb9736b7eebc73bcfaad1" kindref="member">maximumRange</ref><sp/>=<sp/>-1;<sp/></highlight><highlight class="comment">//<sp/>[m]<sp/>Maximum<sp/>range<sp/>for<sp/>the<sp/>groundLocation<sp/>to<sp/>compute<sp/>access.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1a8c738a906c7e6f07309f65db274f9378" kindref="member">halfFieldOfView</ref><sp/>=<sp/>10.*D2R;<sp/><sp/></highlight><highlight class="comment">//<sp/>[rad]<sp/>half-angle<sp/>field-of-view<sp/>of<sp/>the<sp/>instrument</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1a56bb6f58e01ebd26f2339bda558ba188" kindref="member">cameraPos_B</ref>.setZero(3);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1a336f6f3adedc632c8ec67a99fe367057" kindref="member">nHat_B</ref>.setZero(3);<sp/><sp/></highlight><highlight class="comment">//<sp/>Default<sp/>to<sp/>zero</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;planetInMsgBuffer<sp/>=<sp/>this-&gt;<ref refid="class_ground_mapping_1a86b9c2f24b84bf167d00af7733c8dbf3" kindref="member">planetInMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;planetInMsgBuffer.J20002Pfix[0][0]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;planetInMsgBuffer.J20002Pfix[1][1]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;planetInMsgBuffer.J20002Pfix[2][2]<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;scStateInMsgBuffer<sp/>=<sp/>this-&gt;<ref refid="class_ground_mapping_1ad551293954573fd1ec6cb425483cab64" kindref="member">scStateInMsg</ref>.zeroMsgPayload;</highlight></codeline>
<codeline lineno="46"><highlight class="normal">}</highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><ref refid="class_ground_mapping_1abda1b382ab20b6d3e8a19f28684bf490" kindref="member">GroundMapping::~GroundMapping</ref>()</highlight></codeline>
<codeline lineno="50"><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>this-&gt;<ref refid="class_ground_mapping_1a1550e1674dc2f343a499368444bde644" kindref="member">accessOutMsgs</ref>.size();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_ground_mapping_1a1550e1674dc2f343a499368444bde644" kindref="member">accessOutMsgs</ref>.at(c);</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal"><sp/>this-&gt;<ref refid="class_ground_mapping_1acc14d87db599109b76e10dc6afa161ae" kindref="member">currentGroundStateOutMsgs</ref>.at(c);</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="55"><highlight class="normal">}</highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_ground_mapping_1a4d22a78211943a7600e368e4dc1e491e" kindref="member">GroundMapping::Reset</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="61"><highlight class="normal">{</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>required<sp/>input<sp/>messages<sp/>are<sp/>connected</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(!this-&gt;<ref refid="class_ground_mapping_1ad551293954573fd1ec6cb425483cab64" kindref="member">scStateInMsg</ref>.isLinked())<sp/>{</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ground_mapping_1a06acf55b2d149b9e4fec9798e0728b32" kindref="member">bskLogger</ref>.bskLog(BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;GroundMapping.scStateInMsg<sp/>was<sp/>not<sp/>linked.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>check<sp/>that<sp/>the<sp/>direction<sp/>of<sp/>the<sp/>camera<sp/>is<sp/>provided</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(this-&gt;<ref refid="class_ground_mapping_1a336f6f3adedc632c8ec67a99fe367057" kindref="member">nHat_B</ref>.isZero()){</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="class_ground_mapping_1a06acf55b2d149b9e4fec9798e0728b32" kindref="member">bskLogger</ref>.bskLog(BSK_ERROR,<sp/></highlight><highlight class="stringliteral">&quot;GroundMapping.nHat_B<sp/>vector<sp/>not<sp/>set.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="71"><highlight class="normal">}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GroundMapping::ReadMessages(){</highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(this-&gt;<ref refid="class_ground_mapping_1a86b9c2f24b84bf167d00af7733c8dbf3" kindref="member">planetInMsg</ref>.isLinked())</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;planetInMsgBuffer<sp/>=<sp/>this-&gt;<ref refid="class_ground_mapping_1a86b9c2f24b84bf167d00af7733c8dbf3" kindref="member">planetInMsg</ref>();</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;scStateInMsgBuffer<sp/>=<sp/>this-&gt;<ref refid="class_ground_mapping_1ad551293954573fd1ec6cb425483cab64" kindref="member">scStateInMsg</ref>();</highlight></codeline>
<codeline lineno="83"><highlight class="normal">}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_ground_mapping_1aecf733f986380efab933902fa0038c4f" kindref="member">GroundMapping::addPointToModel</ref>(Eigen::Vector3d&amp;<sp/>r_LP_P_init){</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Add<sp/>the<sp/>mapping<sp/>point<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;mappingPoints.push_back(r_LP_P_init);</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>buffer<sp/>output<sp/>messages<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/>Message&lt;AccessMsgPayload&gt;<sp/>*msg;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/>msg<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message&lt;AccessMsgPayload&gt;;</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1a1550e1674dc2f343a499368444bde644" kindref="member">accessOutMsgs</ref>.push_back(msg);</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Expand<sp/>the<sp/>access<sp/>buffer<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/>AccessMsgPayload<sp/>accMsg;</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.push_back(accMsg);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Create<sp/>ground<sp/>state<sp/>output<sp/>message<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>Message&lt;GroundStateMsgPayload&gt;<sp/>*msg_2;</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>msg_2<sp/>=<sp/></highlight><highlight class="keyword">new</highlight><highlight class="normal"><sp/>Message&lt;GroundStateMsgPayload&gt;;</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1acc14d87db599109b76e10dc6afa161ae" kindref="member">currentGroundStateOutMsgs</ref>.push_back(msg_2);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Expand<sp/>the<sp/>ground<sp/>state<sp/>buffer<sp/>vectors<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/>GroundStateMsgPayload<sp/>groundMsg;</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;currentGroundStateMsgBuffer.push_back(groundMsg);</highlight></codeline>
<codeline lineno="109"><highlight class="normal">}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GroundMapping::computeAccess(uint64_t<sp/>c){</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c)<sp/>=<sp/>this-&gt;<ref refid="class_ground_mapping_1a1550e1674dc2f343a499368444bde644" kindref="member">accessOutMsgs</ref>.at(c)-&gt;zeroMsgPayload;</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;currentGroundStateMsgBuffer.at(c)<sp/>=<sp/>this-&gt;<ref refid="class_ground_mapping_1acc14d87db599109b76e10dc6afa161ae" kindref="member">currentGroundStateOutMsgs</ref>.at(c)-&gt;zeroMsgPayload;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;r_LP_N<sp/>=<sp/>this-&gt;dcm_PN.transpose()<sp/>*<sp/>this-&gt;mappingPoints[c];</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;rhat_LP_N<sp/>=<sp/>this-&gt;r_LP_N/this-&gt;r_LP_N.norm();</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;r_LN_N<sp/>=<sp/>this-&gt;r_PN_N<sp/>+<sp/>this-&gt;r_LP_N;</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVector3d2CArray(this-&gt;r_LN_N,<sp/>this-&gt;currentGroundStateMsgBuffer.at(c).r_LN_N);</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVector3d2CArray(this-&gt;r_LP_N,<sp/>this-&gt;currentGroundStateMsgBuffer.at(c).r_LP_N);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>r_BL_N<sp/>=<sp/>r_BP_N<sp/>-<sp/>this-&gt;r_LP_N;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>r_BL_mag<sp/>=<sp/>r_BL_N.norm();</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>relativeHeading_N<sp/>=<sp/>r_BL_N<sp/>/<sp/>r_BL_mag;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>viewAngle<sp/>=<sp/>(M_PI_2-safeAcos(this-&gt;rhat_LP_N.dot(relativeHeading_N)));</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).slantRange<sp/>=<sp/>r_BL_mag;</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).elevation<sp/>=<sp/>viewAngle;</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>r_BL_L<sp/>=<sp/>this-&gt;dcm_LP<sp/>*<sp/>this-&gt;dcm_PN<sp/>*<sp/>r_BL_N;</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVector3d2CArray(r_BL_L,<sp/>this-&gt;accessMsgBuffer.at(c).r_BL_L);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>cos_az<sp/>=<sp/>-r_BL_L[0]/(sqrt(pow(r_BL_L[0],2)<sp/>+<sp/>pow(r_BL_L[1],2)));</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>sin_az<sp/>=<sp/>r_BL_L[1]/(sqrt(pow(r_BL_L[0],2)<sp/>+<sp/>pow(r_BL_L[1],2)));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).azimuth<sp/>=<sp/>atan2(sin_az,<sp/>cos_az);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Vector3d<sp/>v_BL_L<sp/>=<sp/>this-&gt;dcm_LP<sp/>*<sp/>this-&gt;dcm_PN<sp/>*<sp/>(cArray2EigenVector3d(scStateInMsgBuffer.v_BN_N)<sp/>-<sp/>this-&gt;w_PN.cross(r_BP_N));<sp/></highlight><highlight class="comment">//<sp/>V<sp/>observed<sp/>from<sp/>gL<sp/>wrt<sp/>P<sp/>frame,<sp/>expressed<sp/>in<sp/>L<sp/>frame<sp/>coords<sp/>(SEZ)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>eigenVector3d2CArray(v_BL_L,<sp/>this-&gt;accessMsgBuffer.at(c).v_BL_L);</highlight></codeline>
<codeline lineno="145"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).range_dot<sp/>=<sp/>v_BL_L.dot(r_BL_L)/r_BL_mag;</highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>xy_norm<sp/>=<sp/>sqrt(pow(r_BL_L[0],2)+pow(r_BL_L[1],2));</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).az_dot<sp/>=<sp/>(-r_BL_L[0]*v_BL_L[1]<sp/>+<sp/>r_BL_L[1]*v_BL_L[0])/pow(xy_norm,2);</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).el_dot<sp/>=<sp/>(v_BL_L[2]/xy_norm<sp/>-<sp/>r_BL_L[2]*(r_BL_L[0]*v_BL_L[0]<sp/>+<sp/>r_BL_L[1]*v_BL_L[1])/pow(xy_norm,3))/(1+pow(r_BL_L[2]/xy_norm,2));</highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/>uint64_t<sp/>within_view<sp/>=<sp/>this-&gt;checkInstrumentFOV();</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal">(<sp/>(viewAngle<sp/>&gt;<sp/>this-&gt;<ref refid="class_ground_mapping_1a28f62759058b9aeb446ef7c9a3662588" kindref="member">minimumElevation</ref>)<sp/>&amp;&amp;<sp/>(r_BL_mag<sp/>&lt;=<sp/>this-&gt;<ref refid="class_ground_mapping_1ad29f2483241cb9736b7eebc73bcfaad1" kindref="member">maximumRange</ref><sp/>||<sp/>this-&gt;<ref refid="class_ground_mapping_1ad29f2483241cb9736b7eebc73bcfaad1" kindref="member">maximumRange</ref><sp/>&lt;<sp/>0)<sp/>&amp;&amp;<sp/>within_view){</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).hasAccess<sp/>=<sp/>1;</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;accessMsgBuffer.at(c).hasAccess<sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="158"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal">}</highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GroundMapping::updateInertialPositions()</highlight></codeline>
<codeline lineno="165"><highlight class="normal">{</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>First,<sp/>get<sp/>the<sp/>rotation<sp/>matrix<sp/>from<sp/>the<sp/>inertial<sp/>to<sp/>planet<sp/>frame<sp/>from<sp/>SPICE:</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dcm_PN<sp/>=<sp/>cArray2EigenMatrix3d(*this-&gt;planetInMsgBuffer.J20002Pfix);</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dcm_PN_dot<sp/>=<sp/>cArray2EigenMatrix3d(*this-&gt;planetInMsgBuffer.J20002Pfix_dot);</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;r_PN_N<sp/>=<sp/>cArray2EigenVector3d(this-&gt;planetInMsgBuffer.PositionVector);</highlight></codeline>
<codeline lineno="170"><highlight class="normal"></highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Compute<sp/>the<sp/>position<sp/>of<sp/>the<sp/>body<sp/>frame<sp/>to<sp/>the<sp/>planet<sp/>in<sp/>the<sp/>inertial<sp/>frame</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;r_BP_N<sp/>=<sp/>cArray2EigenVector3d(scStateInMsgBuffer.r_BN_N)<sp/>-<sp/>this-&gt;r_PN_N;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>dcm_BN[3][3];</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/>MRP2C(scStateInMsgBuffer.sigma_BN,<sp/>dcm_BN);</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;dcm_NB<sp/>=<sp/>cArray2EigenMatrixXd(*dcm_BN,<sp/>3,<sp/>3);</highlight></codeline>
<codeline lineno="176"><highlight class="normal"></highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Get<sp/>planet<sp/>frame<sp/>angular<sp/>velocity<sp/>vector</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>Eigen::Matrix3d<sp/>w_tilde_PN<sp/>=<sp/>-<sp/>this-&gt;dcm_PN_dot<sp/>*<sp/>this-&gt;dcm_PN.transpose();</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;w_PN<sp/>&lt;&lt;<sp/>w_tilde_PN(2,1),<sp/>w_tilde_PN(0,2),<sp/>w_tilde_PN(1,0);</highlight></codeline>
<codeline lineno="180"><highlight class="normal">}</highlight></codeline>
<codeline lineno="181"><highlight class="normal"></highlight></codeline>
<codeline lineno="184"><highlight class="normal">uint64_t<sp/>GroundMapping::checkInstrumentFOV(){</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>projection<sp/>of<sp/>the<sp/>mapping<sp/>point<sp/>along<sp/>the<sp/>instrument&apos;s<sp/>boresight<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>boresightNormalProj<sp/>=<sp/>((this-&gt;r_LP_N<sp/>-<sp/>(this-&gt;r_BP_N<sp/>+<sp/>this-&gt;dcm_NB*<ref refid="class_ground_mapping_1a56bb6f58e01ebd26f2339bda558ba188" kindref="member">cameraPos_B</ref>)).transpose())*(dcm_NB*this-&gt;<ref refid="class_ground_mapping_1a336f6f3adedc632c8ec67a99fe367057" kindref="member">nHat_B</ref>);</highlight></codeline>
<codeline lineno="187"><highlight class="normal"></highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>normal<sp/>projection<sp/>is<sp/>within<sp/>the<sp/>maximum<sp/>range*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>((boresightNormalProj<sp/>&gt;=<sp/>0)<sp/>&amp;&amp;<sp/>(boresightNormalProj<sp/>&lt;=<sp/>this-&gt;<ref refid="class_ground_mapping_1ad29f2483241cb9736b7eebc73bcfaad1" kindref="member">maximumRange</ref>)){</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Compute<sp/>the<sp/>radius<sp/>of<sp/>the<sp/>instrument&apos;s<sp/>cone<sp/>at<sp/>the<sp/>projection<sp/>distance<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>coneRadius<sp/>=<sp/>boresightNormalProj*tan(this-&gt;<ref refid="class_ground_mapping_1a8c738a906c7e6f07309f65db274f9378" kindref="member">halfFieldOfView</ref>);</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>orthDistance<sp/>=<sp/>(this-&gt;r_LP_N<sp/>-<sp/>(this-&gt;r_BP_N<sp/>+<sp/>this-&gt;dcm_NB*<ref refid="class_ground_mapping_1a56bb6f58e01ebd26f2339bda558ba188" kindref="member">cameraPos_B</ref>)<sp/><sp/>-<sp/>boresightNormalProj*dcm_NB*this-&gt;nHat_B).norm();</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>Check<sp/>that<sp/>the<sp/>orthogonal<sp/>distance<sp/>is<sp/>less<sp/>than<sp/>the<sp/>cone<sp/>radius<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(orthDistance<sp/>&lt;<sp/>coneRadius)<sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>1;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">/*<sp/>If<sp/>the<sp/>first<sp/>condition<sp/>does<sp/>not<sp/>pass,<sp/>return<sp/>0<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="204"><highlight class="normal">}</highlight></codeline>
<codeline lineno="205"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>GroundMapping::WriteMessages(uint64_t<sp/>CurrentClock)</highlight></codeline>
<codeline lineno="209"><highlight class="normal">{</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c=0;<sp/>c&lt;<sp/>this-&gt;accessMsgBuffer.size();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1a1550e1674dc2f343a499368444bde644" kindref="member">accessOutMsgs</ref>.at(c)-&gt;write(&amp;this-&gt;accessMsgBuffer.at(c),<sp/>this-&gt;moduleID,<sp/>CurrentClock);</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;<ref refid="class_ground_mapping_1acc14d87db599109b76e10dc6afa161ae" kindref="member">currentGroundStateOutMsgs</ref>.at(c)-&gt;write(&amp;this-&gt;currentGroundStateMsgBuffer.at(c),<sp/>this-&gt;moduleID,<sp/>CurrentClock);</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="216"><highlight class="normal">}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="class_ground_mapping_1a997d57af15de95b8de6cf27ed48c3e1f" kindref="member">GroundMapping::UpdateState</ref>(uint64_t<sp/>CurrentSimNanos)</highlight></codeline>
<codeline lineno="222"><highlight class="normal">{</highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Read<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;ReadMessages();</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Update<sp/>the<sp/>inertial<sp/>positions</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;updateInertialPositions();</highlight></codeline>
<codeline lineno="228"><highlight class="normal"></highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Loop<sp/>through<sp/>each<sp/>mapping<sp/>point<sp/>and<sp/>perform<sp/>computations</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="230"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>c<sp/>=<sp/>0;<sp/>c<sp/>&lt;<sp/>this-&gt;mappingPoints.size();<sp/>c++)<sp/>{</highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>this-&gt;computeAccess(c);</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>Write<sp/>output<sp/>messages</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>this-&gt;WriteMessages(CurrentSimNanos);</highlight></codeline>
<codeline lineno="236"><highlight class="normal">}</highlight></codeline>
<codeline lineno="237"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/Users/julio/Desktop/basilisk/src/simulation/environment/groundMapping/groundMapping.cpp"/>
  </compounddef>
</doxygen>
